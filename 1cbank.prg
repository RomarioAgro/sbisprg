# импорт платежек из файла в стандарте 1C
функция ИмпортироватьПлатежки1С( Каталог )
# Импортирует в сбис входящие платежи, из файла KL_TO_1C.TXT из указанного каталога,
# если каталог не указан, то спрашивает его и сохраняет в константе
{
   Если( Есть('.Папки') != 1 )
   {
      Сообщить("Сначала создайте в папке хотя бы одну платежку");
      Вернуть 1;
   }
   Если( 'Тип документа' != "ПлатВход")
   {
      Сообщить("Импортировать документы можно только в реестр входящих платежей");
      Вернуть 1;
   }
   # читаем файл
   Если(Размер(Каталог) == 0)
   {
      СокрРСчета = Подстрока( 'Наш р/с-Платежи.Р/счет', Размер('Наш р/с-Платежи.Р/счет') - 4 );
      ИмяКонстКаталог = "КБ_КАТАЛОГ" + СокрРСчета;
      Если( !Есть( [ИмяКонстКаталог] ) ) Каталог = "";
      Иначе                              Каталог = [ИмяКонстКаталог];
      Спросить( "Каталог обмена с клиент-банком " + СокрРСчета, Каталог );
      Если( Размер( Каталог ) > 0 и ПодСтрока( Каталог, Размер( Каталог ), 1) != "\\" )
         Каталог = Каталог + "\\";
      СохранитьКонстанту( "КЛИЕНТБАНК." + ИмяКонстКаталог, Каталог, "КЛИЕНТ БАНК.Каталог обмена с клиент-банком " + Заменить( 'Наш р/с-Платежи.Банк-Р/с.Название банка', ".", "_" ) );
   }
   НазваниеФайла = Каталог+"KL_TO_1C.TXT";

   Файл = Объект(НазваниеФайла);
   Этап = "Начало";
   Кодировка = "DOS";
   ИННПлательщика = РСчетПлательщика = Плательщик1 = БанкПлательщика = "";
   ИННПолучателя = РСчетПолучателя = "";
   ДатаНачала = ТекДат();

   # правило операции
   ЕстьПравило = 0;
   ПроверитьКонстанту( "КБПРАВИЛО", "Правило при импорте из клиент-банка", "", "КЛИЕНТБАНК", "КЛИЕНТ БАНК" );
   Если(КБПРАВИЛО != "")
   {
      Прав = Объект("Правила операций");
      Прав.Имя = КБПРАВИЛО;
      Если(Найти(Прав,"Имя"))
         ЕстьПравило = 1;         
   }

   ЧислоСтрок = 0;
   Пока(Следующий(Файл) и Этап != "Конец") 
   {
      Команда = "";
      Если(Кодировка == "Windows")
         Стр = Win2Dos(Файл.Строка);
      иначе
         Стр = Файл.Строка;
      Стр = УбратьПробелы(Стр);
      н = Найти(Стр, "=");
      Если(н>0)
      {
         Команда = ПодСтрока( Стр, 1, н-1);
         Стр = УбратьПробелы(ПодСтрока(Стр, н+1, -1));
      }
      иначе
      {
         Команда = Стр;
         Стр = "";
      }
      ВывестиСтатус(ЧислоСтрок++);
      #Сообщить(Команда+" "+Стр+" "+Этап);

      ВыборПо(Этап)
      {
         выбор "Начало":
            Если(Команда != "1CClientBankExchange")
            {
               Сообщить("Данный файл не является корректным файлом экспорта");
               Этап = "Конец";
            }
            иначе
               Этап = "Заголовок";
         выбор "Заголовок":
            Если(Стр == "Windows")
               Кодировка = "Windows";
            Если(Команда == "ДатаНачала") # дата выписки
               ДатаНачала = Дата(Стр);
            Если(Команда == "СекцияДокумент" и Вверх(Стр) == "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ")
            {
               Этап = "Документ";
               Док = Выборка("Входящие платежи");
               Док.Связать("Папки", '.Папки');
               Док.Состояние = "                               ";
               Док.Дата = ДатаНачала;
            }
         выбор "Документ":
         {
            ВыборПо(Команда)
            {
               выбор "СекцияДокумент":
                  Док = Выборка("Входящие платежи");
                  Док.Связать("Папки", '.Папки');
                  Док.Состояние = "                               ";
                  Док.Дата = ДатаНачала;

                  ИННПлательщика = РСчетПлательщика = Плательщик1 = БанкПлательщика = "";
                  ИННПолучателя = РСчетПолучателя = "";
                  Если(ЕстьПравило)
                     Док.Связать("Правила-Документы", Прав);
                  Если(Вверх(Стр) != "ПЛАТЕЖНОЕ ПОРУЧЕНИЕ") # вкачиваем только платежные поручения
                     Этап = "Пропуск";
               выбор "КонецДокумента":
                  Док2 = Док.Документ_;
                  # Заполняем Плательщика в Лицо1
                  Если( ИННПлательщика != "" )
                  {
                     Перем ИННПлатБезНулей = УбратьЛидирующиеНули( ИННПлательщика );
                     Объект оПлательщик;
                        оПлательщик = НайтиЛицо( ИННПлательщика, "Организации");
                     Если( Есть(оПлательщик) != 1 )
                        оПлательщик = НайтиЛицо( ИННПлатБезНулей, "Организации");
                     Если( Есть(оПлательщик) != 1 )
                        оПлательщик = НайтиЛицо( ИННПлательщика, "Частные лица");
                     Если( Есть(оПлательщик) != 1 )
                        оПлательщик = НайтиЛицо( ИННПлатБезНулей, "Частные лица");
                     Если( Есть(оПлательщик) == 1 )
                        Док.Связать(Лицо1, оПлательщик );
                     иначе
                     {
                        Док.Приложение = ИННПлательщика+" "+Плательщик1;
                        Сообщить("Не найдена организация-плательщик \n"+Плательщик1+"\n ИНН "+ИННПлательщика+"\n Док N "+Текст(Док.Номер)+" от "+Текст(Док.Дата));
                     }
                  }
                  иначе
                  {
                     Док.Приложение = ИННПлательщика+" "+Плательщик1;
                     Сообщить("Не задан ИНН плательщика\n"+Плательщик1+"\n Док N "+Текст(Док.Номер)+" от "+Текст(Док.Дата));
                  }
                  # Заполняем р/счет плательщика
                  Если( РСчетПлательщика != "" и Есть( оПлательщик ) == 1 )
                  {
                     Объект оРСчетПлательщика = Объект("Расчетные счета");
                     Перем Нашли = 0;
                     Пока( Следующий( оПлательщик, оРСчетПлательщика, "Лица-Р/с" ) и !Нашли )
                        Если( 'оРСчетПлательщика.Р/счет' == РСчетПлательщика )
                        {
                           Нашли = 1;
                           Док2.Связать("Р/с-Платежи", оРСчетПлательщика );
                        }
#                     Если( !Нашли )
#                        Сообщить("Не найден р/счет плательщика \n"+РСчетПлательщика +"\n Док N "+Текст(Док.Номер)+" от "+Текст(Док.Дата) );
                  }
                  # Ищем получателя
                  Если( ИННПолучателя != "" )
                  {
                     Перем ИННПостБезНулей = УбратьЛидирующиеНули( ИННПолучателя );
                     Объект оПолучатель;
                        оПолучатель = НайтиЛицо( ИННПолучателя, "Организации");
                     Если( Есть(оПолучатель) != 1 )
                        оПолучатель = НайтиЛицо( ИННПостБезНулей, "Организации");
                     Если( Есть(оПолучатель) != 1 )
                        оПолучатель = НайтиЛицо( ИННПолучателя, "Частные лица");
                     Если( Есть(оПолучатель) != 1 )
                        оПолучатель = НайтиЛицо( ИННПостБезНулей, "Частные лица");
                     Если( Есть(оПолучатель) != 1 )
                        Сообщить("Не найдена организация-получатель\n"+Получатель1+"\n ИНН "+ИННПолучателя+"\n Док N "+Текст(Док.Номер)+" от "+Текст(Док.Дата));
                  }
                  иначе
                     Сообщить("Не задан ИНН Получателя\n"+Получатель1+"\n Док N "+Текст(Док.Номер)+" от "+Текст(Док.Дата));
                  # Заполняем р/счет получателя (наш)
                  Если( РСчетПолучателя != "" и Есть( оПолучатель ) == 1 )
                  {
                     оРСчетПолучателя = Объект("Расчетные счета");
                     Перем Нашли = 0;
                     Пока( Следующий( оПолучатель, оРСчетПолучателя, "Лица-Р/с") и !Нашли )
                        Если( 'оРСчетПолучателя.Р/счет' == РСчетПолучателя )
                        {
                           Нашли = 1;
                           Док2.Связать("Наш р/с-Платежи", оРСчетПолучателя );
                        }
                     Если( !Нашли )
                        Сообщить("Не найден р/счет получателя \n"+ Получатель1 + "\n" + РСчетПолучателя+"\n Док N "+Текст(Док.Номер)+" от "+Текст(Док.Дата));
                  }
                  Добавить(Док);
               выбор "Номер":
                  Док.Номер = Макс( Число(Стр), 0 );
               #выбор "Дата":
               #   Док.Дата = Дата(Стр);
               выбор "Сумма":
                  Док.Сумма = Число(Стр);
                  Док.$Сумма = Док.Курс ? Док.Сумма / Док.Курс : 0;
               выбор "ВидПлатежа":
                  'Док.Вид платежа' = Стр;
               выбор "СрокПлатежа":
                  Док.Срок = Дата(Стр);
               выбор "Очередность":
                  Док.Очередность = Число(Стр);
               выбор "НазначениеПлатежа":
                  Док.Примечание = Стр;
#               выбор "НазначениеПлатежа1":
#                  Док.Приложение = Стр;
               выбор "ПлательщикИНН":
                  ИННПлательщика = Стр;
               выбор "ПолучательСчет": # наш р/счет
                  РСчетПолучателя = Стр;
               выбор "ПлательщикСчет": 
                  РСчетПлательщика = Стр;
               выбор "ПлательщикБанк1":
                  БанкПлательщика = Стр;
               выбор "Плательщик1":
                  Плательщик1 = Стр;
               выбор "ПолучательИНН":
                  ИННПолучателя = Стр; 
               выбор "Получатель1":
                  Получатель1 = Стр;
            }
         }
         выбор "Пропуск":
            Если(Стр == "Платежное поручение")
               Этап = "Документ";
      }
   }
   Вернуть 0;
}

функция УбратьПробелы(стр)
{
   Пока(Размер(стр) и ПодСтрока(стр, Размер(стр), 1) == " ")
      стр = ПодСтрока(стр, 1, Размер(стр)-1);
   вернуть стр;
}

функция УбратьЛидирующиеНули( ИНН )
{
   Пока( Размер(ИНН)>0 и ПодСтрока( ИНН, 1, 1 ) == "0" )
      ИНН = ПодСтрока( ИНН, 2, -1 );
   вернуть ИНН;
}
