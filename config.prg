# Функции для запроса констант диалогами

Функция ПрочитатьКонстантуДиалога( ИмяКонстанты, ПолноеИмя, ПоУмолчанию )
# Вспомогательная функция
# Запоминает все реквизиты константы в массив. Используется в диалогах.
# Паратетры: ИмяКонстанты  - краткое имя константы,
#            ПолноеИмя     - полное имя константы
#            ПоУмолчанию   - значение по умолчанию
# Возвращает: массив мКонст, содержащий все реквизиты констант диалога
{
   мКонст[ ИмяКонстанты, "Раздел" ]          = Раздел;
   Если( ПолныйРаздел )
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолныйРаздел + "." + ПолноеИмя;
   иначе # находится в корне
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолноеИмя;
#   мКонст[ ИмяКонстанты, "Значение" ]        = ["П" + ИмяКонстанты] = Есть([ИмяКонстанты])?[ИмяКонстанты]:"";
#   мКонст[ ИмяКонстанты, "Значение" ]        = ["П" + ИмяКонстанты] = Константа( ТекДат(), ИмяКонстанты );
   мКонст[ ИмяКонстанты, "Значение" ]        = ["П" + ИмяКонстанты] = Константа( пДатКнц, ИмяКонстанты );
   Если( !Есть( [ИмяКонстанты] ) )
      ["П" + Вверх(ИмяКонстанты)] = ПоУмолчанию;
}

Функция ПрочитатьКонстантуДиалогаНаДату( ИмяКонстанты, ПолноеИмя, ПоУмолчанию )
# Вспомогательная функция
# Запоминает все реквизиты константы в массив. Используется в диалогах.
# Паратетры: ИмяКонстанты  - краткое имя константы,
#            ПолноеИмя     - полное имя константы
#            ПоУмолчанию   - значение по умолчанию
# Возвращает: массив мКонст, содержащий все реквизиты констант диалога
{
   мКонст[ ИмяКонстанты, "Раздел" ]          = Раздел;
   Если( ПолныйРаздел )
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолныйРаздел + "." + ПолноеИмя;
   иначе # находится в корне
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолноеИмя;
#   мКонст[ ИмяКонстанты, "Значение" ]        = ["Т" + ИмяКонстанты] = Есть([ИмяКонстанты])?[ИмяКонстанты]:"";
#   мКонст[ ИмяКонстанты, "Значение" ]        = ["Т" + ИмяКонстанты] = Константа( ТекДат(), ИмяКонстанты );
   мКонст[ ИмяКонстанты, "Значение" ]        = ["Т" + ИмяКонстанты] = Константа( пДатКнц, ИмяКонстанты );
   Если( !Есть( [ИмяКонстанты] ) )
      ["Т" + Вверх(ИмяКонстанты)] = ПоУмолчанию;
}


Функция ЗапомнитьКонстантуДиалога( ИмяКонстанты )
# Вспомогательная функция
# Запоминает значение указанной константы из поля диалога
# Все реквизиты константы берутся из внешнего массива мКонст
{
   Если( Есть( [ "И" + ИмяКонстанты + "1" ] ) ) # историческая константа
   {
      Нпп = 1;
      Пока( Есть( мКонст[ ИмяКонстанты, "Дата" + Нпп ] ) )
      {
         Если( мКонст[ ИмяКонстанты, "Значение" + Нпп ] != ["И" + ИмяКонстанты + Нпп] ) 
            СохранитьКонстанту( Текст( мКонст[ ИмяКонстанты, "Раздел" ] + "." + ИмяКонстанты),
                                ["И" + ИмяКонстанты + Нпп], мКонст[ ИмяКонстанты, "ПолныйРаздел" ],
                                мКонст[ ИмяКонстанты, "Дата"+Нпп ] );
         Нпп++;
      }
   }

   Если( Есть( [ "П" + ИмяКонстанты ] ) ) # не историческая константа
   {
      Если( мКонст[ ИмяКонстанты, "Значение" ] != ["П" + ИмяКонстанты] или !Есть([ИмяКонстанты]) )
         СохранитьКонстанту( Текст( мКонст[ ИмяКонстанты, "Раздел" ] + "." + ИмяКонстанты),
                             ["П" + ИмяКонстанты], мКонст[ ИмяКонстанты, "ПолныйРаздел" ]);
   }
   Если( Есть( [ "Ф" + ИмяКонстанты ] ) ) # флаг диалога
   {
      Если( Подстрока( [ "Ф" + ИмяКонстанты ], 1, 1) == "*" ) # флаг установлен
         [ "П" + ИмяКонстанты ] = "1";
      иначе # флаг снят
         [ "П" + ИмяКонстанты ] = "0";
      Если( мКонст[ ИмяКонстанты, "Значение" ] != ["П" + ИмяКонстанты] или !Есть([ИмяКонстанты]) )
         СохранитьКонстанту( Текст( мКонст[ ИмяКонстанты, "Раздел" ] + "." + ИмяКонстанты),
                             ["П" + ИмяКонстанты], мКонст[ ИмяКонстанты, "ПолныйРаздел" ]);
   }
   Если( Есть( [ "Т" + ИмяКонстанты ] ) ) # историческая константа
   {
      Если( мКонст[ ИмяКонстанты, "Значение" ] != ["Т" + ИмяКонстанты] или !Есть([ИмяКонстанты]) )
         СохранитьКонстанту( Текст( мКонст[ ИмяКонстанты, "Раздел" ] + "." + ИмяКонстанты),
                             ["Т" + ИмяКонстанты], мКонст[ ИмяКонстанты, "ПолныйРаздел" ], пДатКнц);
   }
   Если( Есть( [ "Ф" + ИмяКонстанты ] ) ) # флаг диалога
   {
      Если( Подстрока( [ "Ф" + ИмяКонстанты ], 1, 1) == "*" ) # флаг установлен
         [ "П" + ИмяКонстанты ] = "1";
      иначе # флаг снят
         [ "П" + ИмяКонстанты ] = "0";
      Если( мКонст[ ИмяКонстанты, "Значение" ] != ["П" + ИмяКонстанты] или !Есть([ИмяКонстанты]) )
         СохранитьКонстанту( Текст( мКонст[ ИмяКонстанты, "Раздел" ] + "." + ИмяКонстанты),
                             ["П" + ИмяКонстанты], мКонст[ ИмяКонстанты, "ПолныйРаздел" ]);
   }

   Если( Есть([ИмяКонстанты]) )
      УдалитьПерем([ИмяКонстанты]);
}

Функция ПараметрыОбщие( пДатНач, пДатКнц )
# Вызывает диалог "Общие сведения об организации". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ПТАБНОМРУКОВОДИТЕЛЯ, ПТАБНОМБУХГАЛТЕРА;
   перем ппДиалог = СоздатьДиалог("ПараметрыОбщие");
   Установить(ппДиалог);
   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "КПП",           "Код причины постановки на учет", "" );
   ПрочитатьКонстантуДиалога( "ОКДП",          "Вид деятельности по общероссийскому классификатору", "" );
   ПрочитатьКонстантуДиалога( "ОКФС",          "Форма собственности по общероссийскому классификатору", "" );
   ПрочитатьКонстантуДиалога( "ОКАТО",         "Код ОКАТО административно территориального деления", "" );
   ПрочитатьКонстантуДиалога( "ОКОПФ",         "Организационно-правовая форма по общероссийскому классификатору", "" );
   ПрочитатьКонстантуДиалога( "ОКВЭД",         "Код ОКВЭД видов экономической деятельности", "" );
   ПрочитатьКонстантуДиалога( "ТАБНОМРУКОВОДИТЕЛЯ",    "ТабНомер руководителя предриятия", "" );
   ПрочитатьКонстантуДиалога( "ТЕЛРУКОВОДИТЕЛЯ",       "Телефон руководителя предриятия", "" );
   ПрочитатьКонстантуДиалога( "ДОЛЖНОСТЬРУКОВОДИТЕЛЯ", "Название должности руководителя", "" );
   ПрочитатьКонстантуДиалога( "ТАБНОМБУХГАЛТЕРА",      "ТабНомер главного бухгалтера предриятия", "" );
   ПрочитатьКонстантуДиалога( "ТЕЛБУХГАЛТЕРА", "Телефон главного бухгалтера предриятия","" );
   ПрочитатьКонстантуДиалога( "ТЕЛЕФОН",       "Контактный телефон","" );
   ПрочитатьКонстантуДиалога( "ТЕЛКОДГОРОДА",  "Телефонный код контактного телефона","0852" );
   ПрочитатьКонстантуДиалога( "ФАКС",          "Номер факса","" );
   ПрочитатьКонстантуДиалога( "КАССИР",        "Фамилия кассира","Иванов И.И." );

   Раздел = "УЧПОЛИТИКА";
   ПолныйРаздел = "УЧЕТНАЯ ПОЛИТИКА ОРГАНИЗАЦИИ";
   ПрочитатьКонстантуДиалога( "ДАТА_НОВ_ПЛАН", "Дата работы по новому плану счетов (01.01.2001 или 01.01.2002)", "" );
   ПрочитатьКонстантуДиалога( "ДАТА_СОЗД_ОРГ", "Дата создания предприятия", "" );

   пСотр = Объект("Сотрудники");
   пСотр.ТабНомер = ПТАБНОМРУКОВОДИТЕЛЯ;
   Если( Найти( пСотр, "ТабНомер" ) != 1 )
      пСотр = Объект("Сотрудники");
   Связать( ппДиалог.ОРУК, пСотр );  # функция Связать пока не работает
   пСотр = Объект("Сотрудники");
   пСотр.ТабНомер = ПТАБНОМБУХГАЛТЕРА;
   Если( Найти( пСотр, "ТабНомер" ) != 1 )
      пСотр = Объект("Сотрудники");
   Связать( ппДиалог.ОБУХ, пСотр );

   Если( ВыполнитьДиалог(ппДиалог) )
   {
      ПТАБНОМРУКОВОДИТЕЛЯ = ОРУК.ТабНомер;
      ПТАБНОМБУХГАЛТЕРА   = ОБУХ.ТабНомер;
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   }
   Установить();
}

Функция ПараметрыОбщиеДополнительно( пДатНач, пДатКнц )
# Вызывает диалог "Дополнительные сведения об организации". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;
   перем ппДиалог = СоздатьДиалог("ПараметрыОбщиеДополнительно");
   Установить(ппДиалог);
   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ПФОБЛАСТЬ",     "Название области в отчетах ПФ, если не заполненно в адресе сотрудника","ЯРОСЛАВСКАЯ" );
   ПрочитатьКонстантуДиалога( "ВИДДЕЯТ",       "Наименование вида деятельности","" );
   ПрочитатьКонстантуДиалога( "ОРГПРАВФОРМА",  "Наименование организационно-правовой формы","" );
   ПрочитатьКонстантуДиалога( "ФОРМСОБСТВ",    "Наименование формы собственности","" );

   Если( ВыполнитьДиалог(ппДиалог) )
   {
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   }
   Установить();
}

Функция ПараметрыНалоговой( пДатНач, пДатКнц )
# Вызывает диалог "Реквизиты налоговой инспекции". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыНалоговой");
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "НАЛОГОВАЯ", "Наименование налоговой инспекции", "" );

   Раздел = "ГНИ";
   ПолныйРаздел = "СВЕДЕНИЯ О ГНИ";
   ПрочитатьКонстантуДиалога( "КОДГНИ",    "Код налоговой инспекции",   "" );
   ПрочитатьКонстантуДиалога( "АДРЕСГНИ",  "Адрес налоговой инспекции", "" );
   ПрочитатьКонстантуДиалога( "ТЕЛГНИ",    "Телефон инспектора налоговой инспекции", "" );
   ПрочитатьКонстантуДиалога( "ПНКОДРЕГИОНА", "Код региона в отчетах ПН, если не заполнен в адресе сотрудника", "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   Установить();
}

Функция ПараметрыСчетовПоЗарплате( пДатНач, пДатКнц )
# Вызывает диалог "Кодовые названия счетов по зарплате".
# Проверяет наличие констант, при необходимости их создает и
# сохраняет измененные значения в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыСчетовПоЗарплате");
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "СЧЕТА.СЧ50";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(50) КАССА";
   ПрочитатьКонстантуДиалога( "50КАССА", "Касса", "50" );

   Раздел       = "СЧЕТА.СЧ51";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(51) РАСЧЕТНЫЙ СЧЕТ";
   ПрочитатьКонстантуДиалога( "51БАНК", "Расчетный счет", "51" );
   
   Раздел       = "СЧЕТА.СЧ55";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(55) СПЕЦИАЛЬНЫЕ СЧЕТА В БАНКАХ";
   ПрочитатьКонстантуДиалога( "55СПЕЦСЧЕТА", "Специальные счета в банках", "55" );

   Раздел       = "СЧЕТА.СЧ70";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(70) РАСЧЕТЫ С ПЕРСОНАЛОМ ПО ОПЛАТЕ ТРУДА";
   ПрочитатьКонстантуДиалога( "70ЗАРПЛАТА", "Расчеты с персоналом по оплате труда", "70" );
   
   Раздел       = "ЕСН";
   ПолныйРаздел = "ЕДИНЫЙ СОЦИАЛЬНЫЙ НАЛОГ";
   ПрочитатьКонстантуДиалога( "84НЕРПРИБ", "Счет нераспределенной прибыли, если ее нет - пусто", "84-1" );

   Раздел       = "СЧЕТА.СЧ69";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(69) СЧЕТА РАСЧЕТОВ ПО СОЦ СТРАХОВАНИЮ";
   ПрочитатьКонстантуДиалога( "69ПФ_ФБ",       "Расчеты с Федеральным бюджетом по ЕСН", "69-ПФ-ФБ" );
   ПрочитатьКонстантуДиалога( "69ПФ_СЧ",       "Расчеты с ПФ страховая часть",          "69-ПФ-СЧ" );
   ПрочитатьКонстантуДиалога( "69ПФ_НЧ",       "Расчеты с ПФ накопительная часть",      "69-ПФ-НЧ" );
   ПрочитатьКонстантуДиалога( "69СОЦСТРАХ",    "Расчеты по соц страхованию",            "69-СОЦ-1" );
   ПрочитатьКонстантуДиалога( "69СОЦСТРАХДОП", "Расчеты по соц страхованию от несчастных случаев", "69-СОЦ-2" );
   ПрочитатьКонстантуДиалога( "69СОЦЕВН",      "Расчеты по соц страхованию (для ЕСН и УСН)", "69-СОЦ-3" );
   ПрочитатьКонстантуДиалога( "69МЕДСТРАХ",    "Расчеты с федеральным фондом ОМС",      "69-ФОМС" );
   ПрочитатьКонстантуДиалога( "69ТЕРМЕДСТРАХ", "Расчеты с территориальным фондом ОМС",  "69-ТОМС" );

   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68ПОДН", "Расчеты по подоходному налогу", "68-ПН" );

   Раздел       = "СЧЕТА.СЧ97";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(97) РАСХОДЫ БУДУЩИХ ПЕРИОДОВ";
   ПрочитатьКонстантуДиалога( "97ОБМ", "Отпуска будущих периодов", "97-2" );
   ПрочитатьКонстантуДиалога( "97РБП", "Расходы будущих периодов", "97-1" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляФСС( пДатНач, пДатКнц )
# Вызывает диалог "Ведомость в ФСС". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляФСС");
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ.СОЦСТРАХ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.ВЕДОМОСТЬ ПО ФОНДУ СОЦИАЛЬНОГО СТРАХОВАНИЯ";
   ПрочитатьКонстантуДиалога( "СОЦСТРРЕГНОМ",      "Регистрационный номер в фонде соц страхования", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРИЗМ",         "Изменения начисленного ЕСН в соответствии с налоговой декларацией за прошлые годы",    "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРАКТКВ",       "Начислено по актам налоговых органов на начало квартала",    "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРАКТ1",        "Начислено по актам налоговых органов за 1-й месяц квартала", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРАКТ2",        "Начислено по актам налоговых органов за 2-й месяц квартала", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРАКТ3",        "Начислено по актам налоговых органов за 3-й месяц квартала", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРВОЗВРКВ",     "Возвращено переплаты по ЕСН на начало квартала",    "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРВОЗВР1",      "Возвращено переплаты по ЕСН за 1-й месяц квартала", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРВОЗВР2",      "Возвращено переплаты по ЕСН за 2-й месяц квартала", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРВОЗВР3",      "Возвращено переплаты по ЕСН за 3-й месяц квартала", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРСТАВКАДОП",   "Ставка сбора от несчастных случаев (%)",    "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРКЛАСС",       "Класс профессионального риска (несч случ)", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРАКТВЗНДОП",   "Начислено взносов по актам (несч случ)",    "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРАКТПЕНИДОП",  "Начислено пени по актам (несч случ)",       "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРНЕПРИНДОП",   "Не принято к зачету расходов (несч случ)",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРПЕРПЕНИДОП",  "Перечислено пени (несч случ)",              "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРВЗНДОП",      "Доначислено взносов самостоятельно за прошлые годы(травматизм)", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРПЕНИДОП",     "Начислено пени самостоятельно и по рез-там пров-к(травматизм)", "" );
   ПрочитатьКонстантуДиалогаНаДату( "СОЦСТРСПИСПЕНИДОП", "Списано пени (травматизм)",                         "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляНДФЛ( пДатНач, пДатКнц )
   # Вызывает диалог "Подоходный налог". Проверяет наличие констант,
   # при необходимости их создает и сохраняет измененные значения 
   # в справочнике "Константы".
   # Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляПН");
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ПНАЛОГ.СЧЕТА_ДОХОДОВ_ЧЛ";
   ПолныйРаздел = "ПОДОХОДНЫЙ НАЛОГ.СЧЕТА ДОХОДОВ ЧЛ";
   ПрочитатьКонстантуДиалога( "КОД_4800", "Счета доходов частных предпринимателей (по коду 4800)", "60,76-3" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляПФ( пДатНач, пДатКнц )
# Вызывает диалог "Персонифицированный учет в ПФ". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляПФ");
   ЗаГод( пДатКнц );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   ппДиалог.ПДАТНАЧ = пДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ.ПФУЧЕТ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.КОНСТАНТЫ ДЛЯ ПФ УЧЕТА";
   ПрочитатьКонстантуДиалогаЗаГод( "СРЕДЧИСЛМЕС", "Среднесписочная численность по месяцам (для ПФ)", "" );
   ПрочитатьКонстантуДиалога( "ПФНАИМЕНОВАНИЕ",   "Наименование организации в ПФ РФ", "" );
   ПрочитатьКонстантуДиалога( "ПФРЕГНОМ",         "Регистрационный номер в фонде",    "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляЕСН( пДатНач, пДатКнц )
# Вызывает диалог "Параметры для ЕСН". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляЕСН");
   ЗаКвартал( пДатКнц );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ЕСНСРОКУПЛАТЫ", "Число уплаты единого социального налога", "15" );
   ПрочитатьКонстантуДиалога( "ФОМСРЕГНОМ", "Регистрационный номер в Фонде ОМС", "" );

   Раздел = "ЕСН";
   ПолныйРаздел = "ЕДИНЫЙ СОЦИАЛЬНЫЙ НАЛОГ";
   ПрочитатьФлагДиалога( "ОСВОБОЖД_ЕСН",    "Организация имеет льготу по ЕСН (1-Да, 0-Нет)", "0" );
   ПрочитатьФлагДиалога( "РЕГРЕССИВНЫЙЕСН", "Начисление ЕСН по регрессивной ставке (1-Да, 0-Нет)", "0" );
   ПрочитатьКонстантуДиалогаЗаКвартал( "СРЕД_БАЗА_ЕСН", "Налоговая база в среднем на 1 работника, приходящаяся на 1 месяц", "" );
   ПрочитатьКонстантуДиалогаЗаКвартал( "ДОХОД_МАКС",    "Суммы выплат 10 (30)% работников, имеющие наибольщие по размеру доходы", "" );
   ПрочитатьКонстантуДиалога( "СОЦСТРДАТА", "Дата окончания расчетов с ФСС РФ за прошлый год", "01.01.03" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыПоЗарплате()
# Вызывает диалог "Параметры для зарплаты". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ПТАБНОМПРЕДСТАВИТЕЛЯ;

   перем пДиалог = СоздатьДиалог("ПараметрыПоЗарплате");
   
   пДиалог.ДатНач = пДатНач  = ДатНач;
   пДиалог.ДатКнц = пДатКнц  = ДатКнц;
   Установить(пДиалог);
   ДатВыс = ТекДат;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ИСПОЛНИТЕЛЬ", "Фамилия, имя, отчество исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ДОЛЖНОСТЬИСПОЛНИТЕЛЯ", "Должность исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ТАБНОМПРЕДСТАВИТЕЛЯ",  "ТабНомер уполномоченного представителя", "" );

   пСотр = Объект("Сотрудники");
   пСотр.ТабНомер = ПТАБНОМПРЕДСТАВИТЕЛЯ;
   Если( Найти( пСотр, "ТабНомер" ) != 1 )
      пСотр = Объект("Сотрудники");
   Связать( пДиалог.ОПРЕД, пСотр );

   Если( ВыполнитьДиалог(пДиалог) )
   {
      ПТАБНОМПРЕДСТАВИТЕЛЯ = ОПРЕД.ТабНомер;
      .ДатКнц = пДиалог.ДатКнц;
      .ДатНач = пДиалог.ДатНач;
      .ДатВыс = пДиалог.ДатВыс;
   
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   }
   Установить();
}

Функция ПараметрыПоЗарплатеОбщие()
# Вызывает окно "Параметры для зарплаты" в диалоге "Общие сведения об организации". 
# Проверяет наличие констант, при необходимости их создает и сохраняет измененные 
# значения в справочнике "Константы".
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ПТАБНОМПРЕДСТАВИТЕЛЯ;

   перем пДиалог = СоздатьДиалог("ПараметрыПоЗарплатеОбщие");
   
   пДиалог.ДатНач = пДатНач  = ДатНач;
   пДиалог.ДатКнц = пДатКнц  = ДатКнц;
   Установить(пДиалог);
   ДатВыс = ТекДат;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ИСПОЛНИТЕЛЬ", "Фамилия, имя, отчество исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ДОЛЖНОСТЬИСПОЛНИТЕЛЯ", "Должность исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ТАБНОМПРЕДСТАВИТЕЛЯ",  "ТабНомер уполномоченного представителя", "" );

   пСотр = Объект("Сотрудники");
   пСотр.ТабНомер = ПТАБНОМПРЕДСТАВИТЕЛЯ;
   Если( Найти( пСотр, "ТабНомер" ) != 1 )
      пСотр = Объект("Сотрудники");
   Связать( пДиалог.ОПРЕД, пСотр );
   
   Если( ВыполнитьДиалог(пДиалог) )
   {
      ПТАБНОМПРЕДСТАВИТЕЛЯ = ОПРЕД.ТабНомер;
      .ДатКнц = пДиалог.ДатКнц;
      .ДатНач = пДиалог.ДатНач;
      .ДатВыс = пДиалог.ДатВыс;
   
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   }
   Установить();
}

Функция ПараметрыПоСреднесписочнойЧисленности( пДатНач, пДатКнц )
# Вызывает диалог "Средняя численность". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляСреднЧисленности");
   ЗаКвартал( пДатКнц );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   ппДиалог.ПДАТНАЧ = пДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалогаЗаКвартал( "СРСПИСЧИСЛ", "Среднесписочная численность расчетного периода", "" );
   ПрочитатьКонстантуДиалога( "СРСПИСЧИСЛЖ",         "Среднесписочная численность женщин расчетного периода", "");
   ПрочитатьКонстантуДиалога( "СРСПИСЧИСЛИНВ",       "Среднесписочная численность инвалидов расчетного периода", "");
   
   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляДекларацииПФ( пДатНач, пДатКнц )
# Вызывает диалог "Расчет условия применения регрессивной шкалы для ЕВН и УСН". 
# Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляДекларацииПФ");
   ЗаКвартал( .ПДАТКНЦ );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   ппДиалог.ПДАТНАЧ = пДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалогаЗаКвартал( "СРСПИСЧИСЛПФ", "Среднесписочная численность(с учетом ЕВН и УСН) расчетного периода", "" );
   
   Раздел = "ЕСН";
   ПолныйРаздел = "ЕДИНЫЙ СОЦИАЛЬНЫЙ НАЛОГ";
   ПрочитатьКонстантуДиалогаЗаКвартал( "СРЕД_БАЗА_ПФ", "Налоговая база (с учетом ЕВН и УСН) в среднем на 1 работника, приходящаяся на 1 месяц", "" );
   ПрочитатьКонстантуДиалогаЗаКвартал( "ДОХОД_МАКС_ПФ",    "Суммы выплат 10(30)% (с учетом ЕВН и УСН) работников, имеющие наибольщие по размеру доходы", "" );


   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПрочитатьКонстантуДиалогаЗаКвартал( ИмяКонстанты, ПолноеИмя, ПоУмолчанию )
# Запоминает все реквизиты и значения исторической константы за квартал. 
# Используется в диалогах.
# Паратетры: ИмяКонстанты  - краткое имя константы,
#            ПолноеИмя     - полное имя константы
#            ПоУмолчанию   - значение по умолчанию
{
   Перем ДатНач, ДатКнц;
   ЗаКвартал(пДатКнц);
   мКонст[ ИмяКонстанты,    "Раздел" ]       = Раздел;
   Если( ПолныйРаздел )
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолныйРаздел + "." + ПолноеИмя;
   иначе # находится в корне
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолноеИмя;
   Перем М = 1;
   Пока( М <= 3 )
   {
      Перем пДат = Дата( 1, Месяц( ДатНач ) + М - 1, Год( ДатНач ) );
      мКонст[ ИмяКонстанты, "Дата" + М ]     =  пДат;
      мКонст[ ИмяКонстанты, "Значение" + М ] = ["И" + ИмяКонстанты + М] = Константа( пДат, ИмяКонстанты );
      Если( !Есть( [ИмяКонстанты] ) )
         ["И" + Вверх(ИмяКонстанты) + М ]    = ПоУмолчанию;
      М++;
   }
}

Функция ПрочитатьКонстантуДиалогаЗаГод( ИмяКонстанты, ПолноеИмя, ПоУмолчанию )
# Запоминает все реквизиты и значения исторической константы за год. 
# Используется в диалогах.
# Паратетры: ИмяКонстанты  - краткое имя константы,
#            ПолноеИмя     - полное имя константы
#            ПоУмолчанию   - значение по умолчанию
{
   Перем ДатНач, ДатКнц;
   ЗаГод(пДатКнц);
   мКонст[ ИмяКонстанты,    "Раздел" ]       = Раздел;
   Если( ПолныйРаздел )
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолныйРаздел + "." + ПолноеИмя;
   Иначе # находится в корне
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолноеИмя;
   Перем М = 1;
   Пока( М <= 12 )
   {
      Перем пДат = Дата( 1, Месяц( ДатНач ) + М - 1, Год( ДатНач ) );
      мКонст[ ИмяКонстанты, "Дата" + М ]     =  пДат;
      мКонст[ ИмяКонстанты, "Значение" + М ] = ["И" + ИмяКонстанты + М] = Константа( пДат, ИмяКонстанты );
      Если( !Есть( [ИмяКонстанты] ) )
         ["И" + Вверх(ИмяКонстанты) + М ]    = ПоУмолчанию;
      М++;
   }
}

Функция ПрочитатьФлагДиалога( ИмяКонстанты, ПолноеИмя, ПоУмолчанию )
# Запоминает все реквизиты константы в массив. 
# Устанавливает флаги в диалоге в зависимости от значения 
# константы: 1 - установлен, 0 - снят.
# Паратетры: ИмяКонстанты  - краткое имя константы,
#            ПолноеИмя     - полное имя константы
#            ПоУмолчанию   - значение по умолчанию
{
   мКонст[ ИмяКонстанты,    "Раздел" ]       = Раздел;
   Если( ПолныйРаздел )
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолныйРаздел + "." + ПолноеИмя;
   Иначе # находится в корне
      мКонст[ ИмяКонстанты, "ПолныйРаздел" ] = ПолноеИмя;
   мКонст[ ИмяКонстанты,    "Значение" ]     =  Константа( пДатКнц, ИмяКонстанты );
   Если( мКонст[ ИмяКонстанты, "Значение" ] == "1" ) # флаг устанавливается
      ["Ф" + ИмяКонстанты] = "*";
   Иначе # флаг снимается
      ["Ф" + ИмяКонстанты] = " ";
   Если( !Есть( [ИмяКонстанты] ) и ПоУмолчанию == "1" )
      ["Ф" + Вверх(ИмяКонстанты)] = "*";
   Если( !Есть( [ИмяКонстанты] ) и ПоУмолчанию == "0" )
      ["Ф" + Вверх(ИмяКонстанты)] = " ";
}

Функция ПараметрыДляСтандартныхОтчетов()
# Вызывает диалог "Параметры для стандартных отчетов". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ПТАБНОМПРЕДСТАВИТЕЛЯ;

   перем пДиалог = СоздатьДиалог("ПараметрыДляСтандартныхОтчетов");
   
   пДиалог.ДатНач = пДатНач  = ДатНач;
   пДиалог.ДатКнц = пДатКнц  = ДатКнц;
   Установить(пДиалог);
   ДатВыс = ТекДат;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ИСПОЛНИТЕЛЬ", "Фамилия, имя, отчество исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ДОЛЖНОСТЬИСПОЛНИТЕЛЯ", "Должность исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ТАБНОМПРЕДСТАВИТЕЛЯ",  "ТабНомер уполномоченного представителя", "" );

   пСотр = Объект("Сотрудники");
   пСотр.ТабНомер = ПТАБНОМПРЕДСТАВИТЕЛЯ;
   Если( Найти( пСотр, "ТабНомер" ) != 1 )
      пСотр = Объект("Сотрудники");
   Связать( пДиалог.ОПРЕД, пСотр );

   Если( ВыполнитьДиалог(пДиалог) )
   {
      ПТАБНОМПРЕДСТАВИТЕЛЯ = ОПРЕД.ТабНомер;
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
      .ДатНач = пДиалог.ДатНач;
      .ДатКнц = пДиалог.ДатКнц;
      .ДатВыс = пДиалог.ДатВыс;
   }
   Установить();
}

Функция ПараметрыДляСтандартныхОтчетовОбщие()
# Вызывает окно "Параметры для стандартных отчетов" в диалоге "Сведения об организации". 
# Проверяет наличие констант, при необходимости их создает и сохраняет измененные 
# значения в справочнике "Константы".
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ПТАБНОМПРЕДСТАВИТЕЛЯ;

   перем пДиалог = СоздатьДиалог("ПараметрыДляСтандартныхОтчетовОбщие");
   
   пДиалог.ДатНач = пДатНач  = ДатНач;
   пДиалог.ДатКнц = пДатКнц  = ДатКнц;
   Установить(пДиалог);
   ДатВыс = ТекДат;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ИСПОЛНИТЕЛЬ", "Фамилия, имя, отчество исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ДОЛЖНОСТЬИСПОЛНИТЕЛЯ", "Должность исполнителя", "" );
   ПрочитатьКонстантуДиалога( "ТАБНОМПРЕДСТАВИТЕЛЯ",  "ТабНомер уполномоченного представителя", "" );

   пСотр = Объект("Сотрудники");
   пСотр.ТабНомер = ПТАБНОМПРЕДСТАВИТЕЛЯ;
   Если( Найти( пСотр, "ТабНомер" ) != 1 )
      пСотр = Объект("Сотрудники");
   Связать( пДиалог.ОПРЕД, пСотр );

   Если( ВыполнитьДиалог(пДиалог) )
   {
      ПТАБНОМПРЕДСТАВИТЕЛЯ = ОПРЕД.ТабНомер;
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   }

   Установить();
}

Функция ПараметрыСвидетельства( пДатНач, пДатКнц )
# Вызывает диалог "Реквизиты свидетельства о постановке на учет". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыСвидетельства");
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "ОГРН",       "Основной государственный регистрационный номер (ОГРН)", "" );
   ПрочитатьКонстантуДиалога( "СВ_НОМЕР",   "Серия и номер свидетельства о постановке на учет (через запятую)", "" );
   ПрочитатьКонстантуДиалога( "СВ_КОГДА",   "Дата выдачи свидетельства о постановке на учет",       "" );
   ПрочитатьКонстантуДиалога( "СВ_КЕМ",     "Кем выдано свидетельство о постановке на учет",        "" );
   ПрочитатьКонстантуДиалога( "СВ_КЕМ_КОД", "Код ГНИ, выдавшей свидетельство о постановке на учет", "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляНДС( пДатНач, пДатКнц )
# Вызывает диалог "Параметры для НДС". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляНДС");

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "УЧПОЛИТИКА";
   ПолныйРаздел = "УЧЕТНАЯ ПОЛИТИКА ОРГАНИЗАЦИИ";
   ПрочитатьФлагДиалога( "ПООПЛАТЕ",     "Метод определения выручки для НДС (1-по оплате,ПУСТО-по отгрузке)", "1" );
   ПрочитатьФлагДиалога( "ОСВОБОЖД_НДС", "Освобождена от уплаты НДС (1-Да, ПУСТО-Нет)", "" );

   Раздел       = "СЧЕТА.СЧ90";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(90) РЕАЛИЗАЦИЯ ПРОДУКЦИИ, РАБОТ, УСЛУГ";
   ПрочитатьКонстантуДиалога( "90_1ОПЛАТА",   "Выручка от реализации по оплате",   "190-1" );
   ПрочитатьКонстантуДиалога( "90_1ОТГРУЗКА", "Выручка от реализации по отгрузке", "90-1" );
   ПрочитатьКонстантуДиалога( "76АВАНСНДС",   "Расчеты по НДС с авансов",          "76-АВ" );

   Раздел       = "СЧЕТА.СЧ91";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(91) ПРОЧИЕ ДОХОДЫ И РАСХОДЫ";
   ПрочитатьКонстантуДиалога( "91_1ОПЛАТА",   "Выручка от прочей реализации по оплате",   "191-1" );
   ПрочитатьКонстантуДиалога( "91_1ОТГРУЗКА", "Выручка от прочей реализации по отгрузке", "91-1" );

   Раздел       = "СЧЕТА.СЧ62";
   ПОЛНЫЙРАЗДЕЛ = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(62) РАСЧЕТЫ С ПОКУПАТЕЛЯМИ И ЗАКАЗЧИКАМИ";
   ПрочитатьКонстантуДиалога( "62АВАНС", "Расчеты по авансам полученным", "62-2" );

   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68НДС", "Расчеты с бюджетом по НДС", "68-НДС" );

   Раздел       = "СЧЕТА.СЧ19";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(19) НАЛОГ НА ДОБАВЛЕННУЮ СТОИМОСТЬ";
   ПрочитатьКонстантуДиалога( "19НДС",        "Налог на добавленную стоимость",     "19" );
   ПрочитатьКонстантуДиалога( "19НДСКАПВЛ",   "НДС при осуществлении кап вложений", "19-ОС" );
   ПрочитатьКонстантуДиалога( "19НДСМАТЕР",   "НДС по приобретенным материалам",    "19-МАТ" );
   ПрочитатьКонстантуДиалога( "19НДСНМА",     "НДС по приобретенным НМА",           "19-НМА" );
   ПрочитатьКонстантуДиалога( "19НДСТАМОЖ10", "НДС, уплач на таможне за имп товары со ставкой НДС 10", "19-8" );
   ПрочитатьКонстантуДиалога( "19НДСТАМОЖ20", "НДС, уплач на таможне за имп товары со ставкой НДС 20", "19-7" );
   ПрочитатьКонстантуДиалога( "19НДСТОВАР",   "НДС по приобретенным товарам",       "19-ОПТ" );
   ПрочитатьКонстантуДиалога( "19НДСТОВАР10", "НДС 10 по приобретенным товарам",    "19-ОПТ-10" );
   ПрочитатьКонстантуДиалога( "19НДСТОВАР20", "НДС 20 по приобретенным товарам",    "19-ОПТ-20" );
   ПрочитатьКонстантуДиалога( "19НДСУСЛУГИ",  "НДС по услугам",                     "19-УСЛ" );
   ПрочитатьКонстантуДиалога( "19НДСУСЛ10",   "НДС по услугам 10%",                 "19-УСЛ-10" );
   ПрочитатьКонстантуДиалога( "19НДСУСЛ20",   "НДС по услугам 20%",                 "19-УСЛ-20" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляНСП( пДатНач, пДатКнц )
# Вызывает диалог "Параметры для НСП". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляНСП");
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "УЧПОЛИТИКА";
   ПолныйРаздел = "УЧЕТНАЯ ПОЛИТИКА ОРГАНИЗАЦИИ";
   ПрочитатьКонстантуДиалогаНаДату( "НСП_ПОЧТ", "Ставка НСП с почтового сбора",    "5" );
   
   Раздел       = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалогаНаДату( "НАЛОГ2", "Ставка НСП", "5" );

   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68НСП", "Расчеты по налогу с продаж", "68-НСП" );

   Раздел       = "СЧЕТА.СЧ76";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(76) РАСЧЕТЫ С РАЗНЫМИ ДЕБИТОРАМИ И КРЕДИТОРАМИ";
   ПрочитатьКонстантуДиалога( "76НСП", "НСП, отложенный к уплате в бюджет", "76-НСП" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляИмущества( пДатНач, пДатКнц )
# Вызывает диалог "Параметры для налога на имущество". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляИмущества");
   ЗаКвартал( пДатКнц );
   СНачГода( ДатНач );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ.НАЛИМУЩ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.РАСЧЕТ НАЛОГА НА ИМУЩЕСТВО";
   ПрочитатьКонстантуДиалогаНаДату( "ИМУЩСРСТОИМ",   "Средняя стоимость имущества для расчета налога", "" );
   ПрочитатьКонстантуДиалогаНаДату( "НАЛИМУЩСТАВКА", "Ставка налога на имущество", "1.5" );

   Раздел       = "СЧЕТА.СЧ01";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(01) ОСНОВНЫЕ СРЕДСТВА";
   ПрочитатьКонстантуДиалога( "01ВНБЛАГ",    "Объекты внешнего благоустройства", "01-12" );
   ПрочитатьКонстантуДиалога( "01ЖИЛФОНД",   "Жилищный фонд",                "01-11" );
   ПрочитатьКонстантуДиалога( "01ЗДАНИЯ",    "Здания",                       "01-1" );
   ПрочитатьКонстантуДиалога( "01ИНВЕНТ",    "Производственный и хозяйственный инвентарь", "01-7" );
   ПрочитатьКонстантуДиалога( "01ИНСТР",     "Инструмент",                   "01-6" );
   ПрочитатьКонстантуДиалога( "01МАШОБОР",   "Машины и оборудование",        "01-4" );
   ПрочитатьКонстантуДиалога( "01НАСАЖД",    "Многолетние насаждения",       "01-9" );
   ПрочитатьКонстантуДиалога( "01ПРИРПОЛЬЗ", "Объекты природопользования",   "01-13" );
   ПрочитатьКонстантуДиалога( "01РАБСКОТ",   "Рабочий скот",                 "01-8" );
   ПрочитатьКонстантуДиалога( "01СООР",      "Сооружения",                   "01-2" );
   ПрочитатьКонстантуДиалога( "01ТРАНСП",    "Транспортные средства",        "01-5" );
   ПрочитатьКонстантуДиалога( "01ПРОЧЕЕ",    "Другие виды основных средств", "01-10" );

   Раздел       = "СЧЕТА.СЧ02";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(02) АМОРТИЗАЦИЯ ОС";
   ПрочитатьКонстантуДиалога( "02ОС", "Амортизация ОС, учитываемых на 01 счете", "02-1" );
   
   Раздел       = "СЧЕТА.СЧ08";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(08) КАПИТИАЛЬНЫЕ ВЛОЖЕНИЯ";
   ПрочитатьКонстантуДиалога( "08ПОКНМА", "Приобретение нематериальных активов",     "08-5" );
   ПрочитатьКонстантуДиалога( "08ПОКОС",  "Приобретение объектов основных средств",  "08-4" );
   ПрочитатьКонстантуДиалога( "08СТРОС",  "Строительство объектов основных средств", "08-3" );
   
   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68ИМУЩ", "Расчеты по налогу на имущество предприятий", "68-7" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляКомандировок()
# Вызывает диалог "Командировки". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем пДиалог = СоздатьДиалог("ПараметрыДляКомандировок");
   
   пДиалог.ПДАТНАЧ = пДатНач = ДатНач;
   пДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;
   пДиалог.ПДАТСОСТ = ТекДат;
   Установить(пДиалог);
   ОргПлат = Лицо0.Название;
   'Срок командировки' = 1;
   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ.КОМАНДИРОВКИ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.КОМАНДИРОВКИ";
   ПрочитатьКонстантуДиалога( "КОМ_ОСНОВАНИЕ", "Основание для отправления в командировку", "" );
   ПрочитатьКонстантуДиалога( "КОМ_ПУНКТ",     "Место назначения (страна, город, организация)", "" );
   ПрочитатьКонстантуДиалога( "КОМ_СРЕДСТВА",  "Командировка за счет средств", "" );
   ПрочитатьКонстантуДиалога( "КОМ_ЦЕЛЬ",      "Цель командировки", "" );
   Если( ВыполнитьДиалог(пДиалог) )
   {
      .'Срок командировки' = 'пДиалог.Срок командировки';
      .пДатСост = пДиалог.ПДАТСОСТ;
      .ОргПлат  =  пДиалог.ОргПлат;
      .ДатНач   = пДиалог.ПДАТНАЧ; 
      .ДатКнц   = пДиалог.ПДАТКНЦ; 
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   }
   Установить();
}

Функция ПараметрыДляПрибыли( пДатНач, пДатКнц )
# Вызывает диалог "Налог на прибыль". Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляПрибыли");
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ПРИБЫЛЬ";
   ПолныйРаздел = "НАЛОГ НА ПРИБЫЛЬ";
   ПрочитатьКонстантуДиалогаНаДату( "Н_КОЭФ_РЕАЛ_ПРВО", "Доля реализованной собственной продукции за отчетный период", "1" );
   ПрочитатьКонстантуДиалогаНаДату( "Н_КОЭФ_РЕАЛ_УСЛГ", "Доля завершенных заказов за отчетный период", "1" );

   Раздел       = "ОТЧЕТЫ.НАЛПРИБ02";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.НАЛОГ НА ПРИБЫЛЬ 2002 Г";
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ПРЕД", "Сумма исчисленного налога за предыдущий отчетный период", "" );

   Раздел       = "ОТЧЕТЫ.НАЛПРИБ02.НАЛПРИБ02ОСН";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.НАЛОГ НА ПРИБЫЛЬ 2002 Г.ОСНОВНЫЕ ПОКАЗАТЕЛИ";
   ПрочитатьФлагДиалога( "ПРИБ_АВАНС_ФАКТ_ПРИБ",    "Ежемесячные авансы исходя из фактической прибыли (1-Да, 0-Нет)", "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ЗПЛ_АУП",       "Расходы на оплату труда АУП (из расчетной ведомости)",           "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ЛЬГ_МАЛ_ПРЕД",  "Прибыль малых предприятий действующих 1ый или 2ой год",          "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ЛЬГ_НОВ_ПРВО",  "Прибыль от вновь созданного производства до вступления в силу гл 25 НК",    "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ЛЬГ_СОЦ_ПРОГР", "Прибыль до окончания осущ-ния целевых соц-экономич проектов жил строит-ва", "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_СТАВКА_ГОР",    "Ставка налога на прибыль в местный бюджет",         "2" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_СТАВКА_ОБЛ",    "Ставка налога на прибыль в бюджет субъекта РФ",     "14.5" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_СТАВКА_ФЕД",    "Ставка налога на прибыль в федеральный бюджет",     "7.5" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_СТАВКА",        "Ставка налога на прибыль всего",     "24" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ФАКТАВАНС_ГОР", "Начислено авансовых платежей в местный бюджет",     "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ФАКТАВАНС_ОБЛ", "Начислено авансовых платежей в бюджет субъекта РФ", "" );
   ПрочитатьКонстантуДиалогаНаДату( "ПРИБ_ФАКТАВАНС_ФЕД", "Начислено авансовых платежей в федеральный бюджет", "" );

   Раздел       = "ОТЧЕТЫ.НАЛПРИБ02.НАЛПРИБ02ПЕР";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.НАЛОГ НА ПРИБЫЛЬ 2002 Г.РАСЧЕТ НАЛОГА ПЕРЕХОДНОГО ПЕРИОДА";
   ПрочитатьКонстантуДиалога( "ПРИБ_2001",  "Сумма исчисленного налога за 2001 год",           "" );
   ПрочитатьКонстантуДиалога( "ПРИБ_ПЕРЕХ", "Сумма исчисленного налога с переходного периода", "" );

   Раздел       = "ОТЧЕТЫ.НАЛПРИБ02.НАЛПРИБ02УБЫТ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.НАЛОГ НА ПРИБЫЛЬ 2002 Г.ОСТАТКИ ПРОШЛЫХ УБЫТКОВ НА НАЧАЛО";
   ПрочитатьКонстантуДиалога( "ПРИБ_УБЫТ_2001", "Остаток неперенесенного убытка до 2001 года, на начало периода", "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляПрибылиПечатаемыеЛисты( пДатНач, пДатКнц )
# Вызывает одноименный диалог. Проверяет наличие констант,
# при необходимости их создает и сохраняет измененные значения 
# в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляПрибылиПечатаемыеЛисты");

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ.НАЛПРИБ02";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.НАЛОГ НА ПРИБЫЛЬ 2002 Г";
   ПрочитатьКонстантуДиалога( "ПРИБ_ЛИСТЫ", "Печатаемые специальные листы декларации (указыв через диалог)", "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляМилиции( пДатНач, пДатКнц )
# Вызывает диалог "Налог на содержание муниципальной милиции". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляМилиции");
   ЗаКвартал( пДатКнц );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   ппДиалог.ПДАТНАЧ = пДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалогаЗаКвартал( "СРСПИСЧИСЛ", "Среднесписочная численность расчетного периода", "" );
   
   Раздел       = "ОТЧЕТЫ.МИЛИЦИЯ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.СБОР НА СОДЕРЖАНИЕ МИЛИЦИИ";
   ПрочитатьКонстантуДиалогаНаДату( "МИЛИЦЛЬГОТА", "Льгота по налогу на милицию (руб)",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "МИЛИЦЛЬГОТА_МЕСТН", "Льгота по налогу на милицию (руб) - по решению местного самоуправления",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "МИЛИЦЛЬГОТА_ПУНКТ", "Льгота по налогу в соотв. с п.Положения",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "МИЛИЦЛЬГОТА_ПУНКТМЕСТН", "Льгота по налогу в соотв. с п.решения органов местн.самоуправления",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "МИЛИЦСТАВКА", "Ставка сбора на содержание милиции", "3" );
   ПрочитатьКонстантуДиалогаНаДату( "НАЛ_МРОТ",    "Мин. размер оплаты труда для расчета налогов", "100.00" );

   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68МИЛИЦИЯ", "Расчеты по налогу на милицию", "68-6" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   Установить();
}

Функция ПараметрыДляРекламы( пДатНач, пДатКнц )
# Вызывает диалог "Налог на рекламу". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляРекламы");
   ЗаКвартал( пДатКнц );
   ппДиалог.ПДАТНАЧ = пДатНач = ДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   ппДиалог.ПДАТНАЧ = пДатНач; 
   ппДиалог.ПДАТКНЦ = пДатКнц;

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ.РЕКЛАМА";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.РАСЧЕТ НАЛОГА НА РЕКЛАМУ";
   ПрочитатьКонстантуДиалогаНаДату( "РЕКЛСТАВКА", "Ставка налога на рекламу",  "5" );
   ПрочитатьКонстантуДиалогаНаДату( "РЕКЛЛЬГОТА", "Льгота по налогу на рекламу (руб)",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "РЕКЛЛЬГОТА_МЕСТН", "Льгота по налогу на рекламу (руб) - по решению местного самоуправления",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "РЕКЛЛЬГОТА_ПУНКТ", "Льгота по налогу в соотв. с пунктом Положения",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "РЕКЛЛЬГОТА_ПУНКТМЕСТН", "Льгота по налогу в соотв. с пунктом решения органов местн.самоуправления",  "" );
   ПрочитатьКонстантуДиалогаНаДату( "РЕКЛЗАТРАТ", "Сумма затрат на рекламму за квартал с НДС и НСП",  "" );

   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68РЕКЛАМА", "Расчеты по налогу на рекламу", "68-10" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   Установить();
}

Функция ПараметрыДляУСНиЕНВД( пДатНач, пДатКнц )
# Вызывает диалог "Единый налог, взымаемый при УСН". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел, ДатНач, ДатКнц;

   ЗаМесяц( пДатКнц );
   перем ппДиалог = СоздатьДиалог("ПараметрыДляУСНиЕНВД");
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ОТЧЕТЫ.УСН";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.УПРОЩЕННАЯ СИСТЕМА НАЛОГООБЛОЖЕНИЯ";
   ПрочитатьКонстантуДиалогаНаДату( "УБЫТОК_ПРЕД_УСН", "Убыток предыдущего периода, уменьшающий налоговую базу", "" );
   ПрочитатьКонстантуДиалогаНаДату( "УПЛ_МИН_УСН", "Разница между уплаченным мин налогом и исчисленным налогом за предыдущий налог период", "" );

   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "68УСН", "Расчеты по УСН", "68-21" );

   ПрочитатьКонстантуДиалога( "СЧ68ЕНВД", "Расчеты по ЕНВД",  "68-ЕНВД" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );
   Установить();
}

Функция ПараметрыДляБаланса1( пДатНач, пДатКнц )
# Вызывает диалог "Бухгалтерский баланс". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляБаланса1");
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "СЧЕТА.СЧ02";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(02) АМОРТИЗАЦИЯ ОС";
   ПрочитатьКонстантуДиалога( "02ИМУЩ", "Амортизация имущества, учитываемого на 03 счете", "02-2" );
   ПрочитатьКонстантуДиалога( "02ОС",   "Амортизация ОС, учитываемых на 01 счете",         "02-1" );
   
   Раздел       = "СЧЕТА.СЧ03";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(03) ДОХОДНЫЕ ВЛОЖЕНИЯ В МАТЕРИАЛЬНЫЕ ЦЕННОСТИ";
   ПрочитатьКонстантуДиалога( "СЧ03ЛИЗИНГ", "Имущество для передачи в лизинг",               "03" );
   ПрочитатьКонстантуДиалога( "СЧ03ПРОКАТ", "Имущество предоставляемое по договору проката", "" );

   Раздел       = "СЧЕТА.СЧ04";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(04) НЕМАТЕРИАЛЬНЫЕ АКТИВЫ";
   ПрочитатьКонстантуДиалога( "ДЕЛРЕП", "Деловая репутация организации(код раздела в спр Основные средства)", "20004" );
   ПрочитатьКонстантуДиалога( "ОРГРАС", "Организационные расходы(код раздела в спр Основные средства)",       "20003" );
   
   Раздел       = "СЧЕТА.СЧ58";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(58) КРАТКОСРОЧНЫЕ ФИНАНСОВЫЕ ВЛОЖЕНИЯ";
   ПрочитатьКонстантуДиалога( "СЧ58ДОЛГЗАЙМЫ",  "Долгосрочные предоставленные займы",  "58-3-1" );
   ПрочитатьКонстантуДиалога( "СЧ58ИНВДОЧЕР",   "Паи и акции (в дочерние общества)",   "58-1-1" );
   ПрочитатьКонстантуДиалога( "СЧ58ИНВДРУГИЕ",  "Паи и акции (в другие организации)",  "58-1-3" );
   ПрочитатьКонстантуДиалога( "СЧ58ИНВЗАВИСИМ", "Паи и акции (в зависимые общества)",  "58-1-2" );
   ПрочитатьКонстантуДиалога( "СЧ58КРАТКЗАЙМЫ", "Краткосрочные предоставленные займы", "58-3-2" );
   ПрочитатьКонстантуДиалога( "СЧ58КРАТКТОВ",   "Краткосрочные вложения по договору простого товарищества", "58-4-2" );
   ПрочитатьКонстантуДиалога( "СЧ58КРАТКЦБ",    "Краткосрочные долговые ЦБ",           "58-2-2" );

   Раздел       = "СЧЕТА.СЧ60";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(60) РАСЧЕТЫ С ПОСТАВЩИКАМИ И ПОДРЯДЧИКАМИ";
   ПрочитатьКонстантуДиалога( "СЧ60АВАНС",       "Авансы выданные", "60-2" );
   ПрочитатьКонстантуДиалога( "СЧ60ВЕКСЕЛЯ",     "Расчеты с поставщиками по векселям выданным", "60-3" );
   ПрочитатьКонстантуДиалога( "СЧ60НЕЗАВСТРОИТ", "Незавершенное строительство", "" );

   Раздел       = "СЧЕТА.СЧ62";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(62) РАСЧЕТЫ С ПОКУПАТЕЛЯМИ И ЗАКАЗЧИКАМИ";
   ПрочитатьКонстантуДиалога( "СЧ62АВАНС",   "Авансы полученные", "62-2" );
   ПрочитатьКонстантуДиалога( "СЧ62ВЕКСЕЛЯ", "Расчеты с покупателями по векселям полученным", "62-3" );

   Раздел       = "СЧЕТА.СЧ76";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(76) РАСЧЕТЫ С РАЗНЫМИ ДЕБИТОРАМИ И КРЕДИТОРАМИ";
   ПрочитатьКонстантуДиалога( "76ПРОЧИЕ",   "Расчеты с прочими покупателями и поставщиками", "" );

   Раздел       = "СЧЕТА.СЧ82";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(82) РЕЗЕРВНЫЙ КАПИТАЛ";
   ПрочитатьКонстантуДиалога( "СЧ82ФОНДЗАКОН", "Резервы, образованные в соответствии с зак-вом", "82-1" );

   Раздел       = "СЧЕТА.СЧ83";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(83) ДОБАВОЧНЫЙ КАПИТАЛ";
   ПрочитатьКонстантуДиалога( "СЧ83ПЕРЕОЦЕНКА", "Прирост стоимости имущества по переоценке", "83-1" );

   Раздел       = "СЧЕТА.СЧ01";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(01) ОСНОВНЫЕ СРЕДСТВА";
   ПрочитатьКонстантуДиалога( "01ПРИРПОЛЬЗ", "Объекты природопользования", "01-13" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляБаланса2( пДатНач, пДатКнц )
# Вызывает диалог "Отчет о прибылях и убытках". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляБаланса2");
   ппДиалог.ПДАТКНЦ = пДатКнц = ДатКнц;
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "СЧЕТА.СЧ68";
   ПолныйРаздел = "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ";
   ПрочитатьКонстантуДиалога( "СЧ68НАЛПРИБ", "Расчеты по налогу на прибыль", "68-5" );

   Раздел       = "ОТЧЕТЫ.ДИВИДЕНДЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.ДИВИДЕНДЫ";
   ПрочитатьКонстантуДиалогаНаДату( "ДИВОБЫЧОТЧ", "Дивиденды, приходящиеся на одну обычную акцию", "" );
   ПрочитатьКонстантуДиалогаНаДату( "ДИВПРИВОТЧ", "Дивиденды, приходящиеся на одну привилегированную акцию", "" );
   ПрочитатьКонстантуДиалогаНаДату( "ДИВОБЫЧСЛЕД","Дивиденды, приходящиеся в след году на одну обычную акцию", "" );
   ПрочитатьКонстантуДиалогаНаДату( "ДИВПРИВСЛЕД","Дивиденды, приходящиеся в след году на одну привилегированную акцию", "" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляНалУчета( пДатНач, пДатКнц )
# Вызывает диалог "Налоговый учет". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляНалУчета");
   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "ПРИБЫЛЬ";
   ПолныйРаздел = "НАЛОГ НА ПРИБЫЛЬ";
   ПрочитатьКонстантуДиалога( "СЧ_НЕПР", "Счета затрат по НЕПР (не связанные с производством)", "44-1,91-2" );
   ПрочитатьКонстантуДиалога( "СЧ_УСЛГ", "Счета затрат по УСЛГ (связанные с оказанием услуг)", "" );
   ПрочитатьКонстантуДиалога( "СЧ_ПРВО", "Счета затрат по ПРВО (связанные с производством)", "" );
   ПрочитатьКонстантуДиалога( "СЧ_ВМЕН", "Счета затрат по ВМЕН (вмененка)",        "44-2,97-2-2" );
   ПрочитатьКонстантуДиалога( "СЧ_РАСП", "Счета распределяемые между ВМЕН и НЕПР", "44-3,26" );
   Раздел       = "ОТЧЕТЫ.СОЦСТРАХ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.ВЕДОМОСТЬ ПО ФОНДУ СОЦИАЛЬНОГО СТРАХОВАНИЯ";
   ПрочитатьФлагДиалога( "ФСС_ЕВН", "Оплата больничных за счет ФСС (для ЕВН и УСН)",   "" );
   ПрочитатьКонстантуДиалога( "СТАВКА_ФСС_ЕВН", "Ставка взноса в ФСС (для ЕВН и УСН)", "0" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

Функция ПараметрыДляУчетнойПолитики( пДатНач, пДатКнц )
# Вызывает диалог "Учетная политика". 
# Проверяет наличие констант, при необходимости их создает и сохраняет 
# измененные значения  в справочнике "Константы".
# Параметры: пДатНач, пДатКнц - диапазон дат, на которые берутся значения констант. 
{
   Объект мКонст;
   перем Раздел, ПолныйРаздел;

   перем ппДиалог = СоздатьДиалог("ПараметрыДляУчетнойПолитики");

   Установить(ппДиалог);

   # запоминаем реквизиты всех используемых констант в массив
   Раздел       = "УЧПОЛИТИКА";
   ПолныйРаздел = "УЧЕТНАЯ ПОЛИТИКА ОРГАНИЗАЦИИ";
   ПрочитатьФлагДиалога( "ПООПЛАТЕ",      "Метод определения выручки для НДС (1-по оплате,ПУСТО-по отгрузке)",   "1" );
   ПрочитатьФлагДиалога( "ОСВОБОЖД_НДС",  "Освобождена от уплаты НДС (1-Да, ПУСТО-Нет)", "" );
   ПрочитатьФлагДиалога( "ПОМЕСЯЦАМ",     "Порядок уплаты налога на прибыль (1-помесячно, ПУСТО-поквартально)",  "" );
   ПрочитатьФлагДиалога( "НДС_АВАНС_КАЖД","Начислять НДС с авансов по каждому авансу (1/0)",  "1" );
   ПрочитатьФлагДиалога( "ПОСЧЕТАМ",      "Метод оплаты документов ( 1-по счетам, ПУСТО-по накладным/фактурам)", "1" );
   ПрочитатьКонстантуДиалога( "СРОК",     "Установленный срок получения ЗП", "" );
   ПрочитатьКонстантуДиалога( "НСП_ПОЧТ", "Ставка НСП с почтового сбора",    "5" );
   ПрочитатьКонстантуДиалога( "ВИД_НАЛОГ", "Вид налогового учета", "Налог на прибыль" );
   ПрочитатьКонстантуДиалога( "ТАРИФ_ПОЧТ", "Тарифы почтовых переводов (Обычные,Ускоренные)", "Обычные" );
   ПрочитатьКонстантуДиалога( "МЕТКИ_СРЕДНЕЕ", "Метки табеля, исключаемые из расчета среднего", "К+Г+Л+З+И+М" );


   Раздел       = "ЕСН";
   ПолныйРаздел = "ЕДИНЫЙ СОЦИАЛЬНЫЙ НАЛОГ";
   ПрочитатьФлагДиалога( "ОСВОБОЖД_ЕСН",    "Организация имеет льготу по ЕСН (1-Да, 0-Нет)",       "0" );
   ПрочитатьФлагДиалога( "РЕГРЕССИВНЫЙЕСН", "Начисление ЕСН по регрессивной ставке (1-Да, 0-Нет)", "0" );
   ПрочитатьФлагДиалога( "ЕСН_ОТ_ДОЛИ_ЕНВД","Начисление ЕСН на распред счета (26,44-3) от доли выручки без ЕНВД (1-Да,0-Нет)", "0" );

   Раздел       = "ОТЧЕТЫ.СОЦСТРАХ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.ВЕДОМОСТЬ ПО ФОНДУ СОЦИАЛЬНОГО СТРАХОВАНИЯ";
   ПрочитатьКонстантуДиалога( "СОЦСТРСТАВКАДОП", "Ставка сбора от несчастных случаев (%)", "" );
   
   Раздел       = "ОТЧЕТЫ.УСН";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ.УПРОЩЕННАЯ СИСТЕМА НАЛОГООБЛОЖЕНИЯ";
   ПрочитатьКонстантуДиалога( "ДАТА_УСН", "Дата перехода на упрощенный учет (01/01)", "" );

   Раздел       = "ОТЧЕТЫ";
   ПолныйРаздел = "ПОДГОТОВКА ОТЧЕТНОСТИ";
   ПрочитатьКонстантуДиалога( "НАЛОГ2", "Ставка НСП", "5" );

   Если( ВыполнитьДиалог(ппДиалог) )
      # запоминаем новые значения констант
      ДляВсех( Элементов( мКонст, пИмяКонстанты ) )
         ЗапомнитьКонстантуДиалога( пИмяКонстанты );

   Установить();
}

функция Бухгалтер()
# Возвращает сокращенное имя главного бухгалтера. 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМБУХГАЛТЕРА.
{
   перем пБУХГАЛТЕР;
   Если( !Есть( ТАБНОМБУХГАЛТЕРА ) )
      ПараметрыОбщие( ДатНач, ДатКнц );

   пБУХГАЛТЕР = "";
   Если( ТАБНОМБУХГАЛТЕРА )
   {
      пБух = НайтиЛицо( ТАБНОМБУХГАЛТЕРА, "Сотрудники" );
      Если( Есть( пБух ) == 1 )
         пБУХГАЛТЕР = пБух.Название; # ФИО
      Иначе
         пБУХГАЛТЕР = ""; # ФИО
   }
   Вернуть(пБУХГАЛТЕР);
}

функция Руководитель()
# Возвращает сокращенное имя руководителя предприятия. 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМРУКОВОДИТЕЛЯ.
{
   перем пРУКОВОДИТЕЛЬ;
   Если( !Есть( ТАБНОМРУКОВОДИТЕЛЯ ) )
      ПараметрыОбщие( ДатНач, ДатКнц );

   пРУКОВОДИТЕЛЬ = "";
   Если( ТАБНОМРУКОВОДИТЕЛЯ )
   {
      пРук = НайтиЛицо( ТАБНОМРУКОВОДИТЕЛЯ, "Сотрудники" );
      Если( Есть( пРук ) == 1 )
         пРУКОВОДИТЕЛЬ = пРук.Название; # ФИО
      Иначе
         пРУКОВОДИТЕЛЬ = "";
   }
   Вернуть(пРУКОВОДИТЕЛЬ);
}

функция ФИОРуководителя()
# Возвращает полное имя руководителя предприятия. 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМРУКОВОДИТЕЛЯ.
{
   перем пФИОРУКОВОДИТЕЛЯ;
   Если( !Есть( ТАБНОМРУКОВОДИТЕЛЯ ) )
      ПараметрыОбщие( ДатНач, ДатКнц );

   пФИОРУКОВОДИТЕЛЯ = "";
   Если( ТАБНОМРУКОВОДИТЕЛЯ )
   {
      пРук = НайтиЛицо( ТАБНОМРУКОВОДИТЕЛЯ, "Сотрудники" );
      Если( Есть( пРук ) == 1 )
         пФИОРУКОВОДИТЕЛЯ  = пРук.ФИО; # ФИО
      Иначе
         пФИОРУКОВОДИТЕЛЯ  = "";
   }
   Вернуть(пФИОРУКОВОДИТЕЛЯ);
}

функция ФИОБухгалтера()
# Возвращает полное имя главного бухгалтера. 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМБУХГАЛТЕРА.
{
   перем пФИОБУХГАЛТЕРА;
   Если( !Есть( ТАБНОМБУХГАЛТЕРА ) )
      ПараметрыОбщие( ДатНач, ДатКнц );

   пФИОБУХГАЛТЕРА = "";
   Если( ТАБНОМБУХГАЛТЕРА )
   {
      пБух = НайтиЛицо( ТАБНОМБУХГАЛТЕРА, "Сотрудники" );
      Если( Есть( пБух ) == 1 ) 
         пФИОБУХГАЛТЕРА = пБух.ФИО; # ФИО
      Иначе
         пФИОБУХГАЛТЕРА = "";
   }
   Вернуть(пФИОБУХГАЛТЕРА);
}

функция ИННРуководителя()
# Возвращает ИНН имя руководителя предприятия. 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМРУКОВОДИТЕЛЯ.
{
   перем пИННРУКОВОДИТЕЛЯ;
   Если( !Есть( ТАБНОМРУКОВОДИТЕЛЯ ) )
      ПараметрыОбщие( ДатНач, ДатКнц );
    
   пИННРУКОВОДИТЕЛЯ = "";
   Если( ТАБНОМРУКОВОДИТЕЛЯ )
   {
      пРук = НайтиЛицо( ТАБНОМРУКОВОДИТЕЛЯ, "Сотрудники" );
      Если( Есть( пРук ) == 1 )
         пИННРУКОВОДИТЕЛЯ  = пРук.ИНН; # ИНН
      Иначе
         пИННРУКОВОДИТЕЛЯ  = "";
   } 
   Вернуть(пИННРУКОВОДИТЕЛЯ);
}

функция ИННБухгалтера()
# Возвращает ИНН главного бухгалтера. 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМБУХГАЛТЕРА.
{
   перем пИННБУХГАЛТЕРА;
   Если( !Есть( ТАБНОМБУХГАЛТЕРА ) )
      ПараметрыОбщие( ДатНач, ДатКнц );

   пИННБУХГАЛТЕРА = "";
   Если( ТАБНОМБУХГАЛТЕРА )
   {
      пБух = НайтиЛицо( ТАБНОМБУХГАЛТЕРА, "Сотрудники" );
      Если( Есть( пБух ) == 1 ) 
         пИННБУХГАЛТЕРА = пБух.ИНН; # ИНН
      Иначе
         пИННБУХГАЛТЕРА = "";
   }
   Вернуть(пИННБУХГАЛТЕРА);
}

функция ФИОПредставителя()
# Возвращает полное уполномоченного представителя
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМПРЕДСТАВИТЕЛЯ.
{
   перем пФИОПРЕДСТАВИТЕЛЯ;
   Если( !Есть( ТАБНОМПРЕДСТАВИТЕЛЯ ) )
      ПараметрыДляСтандартныхОтчетовОбщие();

   пФИОПРЕДСТАВИТЕЛЯ = "";
   Если( ТАБНОМПРЕДСТАВИТЕЛЯ )
   {
      пПред = НайтиЛицо( ТАБНОМПРЕДСТАВИТЕЛЯ, "Сотрудники" );
      Если( Есть( пПред ) ==  1 )
         пФИОПРЕДСТАВИТЕЛЯ = пПред.ФИО; # ФИО
      Иначе
         пФИОПРЕДСТАВИТЕЛЯ = "";
   }
   Вернуть(пФИОПРЕДСТАВИТЕЛЯ);
}

функция ИННПредставителя()
# Возвращает ИНН представителя 
# ФИО берется из карточки сотрудника, табельный номер которого указан в
# константе ТАБНОМПРЕДСТАВИТЕЛЯ.
{
   перем пИННПРЕДСТАВИТЕЛЯ;
   Если( !Есть( ТАБНОМПРЕДСТАВИТЕЛЯ ) )
      ПараметрыОбщие( ДатНач, ДатКнц );

   пИННПРЕДСТАВИТЕЛЯ = "";
   Если( ТАБНОМПРЕДСТАВИТЕЛЯ )
   {
      пПред = НайтиЛицо( ТАБНОМПРЕДСТАВИТЕЛЯ, "Сотрудники" );
      Если( Есть( пПред ) == 1 ) 
         пИННПРЕДСТАВИТЕЛЯ = пПред.ИНН; # ИНН
      Иначе
         пИННПРЕДСТАВИТЕЛЯ = "";
   }
   Вернуть(пИННПРЕДСТАВИТЕЛЯ);
}
