# Функции для построения отчетов в ПФ

функция ПроверитьСотрудника(Событие, Поле)
# Проверяет правильность заполнения некоорых реквизитов карточки сотрудника
# Используется в обработчике карточки сотрудника
{
   СимволыЧисла  = "0123456789";
   АнглСимволы   = "ABCDEFGHIJKLMNOPRSTUVWXYZ";
   РуссСимволы   = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
   Сокращения1   = ",А/П,АЛ,АО,АОБЛ,АУЛ,Б/О,Б-Р,БРИГАДА,БУГОР,БУДКА,БУХТА,ВАГОН,ВАЛ,ВЛД,ВОЛ,ВЪЕЗД,ВЫСЕЛ,Г,ГАРАЖ,ГК,ГОРОДОК,Д,Д/И,ТЕР,Д/О,ДВОР,ДД,ДЕПО,ДОР,ДП,ДСК,ЕРИК,Ж/Д БУДКА,Ж/Д КАЗАРМ,Ж/Д ОБП,Ж/Д ОП,Ж/Д РЗД,Ж/Д СТ,ЖТ,ЗАЕЗД,ЗАИМ,ЗАСТ,ЗАУЛОК,З-Д,ЗО,И/З,";
   Сокращения2   = ",КАЗАРМА,КАНАЛ,КАРЬЕР,КВ-Л,КИШЛАК,КЛХ,КМ,КОЛЬЦО,КОРДОН,КОШАРА,КП,КРАЙ,ЛЕСН-ВО,ЛЕСХОЗ,ЛИНИЯ,ЛОГ,М,М/С,МАССИВ,МАЯК,МКР,МО,МОСТ,МЫС,НАБ,НП,ОБЛ,ОБЩ,ОВРАГ,ОЗЕ,О,ОСТРОВ,ОТАРА,ОТД,П,П/Л,П/О,П/Р,П/СВХ,П/СТ,П/СТАНОК,ПАДЬ,ПАНС,ПАРК,ПГТ,ПЕР,";
   Сокращения3   = ",ПЕРЕЕЗД,ПЗ,ПИКЕТ,ПИТ,ПЛ,ПЛАТФ,ПЛ-КА,П-ОВ,ПОДСТ,ПОДЪЕМ,ПОЙМА,ПОЛЕ,ПОРТ,ПОСТ,ПОЧИНОК,ПР,ПРИИСК,ПР-КТ,ПРОСЕК,ПРОСЕЛОК,ПРОУЛОК,ПРОФ,ПУТЬ,ПХ,РАЗРЕЗ,РЕКА,РЕМБАЗА,РЕСП,РЕЧКА,РЗД,Р-Н,РОВ,РП,РУДНИК,РЫНОК,РЯД,РЯДЫ,С,САД,САН,САН-ПРОФ,СВХ,СДТ,";
   Сокращения4   = ",СКВЕР,СЛ,СООРУЖ,СПУСК,СТ,СТАДИОН,СТОРОЖКА,СТР,СТ-ЦА,СЪЕЗД,Т/Б,ТЕР,ТРАКТ,ТУП,У,УЛ,УР-ЩЕ,УСАДЬБА,УЧ-К,УЧХОЗ,ФАКТОРИЯ,ФЕРМА,Х,Х-ВО,ЦО,ЦУ,ЦУ ПХ,ЦУ СВХ,ЦУ ТОО,Ш,ШАХТА,";
   СимволыСерии  = "IVXL";
   СимволыЧисла2 = "1234567890 "; # плюс пробел
   Если(Событие == "Изменение")
   {
      Сообщение = "";
      ВыборПо(Поле)
      {
         Выбор "ФИО":
            Сообщение = ДопустимыеСимволы( ФИО, РуссСимволы + " " );
         Выбор "@Серия":
            Серия1 = Серия2 = "";
            Разбить( '@Серия', "-", Серия1, Серия2 );
            Если( Серия2 != "" ) # старый паспорт
            {
               Если( Серия1 )
                  Сообщение = ДопустимыеСимволы( Серия1, СимволыСерии );
               Если( Серия2 и Сообщение == "" )
                  Сообщение = ДопустимыеСимволы( Серия2, РуссСимволы );
            }
            Иначе              # новый паспорт
               Сообщение = ДопустимыеСимволы( Серия1, СимволыЧисла2 );
         Выбор "@Номер":
               Сообщение = ДопустимыеСимволы( '@Номер', СимволыЧисла );
         Выбор "@Город":
            Сокр = Вверх( СокращениеАдреса('@Город') );
            Если( !Сокр )
               Сообщение = "Не введено сокращение города";
            Иначе
               Если( !Найти(Сокращения1, "," + Сокр+ ",") и 
                     !Найти(Сокращения2, "," + Сокр+ ",") и 
                     !Найти(Сокращения3, "," + Сокр+ ",") и 
                     !Найти(Сокращения4, "," + Сокр+ ",") )
                  Сообщение = "Неверное сокращение города";
         Выбор "@Улица":
            Сокр = Вверх( СокращениеАдреса('@Улица') );
            Если( !Сокр )
               Сообщение = "Не введено сокращение улицы";
            Иначе
               Если( !Найти(Сокращения1, "," + Сокр+ ",") и 
                     !Найти(Сокращения2, "," + Сокр+ ",") и 
                     !Найти(Сокращения3, "," + Сокр+ ",") и 
                     !Найти(Сокращения4, "," + Сокр+ ",") )
                  Сообщение = "Неверное сокращение улицы";
      }
      Если( Сообщение != "" )
      {
         Сообщить( Сообщение );
         Вернуть Поле;
      }
   }
   Если( Событие == "Сохранение" и 'Год рождения' == 00.00.00 )
      Сообщить("Не указана дата рождения!\nСтраховые взносы в ПФ будут рассчитаны неправильно!");
   Вернуть "";
}

Функция ПериодыИнвалидности()
# Используется для отчетов по Персонифицированному учету
# Анализирует инвалидности сотрудника и разбивает период с ДатНач по ДатКнц
# на периоды в которых сотрудник был не инвалид и инвалид
# Возвращает массив этих периодов
# Неявные параметры
#    ДатНач по ДатКнц - определяют отчетный период
{
   Перем Г, М, Д, Н, НП, Д1, Д2, пДтНач, пДтКнц, Индекс;
   Очистить( мДатНач );
   Н = 0;
   ДляВсех( Записей( "Инвалидности", Лицо ) )
   {
      Если( 'ЗАПИСЬ.Инвалидность' != "" )
      {
         Н++;
         Если( 'Запись.Дата начала' != НачМес('Запись.Дата начала') )
            Сообщить("У "+ ФИО + " записи о инвалидности начинаются не началом месяца!\nЭто не допустимо для отчетов в ПФ.");
         Если( 'Запись.Дата окончания' != КнцМес('Запись.Дата окончания') )
            Сообщить("У "+ ФИО + " записи о инвалидности заканчиватся не концом месяца!\nЭто не допустимо для отчетов в ПФ.");
         пДтНач = Макс( ДатНач, 'Запись.Дата начала' );
         пДтКнц = Мин(  ДатКнц, 'Запись.Дата окончания' );
         Если( пДтНач < пДтКнц )
            мДатНач[Текст( пДтНач, "ДАТА (гггг-мм-дд)" ) + "-" + Н] = пДтКнц; 
      }
   }
   Очистить( мПериоды ); # Окончательный массив непрерывных периодов
   НП = 0;
   Д1 = Д2 = 00.00.00;
   ДляВсех( Элементов( мДатНач, Индекс ) )
   {
      Разбить( Индекс, "-", Г, М, Д, Н );
      пДтНач = Дата( Д, М, Г );
      пДтКнц = мДатНач[Индекс];
      Если( пДтНач - 1 <= Д2 ) # Соединяем периоды, должно сработать всегда первый раз
      {
         Если(Д1 == 00.00.00)
         {
            Если( пДтНач > ДатНач ) # Первая запись о инвалидности позже начала периода
            {
               НП++;
               мПериоды[НП, "ДатНач"] = ДатНач;
               мПериоды[НП, "ДатКнц"] = пДтНач-1;
            }
            Д1 = пДтНач;
         }
         Д2 = Макс( Д2, пДтКнц );
      }
      Иначе
      {  # Здесь Д1 и Д2 точно не 0
         # Закрываем (сохраняем) существовавший период
         НП++;
         мПериоды[НП, "ДатНач"] = Д1;
         мПериоды[НП, "ДатКнц"] = Д2;
         # Сохраняем еще один на месте пробела
         НП++;
         мПериоды[НП, "ДатНач"] = Д2+1;
         мПериоды[НП, "ДатКнц"] = пДтНач-1;
         # Инициализируем новый период
         Д1 = пДтНач;
         Д2 = пДтКнц;
      }
   }
   # Закрываем (сохраняем) существовавший период
   Если( Д1 == 00.00.00 ) # Это если не было ни одного элемента в цикле
   {
      Д1 = ДатНач;
      Д2 = ДатКнц;
   }
   НП++;
   мПериоды[НП, "ДатНач"] = Д1;
   мПериоды[НП, "ДатКнц"] = Д2;
   Если( Д2 < ДатКнц ) # Конец последней записи о инвалидности раньше конца периода
   {
      НП++;
      мПериоды[НП, "ДатНач"] = Д2+1;
      мПериоды[НП, "ДатКнц"] = ДатКнц;
   }
   Вернуть мПериоды;
}

Функция Стаж()
# Рассчитывает стаж по текущему сотруднику и возвращает его в виде массива
# Кроме того определяет глобальные переменные
#    СТАЖ_ДогНомер - номер договора
#    СТАЖ_ДогДата  - дата заключения договора
# Если у сотрудника есть параметры ДОГ_НОМЕР и ДОГ_ДАТА, то возвращаются они, иначе:
# Для 1.9 дата и номер договора берутся из первого кадрового документа,
# которым оформлено назначение сотрудника на должность
# при этом учитываются только должности с признаком "Договор подряда".
# Для 1.8 дата и номер договора рассчитываются только для сотрудников с признаком
# "Договор подряда"  при этом данные берутся также из первого кадрового документа,
# которым оформлено назначение сотрудника на должность
# Неявные параметры
#    ДатНач, ДатКнц - определяют период за который рассчитывается стаж
{
   Перем  пДатНач, пДатКнц, Н, Н1, Н2, ДНач, ДКнц, 
          УслТруда, ИсчТрудСтаж, ВыслугаЛет, ТеррУсл, пМетка, пКод,
          Пересекаются, КоэфЗначН1, КоэфЗначН2, А, В, Индекс;
   
   .СТАЖ_ДогНомер = "";
   .СТАЖ_ДогДата  = 00.00.00;
 
   пДатНач = ДатНач; пДатКнц = ДатКнц;
   Н = 0;
   #'ПФТИП_СВЕДЕНИЙ'
   Очистить( мСтажи );
   перем пТипСведений = "";
   Если( Есть( Документ.ПФТИП_СВЕДЕНИЙ ) )
   Разбить( Документ.ПФТИП_СВЕДЕНИЙ, " ", пТипСведений ); # Параметр
   Если( пТипСведений == "ПЕНС" )
      Если( НаПенсию )
         пДатКнц = Мин( пДатКнц, НаПенсию );

   ДляВсех( ДолжностейСотр() )
   {
      ДНач = Макс( пДатНач, 'Дата расчета' );   # Даты должности ограниченные отчетным периодом
      ДКнц = Мин(  пДатКнц, 'Дата начисления' );
      Если( ДНач <= ДКнц)
      {
         УслТруда = ИсчТрудСтаж = ВыслугаЛет = ТеррУсл = пКод = "";
         Если( Есть(ВерсияПрограммы) ) # Версия 1.9
         {
            Если( Есть( 'ОТПУСК/БОЛЬН.Расчеты>Дата расчета') и
                        'ОТПУСК/БОЛЬН.Расчеты>Тип' == "Штатное расписание" ) # это запись в штатном расписании
            {
               Условия = 'ОТПУСК/БОЛЬН.Расчеты.Расчет_.Штат-Расширение.Штат-Условия';
               Разбить( Условия.Код, ",", УслТруда, ИсчТрудСтаж, ВыслугаЛет, ТеррУсл );
               пКод = Условия.Примечание;
            }
            Иначе # это запись из должности
            {
               Должность = 'ОТПУСК/БОЛЬН.Виды расчетов-Расчет>Виды расчетов-Должности';
               Разбить( Должность.Примечание, ",", УслТруда, ИсчТрудСтаж, ВыслугаЛет, ТеррУсл, пКод );
            }
            Если( Найти( Признак, "Д" ) ) # Договор подряда
            {
               Если( !СТАЖ_ДогНомер ) СТАЖ_ДогНомер = Текст('Кадровый документ>Документ_>Номер',"ЧИСЛО *");
               Если( !СТАЖ_ДогДата )  СТАЖ_ДогДата  = 'Кадровый документ>Документ_>Дата';
            }
         }
         Иначе # Версия 1.8
         {
            Если( Есть( 'ОТПУСК/БОЛЬН.Расчеты>Дата расчета') и
                        'ОТПУСК/БОЛЬН.Расчеты>Тип' == "Штатное расписание" ) # это запись в штатном расписании
            {
               Штат = Объект('ОТПУСК/БОЛЬН', "Расчеты");
               ОБ   = Объект(Штат, "Расчет_");
               Если( Есть('ОБ.Штат-Расширение>Форма оплаты') )
               {
                  ШтатРасш  = Объект(ОБ, "Штат-Расширение");
                  Условия   = Объект(ШтатРасш, "Штат-Условия");
                  Должность = Объект('ОТПУСК/БОЛЬН', "Виды расчетов-Расчет");
                  Разбить( Условия.Код, ",", УслТруда, ИсчТрудСтаж, ВыслугаЛет, ТеррУсл );
                  пКод = Условия.Примечание;
               }
               Иначе
               {
                  Должность = Объект('ОТПУСК/БОЛЬН', "Виды расчетов-Расчет");
                  Разбить( Должность.Примечание, ",", УслТруда, ИсчТрудСтаж, ВыслугаЛет, ТеррУсл, пКод);
               }
            }
            Иначе # это запись из должности
            {
               Должность = Объект('ОТПУСК/БОЛЬН', "Виды расчетов-Расчет");
               Разбить( Должность.Примечание, ",", УслТруда, ИсчТрудСтаж, ВыслугаЛет, ТеррУсл, пКод );
            }
            Если( Найти( 'Сотрудники-Расчет>Признаки', "Д" ) ) # Договор подряда на карточке сотрудника
            {
               Если( !СТАЖ_ДогНомер ) СТАЖ_ДогНомер = Текст('Кадровый документ>Документы_>Номер',"ЧИСЛО *");
               Если( !СТАЖ_ДогДата  ) СТАЖ_ДогДата  = 'Кадровый документ>Документы_>Дата';
            }
         }
         Если(       Имя == "ПБР" )
            пМетка = "ДЕКРЕТ";       # Отпуск по беременности и родам       (больничный по среднему)
         Иначе Если( Имя == "П15" )
            пМетка = "ДЕТИ";      # Отпуск по уходу за детьми до 1.5 лет (пособие 200 р)
         Иначе Если( Имя == "П30" )
            пМетка = "ДЕТИ";    # Отпуск по уходу за детьми до 3 лет   (за счет средств предприятия)
         Иначе Если( Имя == "АДМ" и ДКнц < 01.01.01 )
            пМетка = "АДМИНИСТР"; # Отпуск без сохранения содержания (сумма 0)
                                           # начиная с формата 3.0 для 2001г не указывется
         Иначе 
            пМетка = " ";
         Н++;
         Если( пМетка == "ДЕТИ" ) # Согласно п. 8 Обязательные сочетания значений в группах
            УслТруда = пКод = ИсчТрудСтаж = ВыслугаЛет = "";
         мСтажи[Н, "ДатНач"]      = ДНач;
         мСтажи[Н, "ДатКнц"]      = ДКнц;
         мСтажи[Н, "УслТруда"]    = УслТруда;
         мСтажи[Н, "Код"]         = пКод;
         мСтажи[Н, "ИсчТрудСтаж"] = ИсчТрудСтаж;
         мСтажи[Н, "ВыслугаЛет"]  = ВыслугаЛет;
         мСтажи[Н, "ТеррУсл"]     = ТеррУсл;
         мСтажи[Н, "Метка"]       = пМетка;
         мСтажи[Н, "НазвДолж"]    = Название;
         мСтажи[Н, "Удален"]      = 0;
      }
   }
   # Если есть параметры ДОГ_НОМЕР и ДОГ_ДАТА
   Если( Есть(ДОГ_НОМЕР) ) СТАЖ_ДогНомер = ДОГ_НОМЕР;
   Если( Есть(ДОГ_ДАТА)  ) СТАЖ_ДогДата  = ДОГ_ДАТА;
   # Отпуск без сохранения содержания начиная с формата 3.0 для 2001г не указывется
   Если( пДатКнц < 01.01.01 )
   ДляВсех( ОтпусковСотр() )
   { 
      Если( ДатНач и ДатКнц и Метка == "А" ) # Административный отпуск
      {
         ДНач = Макс( пДатНач, ДатНач );
         ДКнц = Мин(  пДатКнц, ДатКнц );
         Если( ДНач <= ДКнц )
         {
            Н++;
            мСтажи[Н, "ДатНач"]      = ДНач;
            мСтажи[Н, "ДатКнц"]      = ДКнц;
            мСтажи[Н, "УслТруда"]    = "";
            мСтажи[Н, "ИсчТрудСтаж"] = "";
            мСтажи[Н, "ВыслугаЛет"]  = "";
            мСтажи[Н, "ТеррУсл"]     = "";
            мСтажи[Н, "Код"]         = "";
            мСтажи[Н, "Метка"]       = "АДМИНИСТР";
            мСтажи[Н, "НазвДолж"]    = "";
            мСтажи[Н, "Удален"]      = 0;
         }
      }
   }
   # "сжимаем" записи по стажу
   Установить(мСтажи);
   Пересекаются = 1;
   Пока( Пересекаются ) # Попарно перебираем все записи и убираем пересечеения
   {
      Пересекаются = 0; # Изначально сбрасываем флаг
      Н1 = 0;
      Пока( ++Н1 <= Н ) # ++Н1 означает что сначала Н1 увеличится, а потом вернет увеличенное значение
      Если( [Н1].Удален == 0 ) # Не считать удаленные
      { 
         Н2 = 0;
         Пока( ++Н2 <= Н )
         Если( [Н2].Удален == 0 и Н1 != Н2 ) # Сам на себя не считать и удаленные тоже
         { 
            КоэфЗначН1 = [Н1].Метка + [Н1].УслТруда + [Н1].Код; # Коэффициент значимости
            КоэфЗначН2 = [Н2].Метка + [Н2].УслТруда + [Н2].Код; # (доминируемости)
            Если( Макс( [Н1].ДатНач, [Н2].ДатНач ) <= Мин( [Н1].ДатКнц, [Н2].ДатКнц ) ) # Пересекаются периоды
            {  
               Пересекаются = 1;
               Если( КоэфЗначН1 == КоэфЗначН2 ) # Одинаковые объединяем
               {
                  [Н1].ДатНач = Мин(  [Н1].ДатНач, [Н2].ДатНач ); # Н1 - расширяем
                  [Н1].ДатКнц = Макс( [Н1].ДатКнц, [Н2].ДатКнц );
                  [Н2].Удален = 1; # Н2 - удаляем
               }
               Иначе # Один доминирует над другим, 
               {
                  А = ( КоэфЗначН1 > КоэфЗначН2 ) ? Н1 : Н2; # делаем А - доминирующий,
                  В = ( КоэфЗначН1 > КоэфЗначН2 ) ? Н2 : Н1; # В - рецессивный
                  # Перебираем все возможные варианты пересечения
                  Если( [А].ДатНач == [В].ДатНач и [А].ДатКнц == [В].ДатКнц ) # Одинаковые
                     [В].Удален = 1; # В - удаляем
                  Иначе Если( [А].ДатНач <= [В].ДатНач и [А].ДатКнц < [В].ДатКнц ) 
                     [В].ДатНач = [А].ДатКнц + 1;
                  Иначе Если( [А].ДатНач > [В].ДатНач и [А].ДатКнц >= [В].ДатКнц ) 
                     [В].ДатКнц = [А].ДатНач - 1;
                  Иначе Если( [А].ДатНач <= [В].ДатНач и [А].ДатКнц >= [В].ДатКнц ) 
                     [В].Удален = 1; # В - удаляем
                  Иначе Если( [А].ДатНач > [В].ДатНач и [А].ДатКнц < [В].ДатКнц ) # В - разбиваем на два
                  {  # Добавляем запись с номером Н, со всеми реквизитами В
                     Н++;
                     мСтажи[Н].ДатНач      = [А].ДатКнц + 1;
                     мСтажи[Н].ДатКнц      = [В].ДатКнц;
                     мСтажи[Н].УслТруда    = [В].УслТруда;
                     мСтажи[Н].ИсчТрудСтаж = [В].ИсчТрудСтаж;
                     мСтажи[Н].ВыслугаЛет  = [В].ВыслугаЛет;
                     мСтажи[Н].ТеррУсл     = [В].ТеррУсл;
                     мСтажи[Н].Код         = [В].Код;
                     мСтажи[Н].Метка       = [В].Метка;
                     мСтажи[Н].НазвДолж    = [В].НазвДолж;
                     мСтажи[Н].Удален      = 0;
                     # Уменьшаем оригинальный В
                     [В].ДатКнц = [А].ДатНач - 1;
                  }
                  Иначе Ошибка("Непредвиденная ситуация"); # Появится - прокид, сообщайте Макарову
               }
            }
            Иначе Если( ( [Н1].ДатНач == [Н2].ДатКнц + 1 ) или ( [Н2].ДатНач == [Н1].ДатКнц +1 ) ) # Касаются периоды
            {
               Если( КоэфЗначН1 == КоэфЗначН2 ) # Одинаковые объединяем
               {
                  Пересекаются = 1;
                  [Н1].ДатНач  = Мин(  [Н1].ДатНач, [Н2].ДатНач ); # Н1 - расширяем
                  [Н1].ДатКнц  = Макс( [Н1].ДатКнц, [Н2].ДатКнц );
                  [Н2].Удален  = 1; # Н2 - удаляем
               }
            }
         }# Н2
      }# Н1
   }
   Установить(мСтажи);
   # Удаляем помеченные на удаление записи о стаже, и сортируем их по дате начала
   Очистить(мСтажи1); # Возвращаемый массив
   Н1 = 0;
   ДляВсех( Элементов( мСтажи, Н ) )
   {
      Установить(мСтажи[Н]);
      Если( Удален == 0 )
      {
         Н1++;
         Индекс = Текст( ДатНач, "ДАТА (гггг-мм-дд)" ) + " - " 
                  + Текст( ДатКнц, "ДАТА (гггг-мм-дд)" ) + " /" + Н1;
         мСтажи1[Индекс, "ДатНач"]      = ДатНач;
         мСтажи1[Индекс, "ДатКнц"]      = ДатКнц;
         мСтажи1[Индекс, "УслТруда"]    = УслТруда;
         мСтажи1[Индекс, "ИсчТрудСтаж"] = ИсчТрудСтаж;
         мСтажи1[Индекс, "ВыслугаЛет"]  = ВыслугаЛет;
         мСтажи1[Индекс, "ТеррУсл"]     = ТеррУсл;
         мСтажи1[Индекс, "Код"]         = Код;
         мСтажи1[Индекс, "НазвДолж"]    = НазвДолж;
         мСтажи1[Индекс, "Метка"]       = Метка;
      }
   }
   Установить();
   ДатНач = пДатНач; ДатКнц = пДатКнц;
   Вернуть(мСтажи1);
}

Функция СотрудникиДляПачек( ДатНач, ДатКнц )
# Используется в качестве строки условного выражения по <Ctrl+S> 
# для отбора сотрудников для формирования пачек
# для Персонифицированного учета
# Возвращает:1 - если сотрудник работал в отчетном периоде периоде
#                и у него ЗАПОЛНЕН регистрационный номер
#            0 - иначе.
# Параметры: ДатНач, ДатКнц - отчетный период
{
   Вернуть Принят < ДатКнц и Уволен > ДатНач
         и Найти( "0123456789", ПодСтрока( 'Регистрационный номер', 1, 1 ) );
}

Функция СотрудникиДляРеестра( ДатНач, ДатКнц )
# Используется в качестве строки условного выражения по <Ctrl+S>
# для отбора сотрудников для формирования реестра незарегистрированных лиц
# для Персонифицированного учета
# Возвращает:1 - если сотрудник работал в отчетном периоде периоде
#                и у него НЕ ЗАПОЛНЕН регистрационный номер
#            0 - иначе.
# Параметры: ДатНач, ДатКнц - отчетный период
{
   Вернуть Принят < ДатКнц и Уволен > ДатНач
         и !Найти( "0123456789", ПодСтрока( 'Регистрационный номер', 1, 1 ) );
}

Функция СотрДляПачекПоКатег( ДатНач, ДатКнц, Катег )
# Используется в качестве строки поиска условного выражения по <Ctrl+S>
# для отбора сотрудников из справочника для формирования пачек Перс.учета
# Возвращает:1 - если в отчетном периоде периоде у сотрудника есть начисления
#                или стаж (записи о должностях сотрудника)
#                и при этом он относился к указанной категории
#            0 - иначе.
# Параметры: ДатНач, ДатКнц - отчетный период
#            Катег  - категория работника для пачки, может принимать значения:
#            "НРЕД" - Наемный работник предприятия, уплачивающего единый налог на вмененный доход (ЕНВД)
#            "НРИВ" - Наемный работник инвалид
#            "НР"   - Наемный работник
{
   Перем пСотрНаВменДох;
   # КОД_КАТЕГ_ПФ параметр сотрудника, используется при ЕНВД
   пСотрНаВменДох = Есть( КОД_КАТЕГ_ПФ ) ? КОД_КАТЕГ_ПФ == "НРЕД" : 0 ;
   ВыборПо( Катег )
   {
      Выбор "НРЕД":
         Если( пСотрНаВменДох )
         {
            мСтаж = Стаж(); # от ДатНач до ДатКнц
            # Если есть начисления или стаж, то печатаем документ
            Если( ЗаПериодРасчета("ЕФНД+ЕФНК+ЕЛГТ+БОЛ") или Размер( мСтаж ) )
               Вернуть 1;
         } 
      Выбор "НР", "НРИВ":
      {
         Если( !пСотрНаВменДох )
         {
            Перем Индекс;
            мПериоды = ПериодыИнвалидности(); # от ДатНач до ДатКнц
            ДляВсех( Элементов( мПериоды, Индекс ) )
            {
               ДатНач = мПериоды[Индекс, "ДатНач"];
               ДатКнц = мПериоды[Индекс, "ДатКнц"];
               Если( ( Катег != "НРИВ" ) == ( !Инвалид( ДатКнц ) ) )
               {
                  мСтаж = Стаж(); # от ДатНач до ДатКнц
                  # Если есть начисления или стаж, то печатаем документ
                  Если( ЗаПериодРасчета("ЕФНД+ЕФНК+ЕЛГТ+БОЛ") или Размер( мСтаж ) )
                     Вернуть 1;
               }
            }
         }
      }
      Иначе Ошибка("Допустимы только категории: НР, НРИВ, НРЕД!");
   }
   Вернуть 0;
}

Функция СуммаПФ( РазбиватьПоМесяцам )
# Используется в отчетах по персонифицированному учету
# Возвращает сумму начислений, учитываемых при назначении пенсии
# Параметры
#   Разбивать по месяцам:
#   1 - указывается при подаче сведений для НАЗНАЧЕНИЯ ПЕНСИИ, при этом
#       суммы отпускных берутся за месяц к которому они относятся (дата начисления),
#       а не за месяц в котором были фактически начислены и выплачены (дата расчета)
#   0 - указывается при подаче ИСХОДНЫХ сведений
#       суммы отпускных берутся за месяц
#       в котором были фактически начислены и выплачены (дата расчета)
{
   Перем ОтпЗаПерРасчета, ОтпЗаПерНачисл, Всего;

   # Для всех категорий НР, НРИВ, НРЕД определяется
   # налогооблагаемая база ЕСН, то есть все начисления
   Если( ДатНач >= 01.01.01 )
      Всего  = ЗаПериодРасчета( "ЕФНД+ЕФНК" );
   Иначе
      Всего  = ЗаПериодРасчета( БазаЕСН() )
             - ЗаПериодРасчета( БазаЕСН() + "-МВЫГ", 88НерПриб );

   Если( РазбиватьПоМесяцам )
   {
      # Отпуска, начисленные за период 
      ОтпЗаПерРасчета = ЗаПериодРасчета( "ОТП-КОМП" )
                      - ЗаПериодРасчета( "ОТП-КОМП", 88НерПриб );
      # Отпуска, относящиеся к этому периоду   
      ОтпЗаПерНачисл  = ЗаПериод( "ОТП-КОМП" )
                      - ЗаПериод( "ОТП-КОМП", 88НерПриб );
      # Из общей суммы, начисленной и выплаченной за период, вычитаем отпуска, 
      # начисленные за этот период, а вместо них берем отпуска,
      # относящиеся к этому периоду
      Вернуть Всего - ОтпЗаПерРасчета + ОтпЗаПерНачисл;
   }
   Иначе
      Вернуть Всего;
}

Функция СуммаБольнич( РазбиватьПоМесяцам )
# Используется в отчетах по персонифицированному учету
# Возвращает сумму больничных, указываемых в индивидуальных сведениях
# Параметры
#   Разбивать по месяцам:
#   1 - указывается при подаче сведений для НАЗНАЧЕНИЯ ПЕНСИИ, при этом
#       суммы больничных берутся за месяц к которому они относятся (дата начисления),
#       а не за месяц в котором были фактически начислены и выплачены (дата расчета)
#   0 - указывается при подаче ИСХОДНЫХ сведений
#       суммы больничных берутся за месяц
#       в котором были фактически начислены и выплачены (дата расчета)
{
   Если( РазбиватьПоМесяцам )
      Вернуть ЗаПериод("БОЛ");
   Иначе
      Вернуть ЗаПериодРасчета("БОЛ");
}

Функция ТипЗаписиДокументаПФ( ИмяФормы )
# Возвращает тип записи документа по указанному в параметре названию формы документа
{
   ВыборПо( ИмяФормы )
   {
      выбор "АДВ--1":   Вернуть "АНКТ";
      выбор "АДВ--2":   Вернуть "ОБМН";
      выбор "АДВ--3":   Вернуть "ДУБЛ";
      выбор "АДВ--8":   Вернуть "СМРТ";
      выбор "СЗВ--1":   Вернуть "ИН20";
      выбор "СЗВ--3":   Вернуть "ИН30";
      выбор "СЗВ--4-1": Вернуть "ИН41";
      выбор "СЗВ--4-2": Вернуть "ИН42";
      выбор "СЗВ--К":   Вернуть "КОНВ";
      выбор "АДВ-10":   Вернуть "СВОД";
      выбор "АДВ-11":   Вернуть "ВУПЛ";
      иначе Ошибка( "Недопустимый тип документа - '" + ИмяФормы + "'" );
   }
   Вернуть "";
}

Функция ЧислоВСтрокуФлагов( пЧисло, пСтрокаФлагов )
# Возвращает текстовую строку, с буквами установленных флагов
# Параметры:
# пЧисло - числовое значение в котором в двоичном виде хранятся флаги
# пСтрокаФлагов - строка, содержащая все буквы флагов
# Используется для хранения флагов в параметрах диалогов 
# Автор: Макаров, Жеглов
{
   Перем пНпп = 1;
   Перем пСтрока = "";
   Пока( пЧисло )
   {
      пСтрока += пЧисло % 2 ? ПодСтрока( пСтрокаФлагов, пНпп, 1 ) : " ";
      пЧисло = БезКоп( пЧисло / 2 );
      пНпп++;
   }
   Вернуть пСтрока;
}

Функция СтажВедомость( ... )
# Возвращает стаж по текущему сотруднику в виде массива в формате
#└─Дата начала|Организация|Вид деятельности (только для СЗВ-К)
# └─Дата начала
#   └─Индекс по параметрам стажа с разделителем |
#     ├─Организация        - организация (только для СЗВ-К)
#     ├─Профессия          - профессия (только для СЗВ-К)
#     ├─ВидДеятельности    - вид деятельности (только для СЗВ-К)
#     ├─ДатНач             - начало периода
#     ├─ДатКнц             - конец периода
#     ├─ВыслЛет            - основание (код) условия для досрочного назначения пенсии основание
#     ├─ВыслЛетДоп1        - параметр 1 дополнительных сведений
#     ├─ВыслЛетДоп2        - параметр 2 дополнительных сведений
#     ├─ВыслЛетДоп3        - параметр 3 дополнительных сведений
#     ├─ИсчТрудСтажа       - основание (код) исчисления страхового стажа (выслуга лет)
#     ├─ИсчТрудСтажаДоп0   - параметр 0 дополнительных сведений (только СЗВ-К)
#     ├─ИсчТрудСтажаДоп1   - параметр 1 дополнительных сведений
#     ├─ИсчТрудСтажаДоп2   - параметр 2 дополнительных сведений
#     ├─ИсчТрудСтажаДоп3   - параметр 3 дополнительных сведений
#     ├─ОсобУсл            - особые условия труда (код)
#     ├─ОсобУслКодПозСписка - особые условия труда код позции списка
#     ├─РайонКоэф          - районный коэффициент
#     └─ТеррУсл            - территориальные условия (код)
# СтажВедомость( [пПоОрганизациям] )
# Параметры: Если указан 1 параметр, то строится с организациями и профессиями для СЗВ-К
{
   Функция УслСтажаВедомость( ПоОрганизациям )
   # Возвращает параметры текущей записи о стаже в виде массива
   # числовые параметры приводит к формату "ЧИСЛО *"
   # ├─ВыслЛет          - основание (код) условия для досрочного назначения пенсии основание
   # ├─ВыслЛетДоп0      - параметр 0 дополнительных сведений (только СЗВ-К)
   # ├─ВыслЛетДоп1      - параметр 1 дополнительных сведений
   # ├─ВыслЛетДоп2      - параметр 2 дополнительных сведений
   # ├─ВыслЛетДоп3      - параметр 3 дополнительных сведений
   # ├─ИсчТрудСтажа     - основание (код) исчисления страхового стажа
   # ├─ИсчТрудСтажаДоп1 - параметр 1 дополнительных сведений
   # ├─ИсчТрудСтажаДоп2 - параметр 2 дополнительных сведений
   # ├─ИсчТрудСтажаДоп3 - параметр 3 дополнительных сведений
   # ├─ОсобУсл          - особые условия труда (код)
   # ├─ОсобУслКодПозСписка - особые условия труда код позиции списка
   # ├─Организация      - организация (только для СЗВ-К)
   # ├─Профессия        - профессия или должность (только для СЗВ-К)
   # ├─ВидДеятельности - вид деятельности (только для СЗВ-К)
   # ├─РайонКоэф        - районный коэффициент
   # └─ТеррУсл          - территориальные условия (код)
   {
      объект мУслСтажа;
      мУслСтажа[ "ТеррУсл" ] = ОКПДТР;
      мУслСтажа[ "РайонКоэф" ] = Текст( Число( Сумма ), "ЧИСЛО 0.2" );

      мУслСтажа[ "ОсобУсл" ] = Стаж0;
      мУслСтажа[ "ОсобУслКодПозСписка" ] = Вверх('N диплома');

      мУслСтажа[ "ИсчТрудСтажа" ] = Стаж1;
      Разбить( Специальность, ";", 
               мУслСтажа[ "ИсчТрудСтажаДоп1" ], 
               мУслСтажа[ "ИсчТрудСтажаДоп2" ], 
               мУслСтажа[ "ИсчТрудСтажаДоп3" ],
               мУслСтажа[ "ИсчТрудСтажаДоп0" ] );
      мУслСтажа[ "ИсчТрудСтажаДоп0" ] = Текст( мУслСтажа[ "ИсчТрудСтажаДоп0" ], "Текст" );
      мУслСтажа[ "ИсчТрудСтажаДоп1" ] = Текст( мУслСтажа[ "ИсчТрудСтажаДоп1" ], "Текст" );
      мУслСтажа[ "ИсчТрудСтажаДоп2" ] = Текст( мУслСтажа[ "ИсчТрудСтажаДоп2" ], "Текст" );
      Если( мУслСтажа[ "ИсчТрудСтажаДоп0" ] == "0" ) мУслСтажа[ "ИсчТрудСтажаДоп0" ] = "";
      Если( мУслСтажа[ "ИсчТрудСтажаДоп1" ] == "0" ) мУслСтажа[ "ИсчТрудСтажаДоп1" ] = "";
      Если( мУслСтажа[ "ИсчТрудСтажаДоп2" ] == "0" ) мУслСтажа[ "ИсчТрудСтажаДоп2" ] = "";

      мУслСтажа[ "ВыслЛет" ] = Стаж2;
      Разбить( Факультет, ";", 
               мУслСтажа[ "ВыслЛетДоп1" ], 
               мУслСтажа[ "ВыслЛетДоп2" ], 
               мУслСтажа[ "ВыслЛетДоп3" ] );
      мУслСтажа[ "ВыслЛетДоп1" ] = Текст( мУслСтажа[ "ВыслЛетДоп1" ], "Текст" );
      мУслСтажа[ "ВыслЛетДоп2" ] = Текст( мУслСтажа[ "ВыслЛетДоп2" ], "Текст" );
      мУслСтажа[ "ВыслЛетДоп3" ] = Текст( Число( мУслСтажа[ "ВыслЛетДоп3" ] ), "ЧИСЛО 0.2" );
      Если( мУслСтажа[ "ВыслЛетДоп1" ] == "0" ) мУслСтажа[ "ВыслЛетДоп1" ] = "";
      Если( мУслСтажа[ "ВыслЛетДоп2" ] == "0" ) мУслСтажа[ "ВыслЛетДоп2" ] = "";

      Перем пОрганизация = Заменить( Вверх(Организация) , "\"", "'");
            пОрганизация = Заменить( Вверх(пОрганизация) , "N", "№");
      мУслСтажа[ "Организация" ] = ПоОрганизациям ? Вверх(пОрганизация) : "";
      мУслСтажа[ "Профессия" ]   = ПоОрганизациям ? Заменить( Вверх(Профессия) , "\"", "'") : "";
      Перем пВидДеятельности;
      Разбить( 'Вид деятельности', " ", пВидДеятельности );
      мУслСтажа[ "ВидДеятельности" ] = ПоОрганизациям ? пВидДеятельности : "";

      Вернуть( мУслСтажа );
   }

   Функция СтажВедомостьЗаДень( Дата, ... )
   # Возвращает стаж по текущему сотруднику за указанный день в виде массива в формате
   # └─Индекс по параметрам стажа с разделителем |
   #   ├─ВыслЛет           - основание (код) условия для досрочного назначения пенсии основание
   #   ├─ВыслЛетДоп0       - параметр 0 дополнительных сведений (только СЗВ-К)
   #   ├─ВыслЛетДоп1       - параметр 1 дополнительных сведений
   #   ├─ВыслЛетДоп2       - параметр 2 дополнительных сведений
   #   ├─ВыслЛетДоп3       - параметр 3 дополнительных сведений
   #   ├─ИсчТрудСтажа      - основание (код) исчисления страхового стажа
   #   ├─ИсчТрудСтажаДоп1  - параметр 1 дополнительных сведений
   #   ├─ИсчТрудСтажаДоп2  - параметр 2 дополнительных сведений
   #   ├─ИсчТрудСтажаДоп3  - параметр 3 дополнительных сведений
   #   ├─ОсобУсл           - особые условия труда (код)
   #   ├─ОсобУслКодПозСписка - особые условия труда код позиции списка
   #   ├─Организация       - организация (только СЗВ-К)
   #   ├─Профессия         - профессия или должность (только СЗВ-К)
   #   ├─ВидДеятельности   - вид деятельности (только СЗВ-К)
   #   ├─РайонКоэф         - районный коэффициент
   #   └─ТеррУсл           - территориальные условия (код)
   # Параметры:
   #    Дата - день, за который рассчитываются стажи
   {
      Если( Есть( Параметры[ 1 ] ) )
         перем пПоОрганизациям = 1;
      Иначе
         перем пПоОрганизациям = 0;
      
      объект мСтажиЗаПериод;
      Если( Дата >= ДатНач и Дата <= ДатКнц или пПоОрганизациям )
      {
         ДляВсех( Записей( "Список стажей", Лицо ) )
            Если( ( ( Дата и Дата >= 'Дата начала' ) или !'Дата начала' ) и ( ( Дата и Дата <= 'Дата окончания' ) или !'Дата окончания' ) )
         {
            перем пИндекс, пИндекс1;
            пИндекс = "";
            объект оУслСтажа = УслСтажаВедомость( пПоОрганизациям );
            ДляВсех( Элементов( оУслСтажа, пИндекс1 ) )
               пИндекс += "|" + Подстрока( оУслСтажа[ пИндекс1 ], 1, 25 );
            пИндекс = ПодСтрока( пИндекс, 2, -1 );
         
            мСтажиЗаПериод[ пИндекс ] = оУслСтажа;
         }

         Если( Размер( мСтажиЗаПериод ) > 1 )
            УдалитьПерем( мСтажиЗаПериод[ "||||||||||||||" ] );
      }
      Вернуть( мСтажиЗаПериод );
   }

   Функция СравнитьМ( Массив1, Массив2 )
   # Сравнивает массивы на равенство индексов
   # Параметры:
   #    Массив1, Массив2 - одномерные массивы
   # Результат:
   #    1 - равны
   #    0 - отличаются
   {
      Если( Размер( Массив1 ) != Размер( Массив2 ) )
         Вернуть( 0 );
      перем пИндекс;
      ДляВсех( Элементов( Массив1, пИндекс ) )
      {
         # По водолазам записи не сжимаются, и по каждому месяцу указывается время пребывания под водоу
         Если( Массив1[ пИндекс ].ИсчТрудСтажа == "ВОДОЛАЗ" )
            Вернуть 0;
         # Для выслуги педагогов записи не сжимаются, и по каждому месяцу указывается доля и возможно часы
         Если( Массив1[ пИндекс ].ВыслЛет == "ЗП80ПД" 
           или Массив1[ пИндекс ].ВыслЛет == "ЗП80РК"
           или Массив1[ пИндекс ].ВыслЛет == "ЗП81ГД" )  # Для медицинских работников с 01/11/1999
            Вернуть 0;
         Если( !Есть( Массив2[ пИндекс ] ) )
            Вернуть 0;
      }
      Вернуть 1;
   }

   Если( Есть( Параметры[ 1 ] ) )
      перем пПоОрганизациям = 1;
   иначе
      перем пПоОрганизациям = 0;
   
   объект мСтажи;
   # Стаж на начало периода
   мСтажи[ Текст( ДатНач, "ДАТА (ГГГГ_ММ_ДД)" ) ] = пПоОрганизациям 
                                                  ? СтажВедомостьЗаДень( ДатНач, пПоОрганизациям ) 
                                                  : СтажВедомостьЗаДень( ДатНач );
   # Набираем массив стажей максимально разбитых по периодам, но сжатых в периоде
   ДляВсех( Записей( "Список стажей", Лицо ) )
   {
      мСтажи[ Текст( 'Дата начала', "ДАТА (ГГГГ_ММ_ДД)" ) ] = пПоОрганизациям 
                                                            ? СтажВедомостьЗаДень( 'Дата начала', пПоОрганизациям ) 
                                                            : СтажВедомостьЗаДень( 'Дата начала' );
      Если( 'Дата окончания' )
         мСтажи[ Текст( 'Дата окончания' + 1, "ДАТА (ГГГГ_ММ_ДД)" ) ] = пПоОрганизациям 
                                                                      ? СтажВедомостьЗаДень( 'Дата окончания' + 1, пПоОрганизациям ) 
                                                                      : СтажВедомостьЗаДень( 'Дата окончания' + 1 );
   }


   # Сжимаем одинаковые периоды
   перем сИндекс, пИндекс, пИндекс1, пНпп;
   объект мСтажиУдалить;
   сИндекс = "";
   пНпп = 0;
   ДляВсех( Элементов( мСтажи, пИндекс ) )
   {
      Если( пНпп )
      {
         Если( СравнитьМ( мСтажи[ сИндекс ], мСтажи[ пИндекс ] ) )
            мСтажиУдалить[ пИндекс ] = пИндекс;
         иначе
            сИндекс = пИндекс;
      }
      иначе
         сИндекс = пИндекс;
      пНпп++;
   }
   ДляВсех( Элементов( мСтажиУдалить, пИндекс ) )
      УдалитьПерем( мСтажи[ пИндекс ] );

   # Добавляем к периодам ДатНач, ДатКнц
   сИндекс = "";
   пНпп = 0;
   Очистить( мСтажиУдалить );
   ДляВсех( Элементов( мСтажи, пИндекс ) )
   {
      Если( пНпп ) ДляВсех( Элементов( мСтажи[ сИндекс ], пИндекс1 ) )
      {
         мСтажи[ сИндекс, пИндекс1, "ДатНач" ] = Дата( сИндекс, "ГГГГ_ММ_ДД" );
         мСтажи[ сИндекс, пИндекс1, "ДатКнц" ] = Дата( пИндекс, "ГГГГ_ММ_ДД" ) - 1;
      }
      Если( !Размер( мСтажи[ пИндекс ] ) )
         мСтажиУдалить[ пИндекс ] = пИндекс;
      сИндекс = пИндекс;
      пНпп++;
   }
   Если( пНпп ) ДляВсех( Элементов( мСтажи[ сИндекс ], пИндекс1 ) )
      Если( !Есть( мСтажи[ сИндекс, пИндекс1, "ДатНач" ] ) )
      {
         мСтажи[ сИндекс, пИндекс1, "ДатНач" ] = Дата( сИндекс, "ГГГГ_ММ_ДД" );
         мСтажи[ сИндекс, пИндекс1, "ДатКнц" ] = "";
      }

   # Удаляем периоды без стажа
   ДляВсех( Элементов( мСтажиУдалить, пИндекс ) )
      УдалитьПерем( мСтажи[ пИндекс ] );
   
   Если( пПоОрганизациям )
   {  # К первому индексу по датам добавляем организацию, т.к. нужно что бы в каждой группе была только одна организация
      Объект мСтажиПоОрг;
      Очистить( мСтажиПоОрг );
      Перем пИндексДата, пИндексУсловия, пЗначение ;
      Перем пПредОрг = пПредВид = пДата = "";
      ДляВсех( Элементов( мСтажи, пИндексДата ) )
      {
         ДляВсех( Элементов( мСтажи[ пИндексДата ], пИндексУсловия ) )
         {
            Перем пОрг = Подстрока( мСтажи[ пИндексДата, пИндексУсловия ].Организация, 1, 100 );
            Перем пВид = мСтажи[ пИндексДата, пИндексУсловия ].ВидДеятельности;
            Если( пОрг != пПредОрг или пВид != пПредВид )
               пДата = пИндексДата;
            пПредОрг = пОрг;
            пПредВид = пВид;
            мСтажиПоОрг[ пДата + "|" + пОрг + "|" + пВид, пИндексДата, пИндексУсловия ] = Объект( мСтажи[ пИндексДата, пИндексУсловия ] );
         }
      }
      Вернуть мСтажиПоОрг;
   }

   Вернуть( мСтажи );
}

Функция НачисленияВедомость()
{
   объект мНачисления;
   перем пМесяц = Месяц( ДатНач );
   Перем ИВзносы_С, ИУплачено_С;
   ИВзносы_С = ИУплачено_С = 0;
   Пока( пМесяц <= Месяц( ДатКнц ) )
   {
      перем тМесяц = Текст( пМесяц, "ТЕКСТ 2п" ); тМесяц = Заменить( тМесяц, " ", "0" );
      мНачисления[ тМесяц, "СредЧисл" ]   = [ "ПФСРЕДЧИСЛ_" + тМесяц ];
      мНачисления[ тМесяц, "Доходы" ]     = [ "ПФДОХОДЫ_" + тМесяц ];
      мНачисления[ тМесяц, "ДоходыБол" ]  = [ "ПФДОХОДЫБОЛ_" + тМесяц ];
      мНачисления[ тМесяц, "Тариф" ]      = [ "ПФТАРИФ_" + тМесяц ];
      мНачисления[ тМесяц, "Взносы_С" ]   = ИВзносы_С   += [ "ПФВЗНОСЫ_С_" + тМесяц ];
      мНачисления[ тМесяц, "Уплачено_С" ] = ИУплачено_С += [ "ПФУПЛАЧЕНО_С_" + тМесяц ];
      пМесяц++;
   }
   Вернуть( мНачисления );
}

Функция ВзносыВедомость( пГод )
{
   объект мВзносы;
   ДляВсех( Записей( "Список страховых взносов", Лицо ) )
   {
      Если( _ЗадолжНачС или _ЗадолжНачН или _ЗадолжНачД )
      {
         мВзносы[ "ЗадолжНач", Год( 'Дата начала' ), "С" ] += Окр( _ЗадолжНачС, 1 );
         мВзносы[ "ЗадолжНач", Год( 'Дата начала' ), "Н" ] += Окр( _ЗадолжНачН, 1 );
         мВзносы[ "ЗадолжНач", Год( 'Дата начала' ), "Д" ] += Окр( _ЗадолжНачД, 1 );
      }

      Если( _УплаченоС или _УплаченоН или _УплаченоД )
      {
         мВзносы[ "Уплачено", Год( 'Дата начала' ), "С" ] += Окр( _УплаченоС, 1 );
         мВзносы[ "Уплачено", Год( 'Дата начала' ), "Н" ] += Окр( _УплаченоН, 1 );
         мВзносы[ "Уплачено", Год( 'Дата начала' ), "Д" ] += Окр( _УплаченоД, 1 );
      }

      Если( _ЗадолжКнцС или _ЗадолжКнцН или _ЗадолжКнцД )
      {
         мВзносы[ "ЗадолжКнц", Год( 'Дата начала' ), "С" ] += Окр( _ЗадолжКнцС, 1 );
         мВзносы[ "ЗадолжКнц", Год( 'Дата начала' ), "Н" ] += Окр( _ЗадолжКнцН, 1 );
         мВзносы[ "ЗадолжКнц", Год( 'Дата начала' ), "Д" ] += Окр( _ЗадолжКнцД, 1 );
      }
   }

#   мВзносы[ "Взносы", пГод, "С" ] += ПФВЗНОСЫ_С_ПЕРИОД;
#   мВзносы[ "Взносы", пГод, "Н" ] += ПФВЗНОСЫ_Н_ПЕРИОД;
#   мВзносы[ "Взносы", пГод, "Д" ] += ПФВЗНОСЫ_Д_ПЕРИОД;
#
   Если( ПФУПЛАЧЕНО_С_ПЕРИОД или ПФУПЛАЧЕНО_Н_ПЕРИОД или ПФУПЛАЧЕНО_Д_ПЕРИОД ) 
   {
      мВзносы[ "Уплачено", пГод, "С" ] += Окр( ПФУПЛАЧЕНО_С_ПЕРИОД, 1 );
      мВзносы[ "Уплачено", пГод, "Н" ] += Окр( ПФУПЛАЧЕНО_Н_ПЕРИОД, 1 );
      мВзносы[ "Уплачено", пГод, "Д" ] += Окр( ПФУПЛАЧЕНО_Д_ПЕРИОД, 1 );
   }

   Если( _ЗадолжКнцС_Период или _ЗадолжКнцН_Период или _ЗадолжКнцД_Период )
   {
      мВзносы[ "ЗадолжКнц", пГод, "С" ] += Окр( _ЗадолжКнцС_Период, 1 );
      мВзносы[ "ЗадолжКнц", пГод, "Н" ] += Окр( _ЗадолжКнцН_Период, 1 );
      мВзносы[ "ЗадолжКнц", пГод, "Д" ] += Окр( _ЗадолжКнцД_Период, 1 );
   }

   Вернуть( мВзносы );
}

Функция РасчетПФ( ТипЗаписи )
{
   #  Параметры:
   #  ТипЗаписи ( строка ) - "ЗГЛВ", "РБТД".
   #  ТипДокумента ( строка ) - "АНКТ", "ОБМН", "ДУБЛ", "ИН20", "ИН30", "ИН41", "ИН42", "ВПСК", 
   #                            "СМРТ", "СВОД",  "СПВП", "ВУПЛ", "ЭЦПД", "КОНВ"
   Если( Есть( 'N п/п' ) и Есть( ФИО ) )
      ВывестиСтатус( "Идет расчет   " + 'N п/п' + " " + ФИО + "...");
   Иначе
      ВывестиСтатус( "Идет расчет..." );
   
   # Если вызывается из обработчика наименования ведомости
   Если( !Есть( Документ ) )
      Объект Документ = 'Ведомость-Список>Документ_';

   объект м;
   
   м.тТипЗаписи = Вверх( ТипЗаписи );
   ВыборПо( ТипЗаписи )
   {
      # Запись - заголовок
      выбор "ЗГЛВ":
         м.тВерсияФормата = "04.00";
         м.тПрограммаПодготовкиДанных = "СБИС++";
         м.тВерсияПрограммыПодготовки = "1.00";

      # Запись о работодателе
      выбор "РБТД":
         м.тИсточникСведений = "РБТД";
         м.тРегистрационныйНомерПФР = Есть( ЛицоП.пфРегНом ) ? ЛицоП.пфРегНом : пфРегНом;
         м.чИНН = Число( ЛицоП.ИНН );
         м.чКПП = Число( Есть( ЛицоП.КПП ) ? ЛицоП.КПП : КПП );
         м.тНаименованиеРаботодателя = Вверх( Есть( ЛицоП.пфНаименование ) ? ЛицоП.пфНаименование : пфНаименование );

      # Запись о пачке
      выбор "ПАЧК":
         перем пОтчГод = Документ.ПФОТЧПЕРИОД_ГОД ? Документ.ПФОТЧПЕРИОД_ГОД : Год( Дата );
         м.чНомерПачкиДокументов = Номер; # Ведомость
         м.тТипПачки = "ОПИСЬ"; # СОБЕС - только для сведений, формируемых самими органами ПФ
         #Если( ШПЗ == "СЗВ--3" и пОтчГод == 2002 и ТекДат() < 01.01.03 ) 
         #   м.тТипОписи = "ОП60";
         #Иначе # В остальных случаях всегда ОП61 - АДВ-6-1
            м.тТипОписи = "ОП61";
         #Разбить( ПФТИП_ОПИСИ, " ", м.тТипОписи ); # Параметр
         м.дДатаСоставленияОписи = ТекДат();
         м.чЧислоТиповДокументовВПачке = 1;
         ВыборПо( ШПЗ )
         {
            выбор "СЗВ--4-1", "СЗВ--4-2", "АДВ-11", "СЗВ--К":
               м.чРасчетныйПериодГод = пОтчГод >= 2002       ? пОтчГод : 0; # Ведомость
               м.чОтчетныйПериодГод  = м.чРасчетныйПериодГод ? 0       : пОтчГод;
            выбор "СЗВ--1", "СЗВ--3", "АДВ-10":
               м.чРасчетныйПериодГод = 0;
               м.чОтчетныйПериодГод = пОтчГод;
            иначе
               м.чРасчетныйПериодГод = м.чОтчетныйПериодГод = 0;
         }
         Если( ШПЗ == "СЗВ--1" или ШПЗ == "СЗВ--3" или ШПЗ == "АДВ-10" )
            м.тКодКатегорииЗастрахованногоЛица = м.тКодДополнительногоТарифа = "";
         иначе
         {
            Разбить( Документ.ПФКОД_КАТЕГОРИИОСН, " ", м.тКодКатегорииЗастрахованногоЛица ); # Параметр
            Разбить( Документ.ПФКОД_ДОП_ТАРИФА, " ", м.тКодДополнительногоТарифа ); # Параметр
         }

         Разбить( Документ.ПФКОД_ТЕР_УСЛОВИЙ, " ", м.тТерриториальныеУсловияКод ); # Параметр
         Если( ШПЗ == "СЗВ--1" или ШПЗ == "СЗВ--3" или ШПЗ == "АДВ-10" )
            м.тТипСведений = "";
         иначе
            Разбить( Документ.ПФТИП_СВЕДЕНИЙ, " ", м.тТипСведений ); # Параметр
         Разбить( Документ.ПФВИД_КОРРЕКТИРОВКИ, " ", м.тВидКорректировки ); # Параметр
         Если( ШПЗ == "СЗВ--К" и ( м.тТипСведений == "КОРР" или м.тТипСведений == "ОТМН" ) )
         {
             м.тВидКорректировки = м.тТипСведений;
             м.тТипСведений = "";
         }
         м.чОтчетныйПериодКвартал = 0;
         Разбить( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, " ", м.чОтчетныйПериодКвартал ); # Параметр


         Перем пНачС, пНачН, пНачД;
         пНачС = пНачН = пНачД = 0;
         Если( ШПЗ == "СЗВ--4-1" или ШПЗ == "СЗВ--4-2" )
            ДляВсех( Наименований )
            {
               пНачС += ПФВЗНОСЫ_С_ИТОГ;
               пНачН += ПФВЗНОСЫ_Н_ИТОГ;
               пНачД += ПФВЗНОСЫ_Д_ИТОГ;
            }
         м.чНачисленоСтраховаяЧасть          = Текст( пНачС, "Деньги");
         м.чНачисленоНакопительнаяЧасть      = Текст( пНачН, "Деньги");
         м.чНачисленоПоДополнительномуТарифу = Текст( пНачД, "Деньги");

         м.чСведенияОЗаработкеВсегоНачислено = 0;
         м.чСведенияОЗаработкеПособиеПоВременнойНетрудоспособности = 0;
         Если( Документ.ШПЗ == "СЗВ--1" или Документ.ШПЗ == "СЗВ--3" )
            ДляВсех( Наименований )
            {
               м.чСведенияОЗаработкеВсегоНачислено += ПФДОХОДЫ_ПЕРИОД;
               м.чСведенияОЗаработкеПособиеПоВременнойНетрудоспособности += ПФДОХОДЫБОЛ_ПЕРИОД;
            }

         м.чИсходящийНомерСПУКодПодразделения = 0;
         м.чИсходящийНомерСПУИсходящийНомер = 0;

      # Запись о типе документа
      выбор "ТИПД":
         м.тТипДокумента = ТипЗаписиДокументаПФ( Документ.ШПЗ );
         м.чЧислоДокументовДанногоТипаВПачке = 0;
         ДляВсех( Наименований )
            м.чЧислоДокументовДанногоТипаВПачке++;

      # Запись об Анкете застрахованного лица
      выбор "АНКТ":
         м.чНомерДокументаВПачке = 'N п/п';
         м.дДатаЗаполнения = ТекДат();
         м.тФамилия = Фамилия();
         м.тИмя = ИмяСотр();
         м.тОтчество = Отчество();
         м.тПол = _Пол();
         
         # Дата рождения
         м.тДРТипДатыРождения = "СТАНДАРТ";
         м.дДРСтандартнаяДата = 'Год рождения';
         м.чДРОсобаяДатаДень = 0;
         м.чДРОсобаяДатаМесяц = 0;
         м.чДРОсобаяДатаГод = 0;
         
         # Место рождения
         м.тМестоРождТипМестаРождения = "СТАНДАРТ";
         м.тМестоРождНазваниеНас_гоПункта = РГород();
         м.тМестоРождРайон = РРайон();
         м.тМестоРождОбласть = РОбласть();
         м.тМестоРождСтрана = РСтрана();
         м.тГражданство = Вверх( Гражданство );
         
         # Документ удостоверяющий личность
         м.тДокУдостЛичнТипДокументаКод = ТипДокументаПФ();
         м.тДокУдостЛичнНаименование = ВидДокументаПФ();
         перем пДокументСерия = Серия();
         Если( Найти( пДокументСерия, "-" ) ) # Паспорт гражданина СССР и прочее
            Разбить( Вверх( пДокументСерия ), "-", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         иначе                               # Паспорт гражданина РФ
            Разбить( Вверх( пДокументСерия ), " ", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         м.чДокУдостЛичнНомер = Номер();
         м.дДокУдостЛичнДатаВыдачи = Когда();
         м.тДокУдостЛичнКемВыдан = Кем();

         перем пАдресРегистрацииКодСтраны = "";
         м.тАдресРегистрации = пАдресРегистрацииКодСтраны + "," + Индекс() + "," + АдресПФ();

         # Если адрес состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресРегистрации, "," ) )
            м.тАдресРегистрации = "";

         перем пАдресФактическийКодСтраны = "";
         м.тАдресМестаЖительстваФактический = пАдресФактическийКодСтраны + "," + фИндекс() + "," + фАдресПФ();

         # Если адрес состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресМестаЖительстваФактический, "," ) )
            м.тАдресМестаЖительстваФактический = "";

         м.тТелефоны = Телефон;

      # Запись о Заявлении на обмен страхового свидетельства
      выбор "ОБМН":
         м.чНомерДокументаВПачке = 'N п/п';
         м.дДатаЗаполнения = ТекДат();
         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';

         Перем пПФФИО_Старое = (ПФФИО_СТАРОЕ ? ПФФИО_СТАРОЕ : ФИО);
         м.тФИОУказВСтрахСвидФамилия = Фамилия( пПФФИО_Старое );
         м.тФИОУказВСтрахСвидИмя = ИмяСотр( пПФФИО_Старое );
         м.тФИОУказВСтрахСвидОтчество = Отчество( пПФФИО_Старое );

         # Расчет строки с изменившимися параметрами
         перем пИзмДанные = ЧислоВСтрокуФлагов( ПФИЗМ_ДАННЫЕ, "ФИОПДМГчержл" );

         м.тФамилия  = Найти( пИзмДанные, "Ф" ) ? Фамилия()  : "";
         м.тИмя      = Найти( пИзмДанные, "И" ) ? ИмяСотр()  : "";
         м.тОтчество = Найти( пИзмДанные, "О" ) ? Отчество() : "";

         м.тПол = Найти( пИзмДанные, "П" ) ? _Пол() : "";

         # Дата рождения
         м.тДРТипДатыРождения = Найти( пИзмДанные, "Д" ) ? "СТАНДАРТ"      : "";
         м.дДРСтандартнаяДата = Найти( пИзмДанные, "Д" ) ? 'Год рождения'  : "";
         м.чДРОсобаяДатаДень = 0;
         м.чДРОсобаяДатаМесяц = 0;
         м.чДРОсобаяДатаГод = 0;

         # Место рождения
         Если( Найти( пИзмДанные, "М" ) )
         {
            м.тМестоРождТипМестаРождения = "СТАНДАРТ";
            м.тМестоРождНазваниеНас_гоПункта = РГород();
            м.тМестоРождРайон = РРайон();
            м.тМестоРождОбласть = РОбласть();
            м.тМестоРождСтрана = РСтрана();
            м.тГражданство = Вверх( Гражданство );
         }
         иначе
            м.тМестоРождТипМестаРождения = 
            м.тМестоРождНазваниеНас_гоПункта = 
            м.тМестоРождРайон = 
            м.тМестоРождОбласть = 
            м.тМестоРождСтрана = 
            м.тГражданство = "";
         
         м.тГражданство = Найти( пИзмДанные, "Г" ) ? Вверх( Гражданство ) : "";
         Если( м.тГражданство == "РОССИЯ" )
            м.тГражданство = "";

         м.тПризнакОтменыОтчества = Найти( пИзмДанные, "ч" ) ? "ОТМН" : "";
         м.тПризнакОтменыМестаРождения = Найти( пИзмДанные, "е" ) ? "ОТМН" : "";

         # Документ удостоверяющий личность
         м.тДокУдостЛичнТипДокументаКод = ТипДокументаПФ();
         м.тДокУдостЛичнНаименование = ВидДокументаПФ();
         перем пДокументСерия = Серия();
         Если( Найти( пДокументСерия, "-" ) ) # Паспорт гражданина СССР и прочее
            Разбить( Вверх( пДокументСерия ), "-", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         иначе                               # Паспорт гражданина РФ
            Разбить( Вверх( пДокументСерия ), " ", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         м.чДокУдостЛичнНомер = Номер();
         м.дДокУдостЛичнДатаВыдачи = Когда();
         м.тДокУдостЛичнКемВыдан = Кем();

         перем пАдресРегистрацииКодСтраны = "";
         м.тАдресРегистрации = Найти( пИзмДанные, "р" ) ? пАдресРегистрацииКодСтраны + "," + Индекс() + "," + АдресПФ() : "";

         # Если адрес для информирования состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресРегистрации, "," ) )
            м.тАдресРегистрации = "";

         перем пАдресФактическийКодСтраны = "";
         м.тАдресМестаЖительстваФактический = Найти( пИзмДанные, "ж" ) ? пАдресФактическийКодСтраны + "," + фИндекс() + "," + фАдресПФ() : "";

         # Если адрес для информирования состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресМестаЖительстваФактический, "," ) )
            м.тАдресМестаЖительстваФактический = "";

         м.тТелефоны = Найти( пИзмДанные, "л" ) ? Телефон : "";

      # Заявлении о выдаче дубликата страхового свидетельства АДВ-3
      выбор "ДУБЛ":
         м.чНомерДокументаВПачке = 'N п/п';
         м.дДатаЗаполнения = ТекДат();
        
         Перем пПФФИО_Старое = (ПФФИО_СТАРОЕ ? ПФФИО_СТАРОЕ : ФИО);
         м.тФИОУказВСтрахСвидФамилия = Фамилия( пПФФИО_Старое );
         м.тФИОУказВСтрахСвидИмя = ИмяСотр( пПФФИО_Старое );
         м.тФИОУказВСтрахСвидОтчество = Отчество( пПФФИО_Старое );
      
         м.тПолУказВСтрахСвид = _Пол( ПФПол_Старое ? ПФПол_Старое : Пол );
      
         м.тДРТипДатыРожденияУказВСтрахСвид = "СТАНДАРТ";
         м.дДРСтандартнаяДатаУказВСтрахСвид = ПФГодРождения_Старое ? ПФГодРождения_Старое : 'Год рождения';
         м.чДРОсобаяДатаДеньУказВСтрахСвид = 0;
         м.чДРОсобаяДатаМесяцУказВСтрахСвид = 0;
         м.чДРОсобаяДатаГодУказВСтрахСвид = 0;
      
         Перем пПФМР_Старое = (ПФМР_Старое и ПФМР_Старое != ",,,") ? ПФМР_Старое : 'Место рождения';

         м.тМестоРождТипМестаРожденияУказВСтрахСвид = "СТАНДАРТ";
         м.тМестоРождНазваниеНас_гоПунктаУказВСтрахСвид = РГород( пПФМР_Старое );
         м.тМестоРождРайонУказВСтрахСвид = РРайон( пПФМР_Старое );
         м.тМестоРождОбластьУказВСтрахСвид = РОбласть( пПФМР_Старое );
         м.тМестоРождСтранаУказВСтрахСвид = РСтрана( пПФМР_Старое );
      
         # Расчет строки с изменившимися параметрами
         перем пИзмДанные = ЧислоВСтрокуФлагов( ПФИЗМ_ДАННЫЕ, "ФИОПДМГчержл" );
      
         м.тФамилия          = Найти( пИзмДанные, "Ф" ) ? Фамилия()       : "";
         м.тИмя              = Найти( пИзмДанные, "И" ) ? ИмяСотр()       : "";
         м.тОтчество         = Найти( пИзмДанные, "О" ) ? Отчество()      : "";
      
         м.тПол              = Найти( пИзмДанные, "П" ) ? _Пол()          : "";
      
         м.тДРТипДатыРождения = Найти( пИзмДанные, "Д" ) ? "СТАНДАРТ"      : "";
         м.дДРСтандартнаяДата = Найти( пИзмДанные, "Д" ) ? 'Год рождения'  : "";
         м.чДРОсобаяДатаДень = 0;
         м.чДРОсобаяДатаМесяц = 0;
         м.чДРОсобаяДатаГод = 0;
      
         # Место рождения
         Если( Найти( пИзмДанные, "М" ) )
         {
            м.тМестоРождТипМестаРождения = "СТАНДАРТ";
            м.тМестоРождНазваниеНас_гоПункта = РГород();
            м.тМестоРождРайон = РРайон();
            м.тМестоРождОбласть = РОбласть();
            м.тМестоРождСтрана = РСтрана();
         }
         иначе
            м.тМестоРождТипМестаРождения = 
            м.тМестоРождНазваниеНас_гоПункта = 
            м.тМестоРождРайон = 
            м.тМестоРождОбласть = 
            м.тМестоРождСтрана = "";
      
         м.тГражданство = Найти( пИзмДанные, "Г" ) ? Вверх( Гражданство ) : "";
      
         Если( м.тГражданство == "РОССИЯ" )
            м.тГражданство = "";
      
         м.тПризнакОтменыОтчества = Найти( пИзмДанные, "ч" ) ? "ОТМН" : "";
         м.тПризнакОтменыМестаРождения = Найти( пИзмДанные, "е" ) ? "ОТМН" : "";
      
         # Документ удостоверяющий личность
         м.тДокУдостЛичнТипДокументаКод = ТипДокументаПФ();
         м.тДокУдостЛичнНаименование = ВидДокументаПФ();
         перем пДокументСерия = Серия();
         Если( Найти( пДокументСерия, "-" ) ) # Паспорт гражданина СССР и прочее
            Разбить( Вверх( пДокументСерия ), "-", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         иначе                               # Паспорт гражданина РФ
            Разбить( Вверх( пДокументСерия ), " ", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         м.чДокУдостЛичнНомер = Номер();
         м.дДокУдостЛичнДатаВыдачи = Когда();
         м.тДокУдостЛичнКемВыдан = Кем();
      
         перем пАдресРегистрацииКодСтраны = "";
         м.тАдресРегистрации = Найти( пИзмДанные, "р" ) ? пАдресРегистрацииКодСтраны + "," + Индекс() + "," + АдресПФ() : "";

         # Если адрес для информирования состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресРегистрации, "," ) )
            м.тАдресРегистрации = "";

         перем пАдресФактическийКодСтраны = "";
         м.тАдресМестаЖительстваФактический = Найти( пИзмДанные, "ж" ) ? пАдресФактическийКодСтраны + "," + фИндекс() + "," + фАдресПФ() : "";

         # Если адрес для информирования состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресМестаЖительстваФактический, "," ) )
            м.тАдресМестаЖительстваФактический = "";

         м.тТелефоны = Найти( пИзмДанные, "л" ) ? Телефон : "";

         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';
      
         м.тСведенияПредоставлялись = ПФСведения ? "ПРЕДСТАВЛ" : "БУДУТ";
         
      # Запись Сведений о смерти
      выбор "СМРТ":
         м.чНомерДокументаВПачке = 'N п/п';
         м.тФамилия = Фамилия();
         м.тИмя = ИмяСотр();
         м.тОтчество = Отчество();
         м.тПол = _Пол();
         
         # Дата рождения
         м.тДРТипДатыРождения = "СТАНДАРТ";
         м.дДРСтандартнаяДата = 'Год рождения';
         м.чДРОсобаяДатаДень = 0;
         м.чДРОсобаяДатаМесяц = 0;
         м.чДРОсобаяДатаГод = 0;
         
         # Место рождения
         м.тМестоРождТипМестаРождения = "СТАНДАРТ";
         м.тМестоРождНазваниеНас_гоПункта = РГород();
         м.тМестоРождРайон = РРайон();
         м.тМестоРождОбласть = РОбласть();
         м.тМестоРождСтрана = РСтрана();

         м.дДатаСмерти = ПФСМЕРТЬ_ДАТА;
         м.тНомерЗаписиАкта = Вверх( ПФСМЕРТЬ_АКТНОМЕР );
         м.дДатаЗаписиАкта = ПФСМЕРТЬ_АКТДАТА;
         
         # Документ удостоверяющий личность
         м.тДокУдостЛичнТипДокументаКод = ТипДокументаПФ();
         м.тДокУдостЛичнНаименование = ВидДокументаПФ();
         перем пДокументСерия = Серия();
         Если( Найти( пДокументСерия, "-" ) ) # Паспорт гражданина СССР и прочее
            Разбить( Вверх( пДокументСерия ), "-", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         иначе                               # Паспорт гражданина РФ
            Разбить( Вверх( пДокументСерия ), " ", м.тДокУдостЛичнСерияРимскиеЦифры, м.тДокУдостЛичнСерияРусскиеБуквы );
         м.чДокУдостЛичнНомер = Номер();
         м.дДокУдостЛичнДатаВыдачи = Когда();
         м.тДокУдостЛичнКемВыдан = Кем();

         перем пАдресПоследнегоПостоянногоМестаЖительстваКодСтраны = "";
         м.тАдресПоследнегоПостоянногоМестаЖительства = пАдресПоследнегоПостоянногоМестаЖительстваКодСтраны + "," + фИндекс() + "," + фАдресПФ();

         # Если адрес для информирования состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресПоследнегоПостоянногоМестаЖительства, "," ) )
            м.тАдресПоследнегоПостоянногоМестаЖительства = "";

         Если( !м.тАдресПоследнегоПостоянногоМестаЖительства )
         {
            перем пАдресПоследнегоПостоянногоМестаЖительстваКодСтраны = "";
            м.тАдресПоследнегоПостоянногоМестаЖительства = пАдресПоследнегоПостоянногоМестаЖительстваКодСтраны + "," + Индекс() + "," + АдресПФ();

            # Если адрес состоит только из запятых, то делаем реквизит пустым
            Если( !ДопустимыеСимволы( м.тАдресПоследнегоПостоянногоМестаЖительства, "," ) )
               м.тАдресПоследнегоПостоянногоМестаЖительства = "";
         }

         м.тГдеРаботалУмерший = Вверх( ПФСМЕРТЬ_РАБОТА );
         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';

         м.дДатаРегистрации = "";
         м.дДатаЗаполнения = ТекДат();
      
      # Запись об индивидуальных сведениях застрахованного лица (СЗВ-3)
      выбор "ИН20":
         
         м.чНомерДокументаВПачке = 'N п/п';
         Разбить( Документ.ПФТИП_СВЕДЕНИЙ, " ", м.тТипФормы );
         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';
         м.тФамилия = Фамилия();
         м.тИмя = ИмяСотр();
         м.тОтчество = Отчество();

         Разбить( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, " ", м.чОтчетныйПериодКвартал );
         перем пОтчГод = Документ.ПФОТЧПЕРИОД_ГОД ? Документ.ПФОТЧПЕРИОД_ГОД : Год( дата );
         м.чОтчетныйПериодГод = пОтчГод;

         м.тНомерДоговора = ПФДОГОВОР_НОМЕР;
         м.дДатаЗаключения = ПФДОГОВОР_ДАТА;
         
         Разбить( ПФВИД_ВЫПЛАТЫ, " ", м.тВидВыплаты );

         Разбить( Документ.ПФКОД_КАТЕГОРИИОСН, "-", м.тКодКатегорииЗастрахованногоЛица, м.тНазвКатегорииЗастрахованногоЛица );
         м.тКодКатегорииЗастрахованногоЛица  = Текст( м.тКодКатегорииЗастрахованногоЛица, "ТЕКСТ в" );
         м.тНазвКатегорииЗастрахованногоЛица = Текст( м.тНазвКатегорииЗастрахованногоЛица, "ТЕКСТ в" );

         м.тВидВалютыКод = "РУБ";

         м.чНачисленоВзносаУплачРаботодателем = ПФВЗНОСЫ_ИТОГ_28;
         м.чНачисленоВзносаУплачРаботником    = ПФВЗНОСЫ_ИТОГ_1;
         м.чЗаработокВсегоЗаПериод = ПФДОХОДЫ_ПЕРИОД;
         м.чЗаработокПоВременнойНетрудоспособностиЗаПериод = ПФДОХОДЫБОЛ_ПЕРИОД;

         м.дДатаЗаполнения = ТекДат();

         # Определяем отчетный период
         # 2 - с 01.01.гггг по 30.06.гггг
         перем ДатНач = Дата( ПодСтрока( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, 7,  6 ) + пОтчГод );
         перем ДатКнц = Дата( ПодСтрока( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, 21, 6 ) + пОтчГод );
         объект мНачисления = НачисленияВедомость();
         м.чЧислоЗаписейОНачислениях = Размер( мНачисления );

         объект мСтаж = СтажВедомость();
         м.чЧислоОсновныхЗаписейОСтаже = Размер( мСтаж );
      
      # Запись об индивидуальных сведениях застрахованного лица (СЗВ-3)
      выбор "ИН30":
         м.чНомерДокументаВПачке = 'N п/п';
         Разбить( Документ.ПФТИП_СВЕДЕНИЙ, " ", м.тТипФормы );
         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';
         м.тФамилия = Фамилия();
         м.тИмя = ИмяСотр();
         м.тОтчество = Отчество();

         Разбить( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, " ", м.чОтчетныйПериодКвартал );
         перем пОтчГод = Документ.ПФОТЧПЕРИОД_ГОД ? Документ.ПФОТЧПЕРИОД_ГОД : Год( дата );
         м.чОтчетныйПериодГод = пОтчГод;

         м.тНомерДоговора = ПФДОГОВОР_НОМЕР;
         м.дДатаЗаключения = ПФДОГОВОР_ДАТА;
         
         Разбить( ПФВИД_ВЫПЛАТЫ, " ", м.тВидВыплаты );

         перем пКодКатегорииОсн, пКодКатегорииДоп;
         Разбить( Документ.ПФКОД_КАТЕГОРИИОСН, " ", пКодКатегорииОсн );
         Разбить( Документ.ПФКОД_КАТЕГОРИИДОП, " ", пКодКатегорииДоп );
         м.тКодКатегорииЗастрахованногоЛица = пКодКатегорииОсн + пКодКатегорииДоп;

         Разбить( Документ.ПФКОД_ДОП_ТАРИФА, " ", м.тКодДополнительногоТарифа );

         м.тВидВалютыКод = "РУБ";

         м.чЗаработокВсегоСНачалаГода = ПФДОХОДЫ_ИТОГ;
         м.чНачисленноВзносаСНачалаГода = ПФВЗНОСЫ_С_ИТОГ;
         м.чЗаработокВсегоЗаПериод = ПФДОХОДЫ_ПЕРИОД;
         м.чЗаработокПоВременнойНетрудоспособностиЗаПериод = ПФДОХОДЫБОЛ_ПЕРИОД;

         м.дДатаЗаполнения = ТекДат();

         # Определяем отчетный период
         # 2 - с 01.01.гггг по 30.06.гггг
         перем ДатНач = Дата( ПодСтрока( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, 7,  6 ) + пОтчГод );
         перем ДатКнц = Дата( ПодСтрока( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, 21, 6 ) + пОтчГод );
         объект мНачисления = НачисленияВедомость();
         м.чЧислоЗаписейОНачислениях = Размер( мНачисления );

         объект мСтаж = СтажВедомость();
         м.чЧислоОсновныхЗаписейОСтаже = Размер( мСтаж );

      # Запись об индивидуальных сведениях застрахованного лица СЗВ-4-1 и СЗВ-4-2
      выбор "ИН41", "ИН42":
         м.чНомерДокументаВПачке = 'N п/п';
         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';
         м.тФамилия = Фамилия();
         м.тИмя = ИмяСотр();
         м.тОтчество = Отчество();
         перем пОтчГод = Документ.ПФОТЧПЕРИОД_ГОД ? Документ.ПФОТЧПЕРИОД_ГОД : Год( дата );
         м.чРасчетныйПериодГод = пОтчГод;

         перем пАдресИнформированияКодСтраны = "";
         м.тАдресДляИнформирования = пАдресИнформированияКодСтраны + "," + Индекс( Отсылать ) + "," + АдресПФ( Отсылать );

         # Если адрес для информирования не заполнен, берется фактический адрес
         Если( !ДопустимыеСимволы( м.тАдресДляИнформирования, "," ) )
         {
            перем пАдресФактическийКодСтраны = "";
            м.тАдресДляИнформирования = пАдресФактическийКодСтраны + "," + фИндекс() + "," + фАдресПФ();
         }

         # Если адрес для информирования не заполнен, берется адрес регистрации
         Если( !ДопустимыеСимволы( м.тАдресДляИнформирования, "," ) )
         {
            перем пАдресРегистрацииКодСтраны = "";
            м.тАдресДляИнформирования = пАдресРегистрацииКодСтраны + "," + Индекс() + "," + АдресПФ();
         }

         # Если адрес для информирования состоит только из запятых, то делаем реквизит пустым
         Если( !ДопустимыеСимволы( м.тАдресДляИнформирования, "," ) )
            м.тАдресДляИнформирования = "";

         м.чНачисленоСтраховаяЧасть = Текст( ПФВЗНОСЫ_С_ИТОГ, "ДЕНЬГИ" );
         м.чНачисленоНакопительнаяЧасть = Текст( ПФВЗНОСЫ_Н_ИТОГ, "ДЕНЬГИ" );
         м.чНачисленоПоДополнительномуТарифу = Текст( ПФВЗНОСЫ_Д_ИТОГ, "ДЕНЬГИ" );

         ЗаГод( Дата( 01, 01, пОтчГод ) );
         объект оСтажВедомость = СтажВедомость();

         м.дПериодРаботыС = м.дПериодРаботыПо = 00.00.00;
         ДляВсех( Элементов( оСтажВедомость, пИндексДата ) )
            ДляВсех( Элементов( оСтажВедомость[ пИндексДата ], пИндексУсловия ) )
            {
               м.дПериодРаботыС = оСтажВедомость[ пИндексДата, пИндексУсловия, "ДатНач" ];
               м.дПериодРаботыПо = оСтажВедомость[ пИндексДата, пИндексУсловия, "ДатКнц" ];
            }

         м.чПоВременнойНетрудоспособностиМесяцев = ПФБЛ_МЕС;
         м.чПоВременнойНетрудоспособностиДней = ПФБЛ_ДНЕЙ;
         м.чОтпускБезСохраненияЗарплатыМесяцев = ПФАДМ_МЕС;
         м.чОтпускБезСохраненияЗарплатыДней = ПФАДМ_ДНЕЙ;

         м.дДатаЗаполнения = ТекДат();

         м.чЧислоОсновныхЗаписейОСтаже = Размер( оСтажВедомость );

      # Запись Сводная ведомость форм документов СЗВ-3
      выбор "СВОД":
         м.чНомерДокументаВПачке = 'N п/п';
         м.чКоличествоПачекСИсходнымиДокументамиСЗВ3 = ПФКОЛПАЧЕКСЗВ;
         м.чКоличествоИсходныхДокументовСЗВ3 = ПФКОЛДОКСЗВ;

         м.чЗадолженностьПоУплатеВзносовНаКонецОтчетногоПериода = ПФЗАДОЛЖКНЦ_С;

         перем пКодКатегорииОсн, пКодКатегорииДоп;
         Разбить( Документ.ПФКОД_КАТЕГОРИИОСН, " ", пКодКатегорииОсн );
         Разбить( Документ.ПФКОД_КАТЕГОРИИДОП, " ", пКодКатегорииДоп );
         м.тКодКатегорииЗастрахованногоЛица = пКодКатегорииОсн + пКодКатегорииДоп;

         Разбить( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, " ", м.тОтчетныйПериодКвартал );
         перем пОтчГод = Документ.ПФОТЧПЕРИОД_ГОД ? Документ.ПФОТЧПЕРИОД_ГОД : Год( дата );
         м.тОтчетныйПериодГод = пОтчГод;

         м.тВидВалютыКод = "РУБ";

         м.чЗаработокВсего = ПФДОХОДЫ_ПЕРИОД;
         м.чЗаработокПоВременнойНетрудоспособности = ПФДОХОДЫБОЛ_ПЕРИОД;
         м.чНачисленноВзносов = ПФВЗНОСЫ_С_ПЕРИОД;
         м.чПеречисленоВзносов = ПФУПЛАЧЕНО_С_ПЕРИОД;

         м.дДатаЗаполнения = ТекДат();
      
         # Определяем отчетный период
         # 2 - с 01.01.гггг по 30.06.гггг
         перем ДатНач = Дата( ПодСтрока( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, 7,  6 ) + пОтчГод );
         перем ДатКнц = Дата( ПодСтрока( Документ.ПФОТЧПЕРИОД_КВАРТАЛ, 21, 6 ) + пОтчГод );
         м.чЧислоЗаписейСодержащихОбщиеСведения = Размер( НачисленияВедомость() );

      # Запись Ведомость уплаты страховых взносов
      выбор "ВУПЛ":
         м.чНомерДокументаВПачке = 'N п/п';
         перем пОтчГод = Документ.ПФОТЧПЕРИОД_ГОД ? Документ.ПФОТЧПЕРИОД_ГОД : Год( дата );
         м.чРасчетныйПериодГод = пОтчГод;
         м.дДатаДействия = Мин( дата, Дата( 31, 12, пОтчГод ) );
         м.чКоличествоПачекСДокументамиСЗВ41иСЗВ42 = ПФКОЛПАЧЕКСЗВ;
         м.чЧислоЗастрахованныхЛицПредставленныхВФормахСЗВ41иСЗВ42 = ПФКОЛДОКСЗВ;

         Разбить( Документ.ПФКОД_КАТЕГОРИИОСН, " ", м.тКодОсновногоТарифа );
         Разбить( Документ.ПФКОД_ДОП_ТАРИФА, " ", м.тКодДополнительногоТарифа );

         м.тПризнакТарифа = ПФТАРИФ_ИТОГ;

         м.чНачисленоСтраховаяЧасть = Окр( _ВзносыС_Итог, 1 );
         м.чНачисленоНакопительнаяЧасть = Окр( _ВзносыН_Итог, 1 );
         м.чНачисленоПоДополнительномуТарифу = Окр( _ВзносыД_Итог, 1 );

         м.чЗадолженностьНаНачалоПериодаСтраховаяЧасть = Окр( _ЗадолжНачС_Итог, 1 );
         м.чЗадолженностьНаНачалоПериодаНакопительнаяЧасть = Окр( _ЗадолжНачН_Итог, 1 );
         м.чЗадолженностьНаНачалоПериодаПоДополнительномуТарифу = Окр( _ЗадолжНачД_Итог, 1 );

         м.чУплаченоСтраховаяЧасть = Окр( _УплаченоС_Итог, 1 );
         м.чУплаченоНакопительнаяЧасть = Окр( _УплаченоН_Итог, 1 );
         м.чУплаченоПоДополнительномуТарифу = Окр( _УплаченоД_Итог, 1 );

         м.чЗадолженностьНаКонецПериодаСтраховаяЧасть = Окр( _ЗадолжКнцС_Итог, 1 );
         м.чЗадолженностьНаКонецПериодаНакопительнаяЧасть = Окр( _ЗадолжКнцН_Итог, 1 );
         м.чЗадолженностьНаКонецПериодаПоДополнительномуТарифу = Окр( _ЗадолжКнцД_Итог, 1 );

         м.дДатаЗаполнения = ТекДат();

         объект мВзносы = ВзносыВедомость( пОтчГод );
         
         м.чЧислоЗаписейОЗадолженностиНаНачалоПериода = 
         м.чЧислоЗаписейОбУплатеВзносов = 
         м.чЧислоЗаписейОЗадолженностиНаКонецПериода = 0;

         ДляВсех( Элементов( мВзносы, пИндекс ) )
            ДляВсех( Элементов( мВзносы[ пИндекс ], пГод ) )
               ВыборПо( пИндекс )
               {
                  выбор "ЗАДОЛЖНАЧ": м.чЧислоЗаписейОЗадолженностиНаНачалоПериода += 1;
                  выбор "УПЛАЧЕНО":  м.чЧислоЗаписейОбУплатеВзносов += 1;
                  выбор "ЗАДОЛЖКНЦ": м.чЧислоЗаписейОЗадолженностиНаКонецПериода += 1;
               }

      # Запись Сведениях о трудовом стаже застрахованного лица за период до регистрации в системе государственного пенсионного страхования
      выбор "КОНВ":

         Функция КорректировкаСтажа( ТекстЛет, ТекстМесяцев, ТекстДней )
         {
            Пока( [ ТекстДней ] < 0 )
            {
               [ ТекстДней ] += 30;
               [ ТекстМесяцев ] -= 1;
            }
            Пока( [ ТекстДней ] >= 30 )
            {
               [ ТекстДней ] -= 30;
               [ ТекстМесяцев ] += 1;
            }
            Пока( [ ТекстМесяцев ] < 0 )
            {
               [ ТекстМесяцев ] += 12;
               [ ТекстЛет ] -= 1;
            }
            Пока( [ ТекстМесяцев ] >= 12 )
            {
               [ ТекстМесяцев ] -= 12;
               [ ТекстЛет ] += 1;
            }
         }

         м.чНомерДокументаВПачке = 'N п/п';  #
         Если( Документ.ПФВИД_КОРРЕКТИРОВКИ )
            Разбить( Документ.ПФВИД_КОРРЕКТИРОВКИ, " ", м.тТипФормы );
         иначе
            Разбить( Документ.ПФТИП_СВЕДЕНИЙ, " ", м.тТипФормы );
         'Регистрационный номер' = Подстрока( 'Регистрационный номер', 1, 11) + " " + Подстрока( 'Регистрационный номер', 13, 2);
         м.тСтраховойНомер = 'Регистрационный номер';
         м.тФамилия = Фамилия();
         м.тИмя = ИмяСотр();
         м.тОтчество = Отчество();

         # Дата рождения
         м.тДРТипДатыРождения = "СТАНДАРТ";
         м.дДРСтандартнаяДата = 'Год рождения';
         м.чДРОсобаяДатаДень = 0;
         м.чДРОсобаяДатаМесяц = 0;
         м.чДРОсобаяДатаГод = 0;

         Разбить( ПФКОД_ТЕР_УСЛОВИЙ, " ", м.тТеррУсловияНа311201 );
         м.чРайонныйКоэффициентНа311201 = ПФРАЙОНКОЭФ;

         # Просто все записи стажа отсортированные по дате начала, нужны для проверки
         м.мСтажБезСжатия = СтажВедомостьБезСжатия();
         # Рассчитываем итоги по стажу
         м.мСтаж = СтажВедомость( 1 );
         Очистить( м.мТеррУсл );
         Очистить( м.мОсобУсл );
         Очистить( м.мВыслЛет );
         м.чТрудовойСтажЛет = м.чТрудовойСтажМесяцев = м.чТрудовойСтажДней = 0;
         м.чЗаписейСтажаТрудДеят = м.чЗаписейСтажаТеррУсл = м.чЗаписейСтажаОсобУсл = м.чЗаписейСтажаВыслЛет = 0;
         
         Перем пИндексДатаОргВид;
         Объект мПредСтаж, мПредСтажТУ, мПредСтажОУ, мПредСтажВЛ;
         Перем  пПредКнц = пПредКнцТУ = пПредКнцОУ = пПредКнцВЛ = 00.00.00;
         Число Д1, М1, Г1, Д2, М2, Г2;
         ДляВсех( Элементов( м.мСтаж, пИндексДатаОргВид ) )
         {
            м.чЗаписейСтажаТрудДеят++; # ДЕЯТ
            ДляВсех( Элементов( м.мСтаж[пИндексДатаОргВид], пИндексДата ) )
            {
               перем пЗаписьДопСтажа = -1;
               ДляВсех( Элементов( м.мСтаж[ пИндексДатаОргВид, пИндексДата ], пИндексУсловия ) )
               {
                  Установить( м.мСтаж[ пИндексДатаОргВид, пИндексДата, пИндексУсловия ] );
                  # ***** Общий стаж по основным записям стажа
                  пЗаписьДопСтажа++;
                  Если( !пЗаписьДопСтажа ) 
                  {
                     # Если это продолжение того стажа (перевод в той же организации)
                     Если( Есть( мПредСтаж.ДатНач ) ?
                            ( мПредСтаж.Организация     == Организация
                            и мПредСтаж.ВидДеятельности == ВидДеятельности
                            и пПредКнц + 1 == ДатНач ) : 0 )
                     {  # ничего не делаем, продолжаем собирать стаж
                        пПредКнц = ДатКнц;
                     }
                     # Если это новая работа после увольнения или самая первая запись
                     Иначе
                     {
                        Если( Есть( мПредСтаж.ДатНач ) )
                        {  # Считаем накопленный стаж
                           Разбить( Текст( мПредСтаж.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
                           Разбить( Текст( пПредКнц,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
                           м.чТрудовойСтажЛет     += Г2 - Г1;
                           м.чТрудовойСтажМесяцев += М2 - М1;
                           м.чТрудовойСтажДней    += Д2 - Д1;
                           Если( мПредСтаж.ВидДеятельности == "РАБОТА" ) м.чТрудовойСтажДней += 1;
                        }
                        # Запоминаем начало нового
                        мПредСтаж = м.мСтаж[ пИндексДатаОргВид, пИндексДата, пИндексУсловия ];
                        пПредКнц  = ДатКнц;
                     }
                  }
                  # ***** Льготный стаж по территориальным условиям труда
                  #  Если это продолжение того стажа (перевод в той же организации)
                  Если( Есть( мПредСтажТУ.ДатНач ) ?
                         ( мПредСтажТУ.Организация == Организация
                         и мПредСтажТУ.ТеррУсл == ТеррУсл
                         и пПредКнцТУ + 1 == ДатНач ) : 0 )
                  {  # ничего не делаем, продолжаем собирать стаж
                     пПредКнцТУ = ДатКнц;
                  }
                  # Если это новая работа после увольнения или самая первая запись
                  Иначе
                  {
                     Если( Есть( мПредСтажТУ.ДатНач ) )
                     {  # Считаем накопленный стаж
                        Если( мПредСтажТУ.ТеррУсл )
                        {
                           Разбить( Текст( мПредСтажТУ.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
                           Разбить( Текст( пПредКнцТУ,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
                           м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Условия" ]    = мПредСтажТУ.ТеррУсл;
                           м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Лет" ]       += Г2 - Г1;
                           м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Месяцев" ]   += М2 - М1;
                           м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Дней" ]      += Д2 - Д1 + 1; 
                           КорректировкаСтажа( "м.мТеррУсл." + мПредСтажТУ.ТеррУсл + ".Лет",
                                               "м.мТеррУсл." + мПредСтажТУ.ТеррУсл + ".Месяцев",
                                               "м.мТеррУсл." + мПредСтажТУ.ТеррУсл + ".Дней" );
                        }
                     }
                     # Запоминаем начало нового
                     мПредСтажТУ = м.мСтаж[ пИндексДатаОргВид, пИндексДата, пИндексУсловия ];
                     пПредКнцТУ  = ДатКнц;
                  }
                  # ***** Льготный стаж по особым условиям труда
                  Перем ДопОУ = 0; # Стаж указан в доп сведениях
                  Если( ( Число(ИсчТрудСтажаДоп0) или Число(ИсчТрудСтажаДоп1) или Число(ИсчТрудСтажаДоп2) ) 
                      и ИсчТрудСтажа != "ВОДОЛАЗ" ) # Для водолазов там указываются часы, минуты
                     ДопОУ = 1;
                  #  Если это продолжение того стажа (перевод в той же организации)
                  Если( Есть( мПредСтажОУ.ДатНач ) ?
                         ( !ДопОУ
                         и мПредСтажОУ.Организация == Организация
                         и мПредСтажОУ.ОсобУсл == ОсобУсл
                         и пПредКнцОУ + 1 == ДатНач ) : 0 )
                  {  # ничего не делаем, продолжаем собирать стаж
                     пПредКнцОУ = ДатКнц;
                  }
                  # Если это новая работа после увольнения или самая первая запись
                  Иначе
                  {
                     Если( Есть( мПредСтажОУ.ДатНач ) )
                     {  # Считаем накопленный стаж
                        Если( мПредСтажОУ.ОсобУсл )
                        {
                           Разбить( Текст( мПредСтажОУ.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
                           Разбить( Текст( пПредКнцОУ,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
                           м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Условия" ]    = мПредСтажОУ.ОсобУсл;
                           м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Лет" ]       += Г2 - Г1;
                           м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Месяцев" ]   += М2 - М1;
                           м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Дней" ]      += Д2 - Д1 + 1; 
                           КорректировкаСтажа( "м.мОсобУсл." + мПредСтажОУ.ОсобУсл + ".Лет",
                                               "м.мОсобУсл." + мПредСтажОУ.ОсобУсл + ".Месяцев",
                                               "м.мОсобУсл." + мПредСтажОУ.ОсобУсл + ".Дней" );
                        }
                     }
                     Если( !ДопОУ )
                     {
                        # Запоминаем начало нового
                        мПредСтажОУ = м.мСтаж[ пИндексДатаОргВид, пИндексДата, пИндексУсловия ];
                        пПредКнцОУ  = ДатКнц;
                     }
                     Иначе
                     {  
                        Если( ОсобУсл )
                        {
                           # Складываем текущий стаж
                           м.мОсобУсл[ ОсобУсл, "Условия" ]    = ОсобУсл;
                           м.мОсобУсл[ ОсобУсл, "Лет" ]       += Число(ИсчТрудСтажаДоп0);
                           м.мОсобУсл[ ОсобУсл, "Месяцев" ]   += Число(ИсчТрудСтажаДоп1);
                           м.мОсобУсл[ ОсобУсл, "Дней" ]      += Число(ИсчТрудСтажаДоп2);
                           КорректировкаСтажа( "м.мОсобУсл." + ОсобУсл + ".Лет",
                                               "м.мОсобУсл." + ОсобУсл + ".Месяцев",
                                               "м.мОсобУсл." + ОсобУсл + ".Дней" );
                        }
                        # Продолжения у него не может быть
                        мПредСтажОУ = Нет;
                        пПредКнцОУ  = 00.00.00;
                     }
                  }
                  # ***** Льготный стаж по выслуге лет
                  Перем ДопВЛ = 0; # Стаж указан в доп сведениях
                  Если( Найти( Вверх(ВыслЛетДоп1), "М" ) или 
                        Найти( Вверх(ВыслЛетДоп2), "Д" ) )
                     ДопВЛ = 1;
                  #  Если это продолжение того стажа (перевод в той же организации)
                  Если( Есть( мПредСтажВЛ.ДатНач ) ?
                         ( !ДопВЛ
                         и мПредСтажВЛ.Организация == Организация
                         и мПредСтажВЛ.ВыслЛет == ВыслЛет
                         и пПредКнцВЛ + 1 == ДатНач ) : 0 )
                  {  # ничего не делаем, продолжаем собирать стаж
                     пПредКнцВЛ = ДатКнц;
                  }
                  # Если это новая работа после увольнения или самая первая запись
                  Иначе
                  {
                     Если( Есть( мПредСтажВЛ.ДатНач ) )
                     {  # Считаем накопленный стаж
                        Если( мПредСтажВЛ.ВыслЛет )
                        {
                           Разбить( Текст( мПредСтажВЛ.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
                           Разбить( Текст( пПредКнцВЛ,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
                           м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Условия" ]    = мПредСтажВЛ.ВыслЛет;
                           м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Лет" ]       += Г2 - Г1;
                           м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Месяцев" ]   += М2 - М1;
                           м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Дней" ]      += Д2 - Д1 + 1; 
                           КорректировкаСтажа( "м.мВыслЛет." + мПредСтажВЛ.ВыслЛет + ".Лет",
                                               "м.мВыслЛет." + мПредСтажВЛ.ВыслЛет + ".Месяцев",
                                               "м.мВыслЛет." + мПредСтажВЛ.ВыслЛет + ".Дней" );
                        }
                     }
                     Если( !ДопВЛ )
                     {
                        # Запоминаем начало нового
                        мПредСтажВЛ = м.мСтаж[ пИндексДатаОргВид, пИндексДата, пИндексУсловия ];
                        пПредКнцВЛ  = ДатКнц;
                     }
                     Иначе
                     {  
                        Если( ВыслЛет )
                        {
                           # Складываем текущий стаж
                           м.мВыслЛет[ ВыслЛет, "Условия" ]    = ВыслЛет;
                           м.мВыслЛет[ ВыслЛет, "Лет" ]       += 0;
                           м.мВыслЛет[ ВыслЛет, "Месяцев" ]   += Число(ВыслЛетДоп1);
                           м.мВыслЛет[ ВыслЛет, "Дней" ]      += Число(ВыслЛетДоп2);
                           КорректировкаСтажа( "м.мВыслЛет." + ВыслЛет + ".Лет",
                                               "м.мВыслЛет." + ВыслЛет + ".Месяцев",
                                               "м.мВыслЛет." + ВыслЛет + ".Дней" );
                        }
                        # Продолжения у него не может быть
                        мПредСтажВЛ = Нет;
                        пПредКнцВЛ  = 00.00.00;
                     }
                  }
               }
            }
         }
         # Общий трудовой стаж (от последней записи)
         Если( Есть( мПредСтаж.ДатНач ) )
         {
            Разбить( Текст( мПредСтаж.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
            Разбить( Текст( пПредКнц,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
            м.чТрудовойСтажЛет     += Г2 - Г1;
            м.чТрудовойСтажМесяцев += М2 - М1;                    
            м.чТрудовойСтажДней    += Д2 - Д1;
            Если( мПредСтаж.ВидДеятельности == "РАБОТА" ) м.чТрудовойСтажДней += 1;
         }
         КорректировкаСтажа( "м.чТрудовойСтажЛет", "м.чТрудовойСтажМесяцев", "м.чТрудовойСтажДней" );
         # Льготный стаж по территориальным условиям труда (от последней записи)
         Если( Есть( мПредСтажТУ.ДатНач ) )
         {  # Считаем накопленный стаж
            Если( мПредСтажТУ.ТеррУсл )
            {
               Разбить( Текст( мПредСтажТУ.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
               Разбить( Текст( пПредКнцТУ,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
               м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Условия" ]    = мПредСтажТУ.ТеррУсл;
               м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Лет" ]       += Г2 - Г1;
               м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Месяцев" ]   += М2 - М1;
               м.мТеррУсл[ мПредСтажТУ.ТеррУсл, "Дней" ]      += Д2 - Д1 + 1; 
               КорректировкаСтажа( "м.мТеррУсл." + мПредСтажТУ.ТеррУсл + ".Лет",
                                   "м.мТеррУсл." + мПредСтажТУ.ТеррУсл + ".Месяцев",
                                   "м.мТеррУсл." + мПредСтажТУ.ТеррУсл + ".Дней" );
            }
         }
         # Льготный стаж по особым условиям труда (от последней записи)
         Если( Есть( мПредСтажОУ.ДатНач ) )
         {  # Считаем накопленный стаж
            Если( мПредСтажОУ.ОсобУсл )
            {
               Разбить( Текст( мПредСтажОУ.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
               Разбить( Текст( пПредКнцОУ,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
               м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Условия" ]    = мПредСтажОУ.ОсобУсл;
               м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Лет" ]       += Г2 - Г1;
               м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Месяцев" ]   += М2 - М1;
               м.мОсобУсл[ мПредСтажОУ.ОсобУсл, "Дней" ]      += Д2 - Д1 + 1; 
               КорректировкаСтажа( "м.мОсобУсл." + мПредСтажОУ.ОсобУсл + ".Лет",
                                   "м.мОсобУсл." + мПредСтажОУ.ОсобУсл + ".Месяцев",
                                   "м.мОсобУсл." + мПредСтажОУ.ОсобУсл + ".Дней" );
            }
         }
         # Льготный стаж по выслуге лет (от последней записи)
         Если( Есть( мПредСтажВЛ.ДатНач ) )
         {  # Считаем накопленный стаж
            Если( мПредСтажВЛ.ВыслЛет )
            {
               Разбить( Текст( мПредСтажВЛ.ДатНач, "(дд.мм.гггг)" ), ".", Д1, М1, Г1 );
               Разбить( Текст( пПредКнцВЛ,         "(дд.мм.гггг)" ), ".", Д2, М2, Г2 );
               м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Условия" ]    = мПредСтажВЛ.ВыслЛет;
               м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Лет" ]       += Г2 - Г1;
               м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Месяцев" ]   += М2 - М1;
               м.мВыслЛет[ мПредСтажВЛ.ВыслЛет, "Дней" ]      += Д2 - Д1 + 1; 
               КорректировкаСтажа( "м.мВыслЛет." + мПредСтажВЛ.ВыслЛет + ".Лет",
                                   "м.мВыслЛет." + мПредСтажВЛ.ВыслЛет + ".Месяцев",
                                   "м.мВыслЛет." + мПредСтажВЛ.ВыслЛет + ".Дней" );
            }
         }
         м.чЗаписейСтажаТеррУсл = Размер( м.мТеррУсл );
         м.чЗаписейСтажаОсобУсл = Размер( м.мОсобУсл );
         м.чЗаписейСтажаВыслЛет = Размер( м.мВыслЛет );

         м.дДатаЗаполнения = ТекДат();
   }

   #ВывестиСтатус("");
   Вернуть( м );
}

Функция СложитьМассивы( Массив1, Массив2 )
{
   перем пИндекс;
   ДляВсех( Элементов( Массив1, пИндекс ) )
      Массив2[ пИндекс ] = Массив1[ пИндекс ];
   Вернуть( Массив2 );
}

Функция ФормированиеПачекСЗВ4()
{
   перем ДатНач, ДатКнц;
   перем пДатаГод = Дата( 01, Месяц( ТекДат ) - 6, Год( ТекДат ) );
   ЗаГод( пДатаГод );
   
   перем пЕстьСЗВ41 = пЕстьСЗВ42 = пЕстьСЗВ41П = пЕстьСЗВ42П = 0;
   объект оВедомостьСЗВ41, оВедомостьСЗВ42, оВедомость;
   объект оВедомостьСЗВ41П, оВедомостьСЗВ42П; # На вышедших на пенсию, содержащие корректирующие сведения, формируются отдельной пачкой

   # Начальная инициализации корневой папки
   Объект оПапка = Объект("Документ");
   'оПапка.Тип документа' = "Кадры";
   Корень( оПапка, "Папки" );
   Узел( оПапка, "Папки" );
   Найти( оПапка, "Папки" );
   # Начальная инициализация отдела
   Объект оОтдел = Объект( "Сотрудники" );

   Объект оДиалог = СоздатьДиалог( "Выбор папки ведомостей" );
   Связать( оДиалог.Папка, оПапка );
   Если( !ВыполнитьДиалог( оДиалог ) )
      Вернуть 0;
   Если( Есть( оДиалог.Папка ) == 1 ) оПапка = оДиалог.Папка;
   Если( Есть( оДиалог.Отдел ) == 1 ) оОтдел = оДиалог.Отдел;
            
   Перем Нпп = пБезНом = 0;
   Перем пНовНомер = ДатьНомерДляНумерации( "Ведомость", 'оПапка.Группа нумерации' );
   Лицо = Объект("Сотрудники");
   Пока( Следующий( Лицо, "ФИО" ) )
      Если( СотрИзОтдела( Лицо, оОтдел ) )
      {  
         Установить( Лицо );
         # Включем всех у кого Принят, Уволен попадают в период, либо были начислены взносы, независимо от номера ПФ
         Перем пФлагВключать = ( Принят <= ДатКнц и Уволен >= ДатНач );
         Если( !пФлагВключать ) пФлагВключать = ЗаПериодРасчета( "ЕПФС+ЕПФН" ) ? 1 : 0;
         Если(  пФлагВключать )
         {
            Если( !Найти( "0123456789", ПодСтрока( 'Регистрационный номер', 1, 1 ) ) )
               пБезНом++;
            Нпп++;
            ВывестиСтатус( Нпп + " " + ФИО + "..." );
            объект мСтаж = Стаж();
            перем пПериод;
            перем пТипСЗВ4 = 2;
            ДляВсех( Элементов( мСтаж, пПериод ) )
            {
               Установить( мСтаж[ пПериод ] );
               Если( УслТруда или Код или ИсчТрудСтаж или ( Метка и Метка != " " ) или ВыслугаЛет или ТеррУсл )
                  пТипСЗВ4 = 1;
               Установить();
            }
            Установить( Лицо );
            Если( Размер( мСтаж ) > 1 ) пТипСЗВ4 = 1;
            
            Перем пФлагПенс = "";
            Если( Год( НаПенсию ) == Год( ДатКнц ) и 'Вид пенсии' != "Нет пенсии" )
               пФлагПенс = "П"; # Будет в отдельной пачке
   
            оВедомость = [ "оВедомостьСЗВ4" + пТипСЗВ4 + пФлагПенс ];
   
            Если( ![ "пЕстьСЗВ4" + пТипСЗВ4 + пФлагПенс ] )
            {
               # Создать ведомость СЗВ-4-1 или СЗВ-4-2
               оВедомость = Выборка( "Ведомости" );
               оВедомость.Связать( "Папки", оПапка );
               'оВедомость.Группа нумерации' = 'оПапка.Группа нумерации';
               оВедомость.Номер = пНовНомер;
               пНовНомер++;
               оВедомость.Дата = ДатКнц;
               оВедомость.ШПЗ = "СЗВ--4-" + пТипСЗВ4;
               оВедомость.ПФКОД_КАТЕГОРИИОСН = "НР";
               оВедомость.ПФКОД_ДОП_ТАРИФА = "";
               оВедомость.ПФКОД_ТЕР_УСЛОВИЙ = "";
               оВедомость.ПФТИП_СВЕДЕНИЙ      = пФлагПенс ? " " : "ИСХД";
               оВедомость.ПФВИД_КОРРЕКТИРОВКИ = пФлагПенс ? "КОРР" : "";
               оВедомость.ПФОТЧПЕРИОД_ГОД = Год( ДатКнц );
               Добавить( оВедомость );
               # Делаем все родные параметры ручными, чтобы они не удалялись при закрытии.
               Если( СделатьПараметрыРучными( оВедомость ) )
                  Сохранить( оВедомость );
               Установить( Лицо );
            }
            [ "пЕстьСЗВ4" + пТипСЗВ4 + пФлагПенс ] += 1;
            [ "оВедомостьСЗВ4" + пТипСЗВ4 + пФлагПенс ] = оВедомость;
   
            Объект оСЗВ4наименования = Выборка( "СЗВ--4-" + пТипСЗВ4 + " наименования" );
            оСЗВ4наименования.Связать( "Ведомость-Список", оВедомость );
            оСЗВ4наименования.дата = ДатКнц;
            'оСЗВ4наименования.N п/п' = [ "пЕстьСЗВ4" + пТипСЗВ4 + пФлагПенс ];
            оСЗВ4наименования.Связать( "Лица-Список", Лицо );
            Добавить( оСЗВ4наименования );
   
            РасчетСЗВ4( оСЗВ4наименования, мСтаж, пДатаГод );
            Сохранить( оСЗВ4наименования );
   
            Если( [ "пЕстьСЗВ4" + пТипСЗВ4 + пФлагПенс ] >= 200 )
               [ "пЕстьСЗВ4" + пТипСЗВ4 + пФлагПенс ] = 0;
         }
         Установить();
      }
   Если( пБезНом ) Сообщить("У " + пБезНом + " лиц не заполнен страховой номер!");
   ВывестиСтатус("");
}

Функция РасчетЗаписейСЗВ4()
{
   Если( !ДаНет( "Произвести расчет страховых взносов и стажей по данным зарплаты?" ) )
      Вернуть 0;
   объект мРасчет = РасчетПФ( "ПАЧК" );
   
   перем ДатНач, ДатКнц;
   ЗаГод( Дата( 31, 12, мРасчет.чРасчетныйПериодГод ) );
   ДатКнц = Мин( ДатКнц, Дата ); # Не полный год для назначеия пенсии
   ДляВсех( Наименований )
   {
      ВывестиСтатус('N п/п' + " " + Название);
      ДляВсех( Записей( "Список стажей", Наим ) )
         Удалить( Запись );
      РасчетСЗВ4( Наим, Стаж(), ДатКнц );
      Сохранить( Наим );
   }
   ВывестиСтатус("");
}

Функция РасчетНаимСЗВ4()
# Вызывается по кнопке в наименовании ведомости
{
   ДляВсех( Записей( "Список стажей", '.' ) )
      Удалить( Запись );
   Объект оДок = 'Ведомость-Список.Документ_';
   ЗаГод( Дата( 31, 12, оДок.ПФОТЧПЕРИОД_ГОД ? оДок.ПФОТЧПЕРИОД_ГОД : Год( оДок.Дата ) ) );
   ДатКнц = Мин( ДатКнц, оДок.Дата ); # Не полный год для назначения пенсии
   РасчетСЗВ4( '.', Стаж(), ДатКнц );
   Сохранить( '.' );
}

Функция РасчетСЗВ4( оСЗВ4наим, мСтаж, пДатаГод )
# Рассчитывает запись по 1 сотруднику в ведомости СЗВ-4-1,2
# Заполняет сумму взносов, количество больничных, адм отпусков и записи о стаже
# Параметры: оСЗВ4наим - (объект) уже созданная запись ведомости СЗВ-4-1 или 2
#            мСтаж     - (объект) массив со стажами
#            пДатаГод  - (дата) год, определяющей отчетный период
# Вызывается только из РасчетЗаписейСЗВ4() и ФормированиеПачекСЗВ4()
{
   перем ДатНач, ДатКнц;
   СНачГода( пДатаГод );
   ДатКнц = пДатаГод;

   оСЗВ4наим.ПФВЗНОСЫ_С_ИТОГ = ЗаПериодРасчета( "ЕПФС" );
   оСЗВ4наим.ПФВЗНОСЫ_Н_ИТОГ = ЗаПериодРасчета( "ЕПФН" );

   # Рассчитываем больничные по документам
   # Если сотрудник заболел, но больничный еще не принес, то метка " "
   # В след мес при предъявлении больничного оформляется еще один больничный с меткой "Б"
   перем пБольничныеДни = пБольничныеМесяцы = 0;
   ДляВсех( БольничныхСотр() )
      Если( Метка == "Б" и !Найти( Вверх('ВНУ-Расчет.Название'), "БЕРЕМЕН" ) ) # Кроме больничных по беременности и родам
      {
         Перем пНач = Макс( РасчетСЗВ4.ДатНач, ДатНач); # Находим часть больничного
         Перем пКнц = Мин(  РасчетСЗВ4.ДатКнц, ДатКнц); # приходящийся на отчетный период
         Если( пНач <= пКнц )
            пБольничныеДни += пКнц - пНач + 1;
      }
   Пока( пБольничныеДни >= 30 )
   {
      пБольничныеДни -= 30;
      пБольничныеМесяцы += 1;
   }
   # Рассчитываем административные отпуска по табелям и отпускам с меткой "А"
   объект мАдмДни; # Массив в котором перечислены административные дни
   Очистить( мАдмДни );
   # по Отпускам
   ДляВсех( ОтпусковСотр() )
      Если( Метка == "А")
      {
         Перем пНач = Макс( РасчетСЗВ4.ДатНач, ДатНач); # Находим часть отпуска
         Перем пКнц = Мин(  РасчетСЗВ4.ДатКнц, ДатКнц); # приходящийся на отчетный период
         Пока( пНач <= пКнц )
         {
            мАдмДни[ пНач ] = "А";
            пНач++;
         }
      }
   # по Табелям
   перем пМесяц = 1;
   Пока( пМесяц <= Месяц( пДатаГод ) )
   {  # Внимание, в табеле меткой "А" должны быть отмечены и субботы и воскресенья, иначе будет направильное количество дней
      ДляВсех( Табелей( Дата( 01, пМесяц, Год( пДатаГод ) ) ) )
         {
            перем пДень;
            ДляВсех( Элементов( Календарь, пДень ) )
               Если( Найти( Вверх( Календарь[ пДень ] ), "А" ) )
                  мАдмДни[ Дата( пДень, пМесяц, Год( пДатаГод ) ) ] = "А";
         }
      пМесяц++;
   }
   перем пАдминистративныеДни = пАдминистративныеМесяцы = 0;
   пАдминистративныеДни = Размер( мАдмДни );
   Пока( пАдминистративныеДни >= 30 )
   {
      пАдминистративныеДни -= 30;
      пАдминистративныеМесяцы += 1;
   }
   
   оСЗВ4наим.ПФБЛ_МЕС  = пБольничныеМесяцы;
   оСЗВ4наим.ПФБЛ_ДНЕЙ = пБольничныеДни;
   оСЗВ4наим.ПФАДМ_МЕС  = пАдминистративныеМесяцы;
   оСЗВ4наим.ПФАДМ_ДНЕЙ = пАдминистративныеДни;
   
   перем пПериод;
   ДляВсех( Элементов( мСтаж, пПериод ) )
   {
      Установить( мСтаж[ пПериод ] );
      
      объект оСписокСтажей = Выборка( "Список стажей" );
      оСписокСтажей.Связать( "Образование-Список", оСЗВ4наим );
      
      # Начало периода
      'оСписокСтажей.Дата начала' = ДатНач;
      
      # Конец периода
      'оСписокСтажей.Дата окончания' = ДатКнц;
   
      # Территориальные условия (код)
      'оСписокСтажей.ОКПДТР' = ТеррУсл;
   
      # Районный коэффициент
      'оСписокСтажей.Сумма' = 0;
   
      # Особые условия труда (код)
      'оСписокСтажей.Стаж0' = УслТруда;
   
      # Код позиции списка
      'оСписокСтажей.N диплома' = Код;
   
      # Исчисление страхового стажа
      'оСписокСтажей.Стаж1' = ИсчТрудСтаж;
   
      # Месяцев, Дней, Пребывание водолаза под водой
      'оСписокСтажей.Специальность' = "0;0;" + Метка;
   
      # Условия досрочного назначения пенсии
      'оСписокСтажей.Стаж2' = ВыслугаЛет;
   
      # Часов, Минут, Доля
      'оСписокСтажей.Факультет' = "0;0;0";
   
      Добавить( оСписокСтажей );
   
      Установить();
   }
}

Функция ФормированиеЗаписейАДВ10()
{
   ДляВсех( Записей( "АДВ-10 наименования", '.' ) )
      Удалить( Запись );
   
   Объект мСвод;
   ДляВсех( Оснований( "Ведомость" ) )
   {
      Перем пКодК, пКодКОсн, пКодКДоп;
      Разбить( ПФКОД_КАТЕГОРИИОСН, " ", пКодКОсн );
      Разбить( ПФКОД_КАТЕГОРИИДОП, " ", пКодКДоп );
      пКодК = пКодКОсн + "," + пКодКДоп;
      мСвод[пКодК].ПФКОЛПАЧЕКСЗВ    += 1;
      ДляВсех( Наименований )
      {
         мСвод[пКодК].ПФКОЛДОКСЗВ += 1;
         мСвод[пКодК].ПФДОХОДЫ_01 += ПФДОХОДЫ_01;
         мСвод[пКодК].ПФДОХОДЫ_02 += ПФДОХОДЫ_02;
         мСвод[пКодК].ПФДОХОДЫ_03 += ПФДОХОДЫ_03;
         мСвод[пКодК].ПФДОХОДЫ_04 += ПФДОХОДЫ_04;
         мСвод[пКодК].ПФДОХОДЫ_05 += ПФДОХОДЫ_05;
         мСвод[пКодК].ПФДОХОДЫ_06 += ПФДОХОДЫ_06;
         мСвод[пКодК].ПФДОХОДЫ_07 += ПФДОХОДЫ_07;
         мСвод[пКодК].ПФДОХОДЫ_08 += ПФДОХОДЫ_08;
         мСвод[пКодК].ПФДОХОДЫ_09 += ПФДОХОДЫ_09;
         мСвод[пКодК].ПФДОХОДЫ_10 += ПФДОХОДЫ_10;
         мСвод[пКодК].ПФДОХОДЫ_11 += ПФДОХОДЫ_11;
         мСвод[пКодК].ПФДОХОДЫ_12 += ПФДОХОДЫ_12;
         мСвод[пКодК].ПФДОХОДЫ_ПЕРИОД    += ПФДОХОДЫ_ПЕРИОД;
         мСвод[пКодК].ПФДОХОДЫБОЛ_01 += ПФДОХОДЫБОЛ_01;
         мСвод[пКодК].ПФДОХОДЫБОЛ_02 += ПФДОХОДЫБОЛ_02;
         мСвод[пКодК].ПФДОХОДЫБОЛ_03 += ПФДОХОДЫБОЛ_03;
         мСвод[пКодК].ПФДОХОДЫБОЛ_04 += ПФДОХОДЫБОЛ_04;
         мСвод[пКодК].ПФДОХОДЫБОЛ_05 += ПФДОХОДЫБОЛ_05;
         мСвод[пКодК].ПФДОХОДЫБОЛ_06 += ПФДОХОДЫБОЛ_06;
         мСвод[пКодК].ПФДОХОДЫБОЛ_07 += ПФДОХОДЫБОЛ_07;
         мСвод[пКодК].ПФДОХОДЫБОЛ_08 += ПФДОХОДЫБОЛ_08;
         мСвод[пКодК].ПФДОХОДЫБОЛ_09 += ПФДОХОДЫБОЛ_09;
         мСвод[пКодК].ПФДОХОДЫБОЛ_10 += ПФДОХОДЫБОЛ_10;
         мСвод[пКодК].ПФДОХОДЫБОЛ_11 += ПФДОХОДЫБОЛ_11;
         мСвод[пКодК].ПФДОХОДЫБОЛ_12 += ПФДОХОДЫБОЛ_12;
         мСвод[пКодК].ПФДОХОДЫБОЛ_ПЕРИОД += ПФДОХОДЫБОЛ_ПЕРИОД;
      }
   }
   Нпп = 0;
   ДляВсех( Элементов( мСвод, пКодК ) )
   {
      оАДВ10наим = Выборка( "АДВ-10 наименования" );
      оАДВ10наим.Связать( "Ведомость-Список", '.' );
      Нпп++;
      'оАДВ10наим.N п/п' = Нпп;
      оАДВ10наим.ПФКОД_КАТЕГОРИИОСН = пКодК;
      Разбить( пКодК, ",", оАДВ10наим.ПФКОД_КАТЕГОРИИОСН, оАДВ10наим.ПФКОД_КАТЕГОРИИДОП );
      ДляВсех( Элементов( мСвод[пКодК], пИндекс ) )
         оАДВ10наим[пИндекс] = мСвод[пКодК, пИндекс];
      Если( Нпп == 1 ) # Справочно в целом по организации заполняется только для первой записи (ведомости)
      {
         # Определяем отчетный период
         # 2 - с 01.01.гггг по 30.06.гггг
         Перем пГод = .ПФОТЧПЕРИОД_ГОД ? .ПФОТЧПЕРИОД_ГОД : Год( Дата );
         Перем МесКнц = Число( ПодСтрока( .ПФОТЧПЕРИОД_КВАРТАЛ, 24, 2 ) );
         Перем М = 1;
         Пока( М <= МесКнц)
         {
            перем ДатНач, ДатКнц;
            ЗаМесяц( Дата( 31, М, пГод ) );
            тМ = Текст( М > 9 ? М : "0" + М );
            оАДВ10наим["ПФТАРИФ_"+тМ] = Число( Константа( ДатКнц, "РегрессивныйЕСН" ) ) ? "Р" : "М";
            оАДВ10наим["ПФСРЕДЧИСЛ_"+тМ] = Число( Константа( ДатКнц, "СРЕДЧИСЛМЕС") );
            # Начислено взносов и перечислено взносов не заполняется
            # поскольку это в старом плане счетов, у клиентов новые базы 1.9 и этих данных нет
            # и расчет получился бы очень сложным
            М++;
         }
      
      }
      Добавить( оАДВ10наим );
   }
}

Функция ФормированиеЗаписейАДВ11()
{
   Перем пНачПоПачкам;
   ВыборПо( Меню("Считать начисления по пачкам\nпо всем сотрудникам за период (для назначения пенсии)") )
   {
      Выбор 1: пНачПоПачкам = 1;  # Рекомендуется при ручном заполнении и для сверки
      Выбор 2: пНачПоПачкам = 0;  # Рекомендуется при назначении пенсии и корректировках
      Выбор 0: Вернуть 0;
   }
   
   ДляВсех( Записей( "АДВ-11 наименования", '.' ) )
      Удалить( Запись );
   
   объект мРасчет = РасчетПФ( "ПАЧК" );
   
   перем ДатНач, ДатКнц;
   ЗаГод( Дата( 31, 12, мРасчет.чРасчетныйПериодГод ) );
   # Если дата документа меньше конца отчетного периода (может быть при назначении пенсии)
   # то учитываем начисления и платежи до указанной даты
   ДатКнц = Мин( Дата, ДатКнц );

   оАДВ11наименования = Выборка( "АДВ-11 наименования" );
   оАДВ11наименования.Связать( "Ведомость-Список", '.' );
   
   'оАДВ11наименования.N п/п' = 1;

   оАДВ11наименования.ПФКОЛПАЧЕКСЗВ = оАДВ11наименования.ПФКОЛДОКСЗВ = 
   оАДВ11наименования.ПФВЗНОСЫ_С_ПЕРИОД = оАДВ11наименования.ПФВЗНОСЫ_Н_ПЕРИОД = оАДВ11наименования.ПФВЗНОСЫ_Д_ПЕРИОД = 0;
   ДляВсех( Оснований( "Ведомость" ) )
   {
      оАДВ11наименования.ПФКОЛПАЧЕКСЗВ += 1;
      ДляВсех( Наименований )
      {
         оАДВ11наименования.ПФКОЛДОКСЗВ += 1;
         Если( пНачПоПачкам )
         {
            оАДВ11наименования.ПФВЗНОСЫ_С_ПЕРИОД += ПФВЗНОСЫ_С_ИТОГ;
            оАДВ11наименования.ПФВЗНОСЫ_Н_ПЕРИОД += ПФВЗНОСЫ_Н_ИТОГ;
            оАДВ11наименования.ПФВЗНОСЫ_Д_ПЕРИОД += ПФВЗНОСЫ_Д_ИТОГ;
         }
      }
   }
   оАДВ11наименования.ПФУПЛАЧЕНО_С_ПЕРИОД = ОД( 69ПФ_СЧ );
   оАДВ11наименования.ПФУПЛАЧЕНО_Н_ПЕРИОД = ОД( 69ПФ_НЧ );

   оАДВ11наименования.ПФТАРИФ_ИТОГ = Число( Константа( ДатКнц, "РегрессивныйЕСН" ) ) ? "Р" : "М";

   Если( !пНачПоПачкам )
   {
      # Если назначение пенсии, то начисления за месяц даты документа не нужно учитывать
      Если( ДатКнц != Дата( 31, 12, Год( ДатКнц ) ) )
         Если( !ДаНет("Включать начисления за " + МесяцПрописью(ДатКнц) + "?", 2) )
            ДатКнц = Дата( 31, Месяц( ДатКнц )-1, Год( ДатКнц ) );
      оАДВ11наименования.ПФВЗНОСЫ_С_ПЕРИОД = ИтогоНУ( "ЕПФС" );
      оАДВ11наименования.ПФВЗНОСЫ_Н_ПЕРИОД = ИтогоНУ( "ЕПФН" );
   }

   Добавить( оАДВ11наименования );
}

Функция ПроверитьПачкуПФ()
{
   объект мПроверкаПФ = ПроверкаПФ( РасчетПФ( "ЗГЛВ" ) );
   мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "РБТД" ) ) );
   мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "ПАЧК" ) ) );
   мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "ТИПД" ) ) );

   перем пОшибок = Есть( мПроверкаПФ.Ошибка ) ? Размер( мПроверкаПФ.Ошибка ) : 0;
   перем пПредупреждений = Есть( мПроверкаПФ.Предупреждение ) ? Размер( мПроверкаПФ.Предупреждение ) : 0;

   объект мРасчетПФ = РасчетПФ( "ТИПД" );
   
   # Вызывается именно выборка, поскольку у нее специфический обработчик, в котором рассчитываются нужные поля
   ДляВсех( Записей( ШПЗ + " наименования", Документ) )
   {
      Примечание = ПроверитьЗаписьПФ( мРасчетПФ.тТипДокумента );
      Сохранить( ЗАПИСЬ );
   }
   Вернуть( ( пОшибок ? "Ошибок " + пОшибок + " " : "" ) + ( пПредупреждений ? "Предупреждений " + пПредупреждений : "" ) );
}

Функция ПроверитьЗаписьПФ( ТипЗаписи )
{
   объект мПроверкаПФ = ПроверкаПФ( РасчетПФ( ТипЗаписи ) );
   перем пОшибок = Есть( мПроверкаПФ.Ошибка ) ? Размер( мПроверкаПФ.Ошибка ) : 0;
   перем пПредупреждений = Есть( мПроверкаПФ.Предупреждение ) ? Размер( мПроверкаПФ.Предупреждение ) : 0;
   Вернуть( ( пОшибок ? "Ошибок " + пОшибок + " " : "" ) + ( пПредупреждений ? "Предупреждений " + пПредупреждений : "" ) );
}

Функция ОшибкиЗаписиПФ()
{
   объект мПроверкаПФ = ПроверкаПФ( РасчетПФ( ТипЗаписиДокументаПФ('Ведомость-Список>Документ_.ШПЗ') ) );

   перем пОшибок = Есть( мПроверкаПФ.Ошибка ) ? Размер( мПроверкаПФ.Ошибка ) : 0;
   перем пПредупреждений = Есть( мПроверкаПФ.Предупреждение ) ? Размер( мПроверкаПФ.Предупреждение ) : 0;

   перем пТип, пПоле;
   ДляВсех( Элементов( мПроверкаПФ, пТип ) )
      ДляВсех( Элементов( мПроверкаПФ[ пТип ], пПоле ) )
      {
         оОшибки = Выборка( "Ошибки" );
         оОшибки._Тип = пТип;
         оОшибки._Поле = ПодСтрока( пПоле, 2, -1 );
         перем пЗначение = мПроверкаПФ[ пТип, пПоле ];
         Пока( пЗначение )
         {
            оОшибки._Комментарий += ПодСтрока( пЗначение, 1, 70 ) + "\n";
            пЗначение = ПодСтрока( пЗначение, 71, -1 );
         }
         Добавить( оОшибки );
      }

   объект оРасшифровкаОшибок = СоздатьДиалог( "Расшифровка ошибок" );
   ВыполнитьДиалог( оРасшифровкаОшибок );
   
   Вернуть( ( пОшибок ? "Ошибок " + пОшибок + " " : "" ) + ( пПредупреждений ? "Предупреждений " + пПредупреждений : "" ) );
}

Функция ОшибкиПачкиПФ()
{
   объект мПроверкаПФ = ПроверкаПФ( РасчетПФ( "ЗГЛВ" ) );
   мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "РБТД" ) ) );
   мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "ПАЧК" ) ) );
   мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "ТИПД" ) ) );

   перем пОшибок = Есть( мПроверкаПФ.Ошибка ) ? Размер( мПроверкаПФ.Ошибка ) : 0;
   перем пПредупреждений = Есть( мПроверкаПФ.Предупреждение ) ? Размер( мПроверкаПФ.Предупреждение ) : 0;

   перем пТип, пПоле;
   ДляВсех( Элементов( мПроверкаПФ, пТип ) )
      ДляВсех( Элементов( мПроверкаПФ[ пТип ], пПоле ) )
      {
         оОшибки = Выборка( "Ошибки" );
         оОшибки._Тип = пТип;
         оОшибки._Поле = ПодСтрока( пПоле, 2, -1 );
         перем пЗначение = мПроверкаПФ[ пТип, пПоле ];
         Пока( пЗначение )
         {
            оОшибки._Комментарий += ПодСтрока( пЗначение, 1, 70 ) + "\n";
            пЗначение = ПодСтрока( пЗначение, 71, -1 );
         }
         Добавить( оОшибки );
      }

   объект оРасшифровкаОшибок = СоздатьДиалог( "Расшифровка ошибок" );
   ВыполнитьДиалог( оРасшифровкаОшибок );
   
   Вернуть( ( пОшибок ? "Ошибок " + пОшибок + " " : "" ) + ( пПредупреждений ? "Предупреждений " + пПредупреждений : "" ) );
}

Функция ПроверкаПФ_МестаРождения( Значения, мОшибки )
# Проверяется рекивизиты места рождения для записей АНКТ, ОБМН, ДУБЛ
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];

      #     10) При заполнении реквизита Место рождения должны быть заполнены только три реквизита из четырех (Место рождения.название населенного пункта, Место рождения.район, Место рождения.область, Место рождения.страна) (ошибка 30). Это требование обусловлено размерами страхового свидетельства, на которое выводится место рождения застрахованного лица. Если в Анкете застрахованно-го лица, на основании которой готовится файл, указаны все четыре составляю-щих Места рождения, реквизит Место рождения указывается следующим обра-зом:
      #     - если наименование страны <СССР>, <Россия>, <РФ>, <Российская Федерация>, то данное наименование нужно опустить;
      #     - если наименование страны опустить невозможно и при этом заполнены рек-визиты Название населенного пункта, Район, Область, то следует вписать на-именование страны в конец реквизита Область, указав в реквизите Тип места рождения значение <ОСОБОЕ>. 
      Если( пИндекс == "ТМЕСТОРОЖДНАЗВАНИЕНАС_ГОПУНКТА" )
         Если( ( 4 - !Значения.ТМЕСТОРОЖДНАЗВАНИЕНАС_ГОПУНКТА
                   - !Значения.ТМЕСТОРОЖДРАЙОН
                   - !Значения.ТМЕСТОРОЖДОБЛАСТЬ
                   - !Значения.ТМЕСТОРОЖДСТРАНА ) > 3 )
            мОшибки.Ошибка[пИндекс] = "При заполнении реквизита Место рождения должны быть заполнены только три реквизита из четырех (Место рождения.название населенного пункта, Место рождения.район, Место рождения.область, Место рождения.страна)";
   
      #     11) При указании в реквизите Тип места рождения значения <СТАНДАРТ> производятся следующие проверки:
      #     В наименовании населенного пункта не допускается указание типа населенного пункта (ошибка 30)
      Если( пИндекс == "ТМЕСТОРОЖДНАЗВАНИЕНАС_ГОПУНКТА" )
      {
         Перем пСокращенияНас_гоПункта = ",Г,Г.,ГОР,ГОР.,ГОРОД,С,С.,СЕЛО,Д,Д.,ДЕР,ДЕР.,ДЕРЕВНЯ,ПГТ,ПОС,ПОС.,ПОСЕЛОК,ПОСЕЛОК ГОРОДСКОГО ТИПА,С/Х,СОВХОЗ,К/Х,КОЛХОЗ,СТ,СТ.,СТАНЦИЯ,СТАНИЦА,Х-Р,ХУТОР,ИМ,ИМ.,ИМЕНИ,";
         Перем п1, п2;
         Разбить( пЗначение, " ", п1, п2 );
         Если( Найти( пСокращенияНас_гоПункта, "," + п1 + "," ) 
           или Найти( пСокращенияНас_гоПункта, "," + п2 + "," ) )
            мОшибки.Ошибка[пИндекс] = "В наименовании населенного пункта не допускается указание типа населенного пункта";
      }
      
      #     В наименовании района не допускается слово <район> (ошибка 30)
      Если( пИндекс == "ТМЕСТОРОЖДРАЙОН" )
      {
         Перем пСокращенияРайон = ",РАЙОН,РАЙОНА,Р-Н,Р-НА,Р-ОН,Р-ОНА,РАЙ,РАЙ.,";
         Перем п1, п2;
         Разбить( пЗначение, " ", п1, п2 );
         Если( Найти( пСокращенияРайон, "," + п1 + "," ) 
           или Найти( пСокращенияРайон, "," + п2 + "," ) )
            мОшибки.Ошибка[пИндекс] = "В наименовании района не допускается слово <район>";
      }
      
      #     Наименование района должно оканчиваться на <й> (предупреждение 10)
      Если( пИндекс == "ТМЕСТОРОЖДРАЙОН" )
         Если( пЗначение и Подстрока( пЗначение, Размер( пЗначение ), -1 ) != "Й" )
            мОшибки.Предупреждение[пИндекс] = "Наименование района должно оканчиваться на <й>";
      
      #     если указан район, должен быть указан и регион (предупреждение 10)
      Если( пИндекс == "ТМЕСТОРОЖДРАЙОН" )
         Если( пЗначение и !Значения.ТМЕСТОРОЖДОБЛАСТЬ )
            мОшибки.Предупреждение[пИндекс] = "Если указан район, должен быть указан и регион";
      
      #     Не понятно, всегда ли должна быть заполнена область в месте рождения
      #     Необходимо указать тип региона, для этого в наименовании региона должно присутствовать одно из перечисленных ниже слов (предупреждение 10):
      Если( пИндекс == "ТМЕСТОРОЖДОБЛАСТЬ" )
      {
         Перем пСокращенияОбласть = ",ОБЛАСТЬ,КРАЙ,АССР,ССР,АО,РЕСПУБЛИКА,";
         Перем п1, п2;
         Разбить( пЗначение, " ", п1, п2 );
         Если( пЗначение и !Найти( пСокращенияОбласть, "," + п2 + "," ) )
            мОшибки.Предупреждение[пИндекс] = "Необходимо указать тип региона, для этого в наименовании региона должно присутствовать одно из сокращений (ОБЛАСТЬ)";
      }
      
      #     12) При указании в реквизите Тип места рождения значения <ОСОБОЕ> перечисленные в предыдущем пункте проверки составляющих места рождения не производятся.
      #     Не проверяется
   }
   Вернуть 0;
}

Функция ПроверкаПФ_Общие( Значения, мОшибки )
# Проверяются общие правила заполнения реквизитов записей
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   перем пСимволыЧисла  = "0123456789";
   перем пСимволыРимскогоЧисла = "XIV";
   перем пАнглСимволы   = "ABCDEFGHIJKLMNOPRSTUVWXYZ";
   перем пРуссСимволы   = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
   
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];

      #  2. Правила комплектования пачек документов

      #     Пачка может комплектоваться документами только одного вида.
      #     Отклонения от требований настоящего пункта являются ошибкой с кодом 30.

      #     Не проверяется

      #  3. Общие правила заполнения реквизитов записей

      #  1) Все символьные реквизиты вводятся заглавными буквами (ошибка 40).
      перем пТипЗначения = ПодСтрока( пИндекс, 1, 1 );
      Если( пТипЗначения == "Т" и пЗначение != Вверх( пЗначение ) )
         мОшибки.Ошибка[пИндекс] = "Все символьные реквизиты вводятся заглавными буквами";

      #  2) Лидирующие пробелы в символьных реквизитах не допускаются (ошибка 40).
      Если( пТипЗначения == "Т" и ПодСтрока( пЗначение, 1, 1 ) == " " )
         мОшибки.Ошибка[пИндекс] = "Лидирующие пробелы в символьных реквизитах не допускаются";

      #  3) Если в символьном реквизите использован символ <->, то рядом с этим символом пробелы недопустимы (ошибка 40).
      Если( пТипЗначения == "Т" и ( Найти( пЗначение, " -" ) или Найти( пЗначение, "- " ) ) )
         мОшибки.Ошибка[пИндекс] = "Если в символьном реквизите использован символ <->, то рядом с этим символом пробелы недопустимы";

      #  4) Наличие двух и более пробелов подряд внутри символьных реквизитов не допускается (только один) (ошибка 40).   
      Если( пТипЗначения == "Т" и Найти( пЗначение, "  " ) )
         мОшибки.Ошибка[пИндекс] = "Наличие двух и более пробелов подряд внутри символьных реквизитов не допускается";

      #  5) Незаполненные символьные реквизиты представляются как двойные кавычки, идущие подряд (пробелы между кавычками недопустимы) (ошибка 40).   
      Если( пТипЗначения == "Т" и пЗначение == " " )
         мОшибки.Ошибка[пИндекс] = "Незаполненные символьные реквизиты представляются как двойные кавычки, идущие подряд (пробелы между кавычками недопустимы)";

      #  6) Незаполненные числовые поля представляются 0 (нулем) или 0.00 в реквизитах заработка и взносов (ошибка 40).
      Если( пТипЗначения == "Ч" и !пЗначение и Текст( пЗначение ) != "0" и Текст( пЗначение ) != "0.00" )
         мОшибки.Ошибка[пИндекс] = "Незаполненные числовые поля представляются 0 (нулем) или 0.00 в реквизитах заработка и взносов";

      #  7) Недопустимо использование в символьных реквизитах двойных кавычек (при необходимости внутри символьного реквизита должны использоваться одинарные кавычки) (ошибка 40).
      Если( пТипЗначения == "Т" и Найти( пЗначение, "\"" ) )
         мОшибки.Ошибка[пИндекс] = "Недопустимо использование в символьных реквизитах двойных кавычек (при необходимости внутри символьного реквизита должны использоваться одинарные кавычки)";

      #  8) Формат даты-<дд/мм/гггг> (ошибка 40).   
      #  Не проверяется.

      #  9) Если символьный реквизит имеет длину меньше, чем указано в формате, наращивание его заключительными пробелами не требуется (предупреждение 10).
      Если( пТипЗначения == "Т" и ПодСтрока( пЗначение, Размер( пЗначение ), 1 ) == " " )
         мОшибки.Предупреждение[ пИндекс ] = "Если символьный реквизит имеет длину меньше, чем указано в формате, наращивание его заключительными пробелами не требуется";


      #  10) Все символьные реквизиты всех входящих документов, за исключением латинской части серии документа, вводятся буквами русского алфавита (предупреждение 20).   
      Если( пТипЗначения == "Т" и !Найти( пИндекс, "СЕРИЯРИМСКИЕ" ) )
         Если( НедопустимыеСимволы( пЗначение, пАнглСимволы ) )
            мОшибки.Предупреждение[ пИндекс ] = "Все символьные реквизиты всех входящих документов, за исключением латинской части серии документа, вводятся буквами русского алфавита";

      #  11) Во всех документах, кроме Заявления об обмене страхового свидетельства, в реквизитах Фамилия, Имя, Отчество допустимы только следующие символы и их сочетания (ошибка 40):
      Если( пИндекс == "ТФАМИЛИЯ" или пИндекс == "ТИМЯ" или пИндекс == "ТОТЧЕСТВО" )
      {
         #     - буквы русского алфавита
         #     - знак <->
         #     - латинские буквы допускаются (предупреждение)
         Если( ДопустимыеСимволы( пЗначение, пАнглСимволы + пРуссСимволы + "-" ) )
            мОшибки.Ошибка[пИндекс] = "Во всех документах, кроме Заявления об обмене страхового свидетельства, в реквизитах Фамилия, Имя, Отчество допустимы только следующие символы и их сочетания: буквы русского алфавита, знак <->, латинские буквы допускаются (предупреждение)";

         #     - знак <-> не может быть последним символом реквизита 
         Если( ПодСтрока( пЗначение, Размер( пЗначение ), 1 ) == "-" )
            мОшибки.Ошибка[пИндекс] = "Знак <-> не может быть последним символом реквизита";

         #     - знаки <-> не могут идти подряд или через пробел 
         Если( Найти( пЗначение, "--" ) )
            мОшибки.Ошибка[пИндекс] = "Знаки <-> не могут идти подряд или через пробел";

         #     - не допускается смешение в этих реквизитах букв русского и латинского алфавитов
         Если( НедопустимыеСимволы( пЗначение, пАнглСимволы ) и НедопустимыеСимволы( пЗначение, пРуссСимволы ) )
            мОшибки.Ошибка[пИндекс] = "Не допускается смешение в этих реквизитах букв русского и латинского алфавитов";
      }

      #  12) В реквизитах Места рождения допустимы только следующие символы и их сочетания (ошибка 40):
      Если( Найти( пИндекс, "ТМЕСТОРОЖД" ) )
      {
         #     - буквы русского алфавита
         #     - знак <->
         #     - арабские цифры допускаются (предупреждение)
         #     - латинские буквы допускаются (предупреждение)
         #     Добавил " ", т.к. не проходила "Ярославская область"
         Если( ДопустимыеСимволы( пЗначение, пАнглСимволы + пРуссСимволы + "-" + пСимволыЧисла + " " ) )
            мОшибки.Ошибка[пИндекс] = "В реквизитах Места рождения допустимы только следующие символы и их сочетания: буквы русского алфавита, знак <->, арабские цифры допускаются (предупреждение)";

         #     - знак </> допускается только для документа, в котором Тип места рождения = <Особое> (предупреждение); для остальных - ошибка
         #     В настройке тип места рождения всегда Стандарт, поэтому </> не допускается

         #     - знак <-> не может быть последним символом реквизита
         Если( ПодСтрока( пЗначение, Размер( пЗначение ), 1 ) == "-" )
            мОшибки.Ошибка[пИндекс] = "Знак <-> не может быть последним символом реквизита";

         #     - знаки <-> не могут идти подряд или через пробел 
         Если( Найти( пЗначение, "--" ) )
            мОшибки.Ошибка[пИндекс] = "Знаки <-> не могут идти подряд или через пробел";

         #     - не допускается смешение в этих реквизитах букв русского и латинского алфавита, кроме латинских букв, образующих правильные римские числа (т.е. буквы I, V, X в правильных сочетаниях) 
         Если( НедопустимыеСимволы( пЗначение, пАнглСимволы ) и НедопустимыеСимволы( пЗначение, пРуссСимволы ) )
            мОшибки.Ошибка[пИндекс] = "Не допускается смешение в этих реквизитах букв русского и латинского алфавитов";
      }

      #  13) В реквизитах Адреса допустимы только следующие символы и их сочетания (ошибка 40):
      Если( Найти( пИндекс, "АДРЕС" ) )
      {
         #     - буквы русского алфавита
         #     - арабские цифры
         #     - буквы латинского алфавита
         #     - знаки {<-> |  <,> | <.> | </> | <(> | <)>}
         #     Добавил " ", т.к. не проходила "Ярославская область"
         Если( ДопустимыеСимволы( пЗначение, пАнглСимволы + пРуссСимволы + пСимволыЧисла + "-,./()" + " " ) )
            мОшибки.Ошибка[пИндекс] = "В реквизитах Адреса допустимы только следующие символы и их сочетания: буквы русского алфавита, арабские цифры, буквы латинского алфавита, знаки {<-> |  <,> | <.> | </> | <(> | <)>}";
      }

      #  14) Указание копеек в числовых полях для отчетных периодов до 1998 года недопустимо (ошибка 30). Примеры допустимой записи значений:
      #     - до 01.01.98:    932000 (932000 рублей)
      #     - после 01.01.98: 1234.56 (1234 рубля 56 копеек)
      #  Не проверяется.

      #  15) При указании копеек в реквизитах заработка и взносов копейки отделяются десятичной точкой и указываются двумя знаками после точки (ошибка 30). Например:
      #     - 345 (345 рублей 00 копеек)
      #     - 0.00 (0 рублей 00 копеек)
      #     - 0.12 (0 рублей 12 копеек)
      #     - 345.00 (345 рублей 00 копеек)
      #     Примеры недопустимой записи значений:
      #     - 340.
      #     - 549.2
      #  Не проверяется.

      #  16) Значение реквизита Документ, удостоверяющий личность. Тип документа указывается в соответствии с одноименным классификатором, приведенным в Приложении 1 в описании формата данных (ошибка 40).   
      #  Не проверяется.

      Если( пИндекс == "ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД" и пЗначение )
      {
         #  17) При указании в реквизите Тип документа любого значения  должен быть указан реквизит Документ, удостоверяющий личность.Дата выдачи (ошибка 30).
         Если( !Значения.дДокУдостЛичнДатаВыдачи )
            мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа любого значения  должен быть указан реквизит Документ, удостоверяющий личность.Дата выдачи";

         #  18) При указании в реквизите Тип документа любого значения должен быть указан реквизит Документ, удостоверяющий личность.Кем выдан (предупреждение 20).
         Если( !Значения.тДокУдостЛичнКемВыдан )
            мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа любого значения должен быть указан реквизит Документ, удостоверяющий личность.Кем выдан";

         #  19) При указании в реквизите Тип документа значения <ПАСПОРТ>: 
         Если( пЗначение == "ПАСПОРТ" )
         {
            # - должны быть заполнены реквизиты Серия.Римские цифры, Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРимскиеЦифры или !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ> должны быть заполнены реквизиты Серия.Римские цифры, Серия.Русские буквы, Номер";

            # - Серия.Римские цифры должна быть правильным числом, записанным римскими цифрами, в диапазоне от I до XLIX (ошибка 40);
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРимскиеЦифры, пСимволыРимскогоЧисла ) )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ> Серия.Римские цифры должна быть правильным числом, записанным римскими цифрами, в диапазоне от I до XLIX";

            # - Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пРуссСимволы ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ> Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита";

            # - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ> Дата выдачи должна быть позже даты рождения";
         }
      
         #  20) При указании в реквизите  Тип документа значения <ПАСПОРТ РОССИИ>:
         Если( пЗначение == "ПАСПОРТ РОССИИ" )
         {
            # - должны быть заполнены реквизиты Серия.Римские цифры, Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРимскиеЦифры или !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ РОССИИ> должны быть заполнены реквизиты Серия.Римские цифры, Серия.Русские буквы, Номер";

            # - Серия.Римские цифры должна содержать ровно 2 арабские цифры (ошибка 40);
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРимскиеЦифры, пСимволыЧисла ) или Размер( Значения.тДокУдостЛичнСерияРимскиеЦифры ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ РОССИИ> Серия.Римские цифры должна содержать ровно 2 арабские цифры";

            # - Серия.Русские буквы должна содержать ровно 2 арабские цифры (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пСимволыЧисла ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ РОССИИ> Серия.Русские буквы должна содержать ровно 2 арабские цифры";

            # - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПАСПОРТ> Дата выдачи должна быть позже даты рождения";
         }

         #  21) При указании в реквизите  Тип документа значения <СВИД О РОЖД>:
         Если( пЗначение == "СВИД О РОЖД" )
         {
            # - должны быть заполнены реквизиты Серия.Римские цифры, Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРимскиеЦифры или !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <СВИД О РОЖД> должны быть заполнены реквизиты Серия.Римские цифры, Серия.Русские буквы, Номер";

            # - Серия.Римские цифры должна быть правильным числом, записанным римскими цифрами, в диапазоне от I до XLIX (ошибка 40);
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРимскиеЦифры, пСимволыРимскогоЧисла ) )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <СВИД О РОЖД> Серия.Римские цифры должна быть правильным числом, записанным римскими цифрами, в диапазоне от I до XLIX";

            # - Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пРуссСимволы ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <СВИД О РОЖД> Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита";

            # - Дата выдачи должна быть позже либо равна дате рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи < Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <СВИД О РОЖД> Дата выдачи должна быть позже либо равна дате рождения";
         }

         #  22) При указании в реквизите  Тип документа значения <ЗГПАСПОРТ>:
         Если( пЗначение == "ЗГПАСПОРТ" )
         {
            # - должны быть заполнены реквизиты Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ЗГПАСПОРТ> должны быть заполнены реквизиты Серия.Русские буквы, Номер";

            # - Серия.Русские буквы должна содержать ровно 2 арабские цифры (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пСимволыЧисла ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ЗГПАСПОРТ> Серия.Русские буквы должна содержать ровно 2 арабские цифры";

            # - Серия.Номер должен содержать в первой позиции арабскую цифру ноль (ошибка 40);
            # Не проверяется. Не понятно что такое Серия.Номер.

            #     - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ЗГПАСПОРТ> Дата выдачи должна быть позже даты рождения";
         }
      
         #  23) При указании в реквизите  Тип документа значений <УДОСТ ОФИЦЕРА> и <ПАСПОРТ МОРФЛТ>:
         Если( пЗначение == "УДОСТ ОФИЦЕРА" или пЗначение == "ПАСПОРТ МОРФЛТ" )
         {
            # - должны быть заполнены реквизиты Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <УДОСТ ОФИЦЕРА> и <ПАСПОРТ МОРФЛТ> должны быть заполнены реквизиты Серия.Русские буквы, Номер";

            # - Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пРуссСимволы ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <УДОСТ ОФИЦЕРА> и <ПАСПОРТ МОРФЛТ> Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита";

            # - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <УДОСТ ОФИЦЕРА> и <ПАСПОРТ МОРФЛТ> Дата выдачи должна быть позже даты рождения";
         }

         #  24) При указании в реквизите  Тип документа значений <ВОЕННЫЙ БИЛЕТ>, <ПАСПОРТ МОРЯКА>, <ВОЕН БИЛЕТ ОЗ>:
         Если( пЗначение == "ВОЕННЫЙ БИЛЕТ" или пЗначение == "ПАСПОРТ МОРЯКА" или пЗначение == "ВОЕН БИЛЕТ ОЗ" )
         {
            # - должны быть заполнены реквизиты Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ВОЕННЫЙ БИЛЕТ>, <ПАСПОРТ МОРЯКА>, <ВОЕН БИЛЕТ ОЗ> должны быть заполнены реквизиты Серия.Русские буквы, Номер";

            # - Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пРуссСимволы ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ВОЕННЫЙ БИЛЕТ>, <ПАСПОРТ МОРЯКА>, <ВОЕН БИЛЕТ ОЗ> Серия.Русские буквы должна содержать ровно 2 буквы русского алфавита";

            # - Серия.Номер должен содержать в первой позиции арабскую цифру ноль (ошибка 40);
            # Не проверяется. Не понятно что такое Серия.Номер.

            # - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ВОЕННЫЙ БИЛЕТ>, <ПАСПОРТ МОРЯКА>, <ВОЕН БИЛЕТ ОЗ> Дата выдачи должна быть позже даты рождения";
         }

         #  25) При указании в реквизите  Тип документа значений <ДИППАСПОРТ РФ> и <ЗГПАСПОРТ РФ>:
         Если( пЗначение == "ДИППАСПОРТ РФ" или пЗначение == "ЗГПАСПОРТ РФ" )
         {
            # - должны быть заполнены реквизиты Серия.Русские буквы, Номер (ошибка 30);
            Если( !Значения.тДокУдостЛичнСерияРусскиеБуквы или !Значения.чДокУдостЛичнНомер )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ДИППАСПОРТ РФ> и <ЗГПАСПОРТ РФ> должны быть заполнены реквизиты Серия.Русские буквы, Номер";

            # - Серия.Русские буквы должна содержать ровно 2 арабские цифры (ошибка 40).
            Если( ДопустимыеСимволы( Значения.тДокУдостЛичнСерияРусскиеБуквы, пСимволыЧисла ) или Размер( Значения.тДокУдостЛичнСерияРусскиеБуквы ) != 2 )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ДИППАСПОРТ РФ> и <ЗГПАСПОРТ РФ> Серия.Русские буквы должна содержать ровно 2 арабские цифры";

            # - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ДИППАСПОРТ РФ> и <ЗГПАСПОРТ РФ> Дата выдачи должна быть позже даты рождения";
         }

         #  26) При указании в реквизите Тип документа значений <СПРАВКА ОБ ОСВ>, <ИНПАСПОРТ>, <СВИД БЕЖЕНЦА>, <ВИД НА ЖИТЕЛЬ>, <УДОСТ БЕЖЕНЦА>, <ВРЕМ УДОСТ>,  <ПРОЧЕЕ> проверки реквизитов подтверждающего документа не производятся, кроме:
         Если( пЗначение == "СПРАВКА ОБ ОСВ" 
           или пЗначение == "ИНПАСПОРТ" 
           или пЗначение == "СВИД БЕЖЕНЦА" 
           или пЗначение == "ВИД НА ЖИТЕЛЬ" 
           или пЗначение == "УДОСТ БЕЖЕНЦА" 
           или пЗначение == "ВРЕМ УДОСТ" 
           или пЗначение == "ПРОЧЕЕ" )
         {
            # - Дата выдачи должна быть позже даты рождения (ошибка 30),
            Если( Значения.дДокУдостЛичнДатаВыдачи <= Значения.дДРСтандартнаяДата )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <СПРАВКА ОБ ОСВ>, <ИНПАСПОРТ>, <СВИД БЕЖЕНЦА>, <ВИД НА ЖИТЕЛЬ>, <УДОСТ БЕЖЕНЦА>, <ВРЕМ УДОСТ>,  <ПРОЧЕЕ> Дата выдачи должна быть позже даты рождения";
         }

         #  27) При указании в реквизите Тип документа значения <ПРОЧЕЕ> реквизит Тип документа.Наименование должен быть указан словами (ошибка 30).      
         Если( пЗначение == "ПРОЧЕЕ" )
            Если( !Значения.тДокУдостЛичнНаименование )
               мОшибки.Ошибка[пИндекс] = "При указании в реквизите Тип документа значения <ПРОЧЕЕ> реквизит Тип документа.Наименование должен быть указан словами";

         #  28) Дата рождения должна быть как минимум на 14 лет раньше Даты выдачи ПАСПОРТА или ПАСПОРТА РОССИИ (предупреждение 20).
         Если( пЗначение == "ПАСПОРТ" или пЗначение == "ПАСПОРТ РОССИИ" )
            Если( Год( Значения.дДокУдостЛичнДатаВыдачи ) - Год( Значения.дДРСтандартнаяДата ) < 14 )
               мОшибки.Предупреждение[ пИндекс ] = "Дата рождения должна быть как минимум на 14 лет раньше Даты выдачи ПАСПОРТА или ПАСПОРТА РОССИИ";
      }

      #  29) Последние 2 цифры Страхового номера должны быть числом, подсчитанным по Алгоритму формирование контрольного числа Страхового номера (приведен ниже) (ошибка 30).         
      #  Проверка контрольного числа Страхового номера проводится только для номеров больше  номера 001-001-998
      #  Контрольное число Страхового номера рассчитывается следующим образом:
      #   каждая цифра Страхового номера умножается на номер своей позиции (позиции отсчитываются с конца)
      #   полученные произведения суммируются
      #   сумма делится на 101
      #   последние две цифры остатка от деления является Контрольным числом.
      #  Например: Указан страховой номер 112-233-445 95
      #  Проверяем правильность контрольного числа:
      #     цифры номера   1 1 2 2 3 3 4 4 5 
      #     номер позиции  9 8 7 6 5 4 3 2 1
      #  1х9+1х8+2х7+2х6+3х5+3х4+4х3+4х2+5х1=95
      #  95 / !101! =95
      #  Контрольное число=95 - указано верно
      #  Некоторые частные случаи:
      #  99 / !101! =99
      #  100 / !101! =00
      #  101 / !101! =00
      #  102 / !101! =01
      Если( пИндекс == "ТСТРАХОВОЙНОМЕР" )
      {
#         перем пНомер = ПодСтрока( пЗначение, 1, 3 )
#                      + ПодСтрока( пЗначение, 5, 3 )
#                      + ПодСтрока( пЗначение, 9, 3 );
#         перем пКонтрольноеЧисло = ПодСтрока( пЗначение, 13, 2 );
#
#         перем пНпп = 9;
#         перем пСумма = 0;
#         Пока( пНпп )
#            пСумма += Число( ПодСтрока( пНомер, 10 - пНпп, 1 ) ) * пНпп--;
#
#         перем пОстатокДеления = пСумма % 101;
#
#         Если( пОстатокДеления != пКонтрольноеЧисло )
         Перем пСообщ = ПроверитьРегистрационныйНомер( пЗначение );
         Если( пСообщ )
            мОшибки.Ошибка[пИндекс] = пСообщ;
      }
   }
   Вернуть 0;
}

Функция ПроверкаПФ_ЗГЛВ( Значения, мОшибки )
# Проверяется запись-заголовок
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Запись должна быть только одна (ошибка 50).
      #     Не проверяется.

      #     2) Запись должна быть первой записью файла (ошибка 50).
      #     Не проверяется.

      #     3) Значение реквизита Программа подготовки данных должно быть указано (ошибка 30).
      Если( пИндекс == "ТПРОГРАММАПОДГОТОВКИДАННЫХ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Значение реквизита Программа подготовки данных должно быть указано";

      #     4) Значение реквизита Версия программы подготовки должно быть указано (ошибка 30).
      Если( пИндекс == "ТВЕРСИЯПРОГРАММЫПОДГОТОВКИ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Значение реквизита Версия программы подготовки должно быть указано";
   }
   Вернуть 0;
}

Функция ПроверкаПФ_РБТД( Значения, мОшибки )
# Проверяется Запись о работодателе
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   перем пСимволыЧисла  = "0123456789";
   перем пСимволыРимскогоЧисла = "XIV";
   перем пАнглСимволы   = "ABCDEFGHIJKLMNOPRSTUVWXYZ";
   перем пРуссСимволы   = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
   
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Запись должна быть только одна (ошибка 50).
      #     Не проверяется.

      #     2) Запись должна быть второй записью файла (ошибка 50).
      #     Не проверяется.

      #     3) Третья часть регистрационного номера в записи должна соответствовать имени файла (ошибка 50).
      #     Не проверяется.

      #     4) Наименование работодателя должно вводиться буквами русского алфавита (предупреждение 10).
      #     Добавил пробел, иначе ругалось на ООО ТЕНЗОР
      Если( пИндекс == "ТНАИМЕНОВАНИЕРАБОТОДАТЕЛЯ" )
         Если( НеДопустимыеСимволы( пЗначение, пАнглСимволы ) )
            мОшибки.Предупреждение[ пИндекс ] = "Наименование работодателя должно вводиться буквами русского алфавита и без двойных кавычек";

      #     5) Значение реквизита ИНН должно быть ненулевым (ошибка 30).
      Если( пИндекс == "ЧИНН" и !пЗначение )
         мОшибки.Ошибка[пИндекс] = "Значение реквизита ИНН должно быть ненулевым";

      #     6) Значение реквизита КПП должно быть ненулевым (предупреждение 10).
      Если( пИндекс == "ЧКПП" и !пЗначение и ! Найти( Значения.тНаименованиеРаботодателя, "ЧП" ) )
         мОшибки.Предупреждение[ пИндекс ] = "Значение реквизита КПП должно быть ненулевым, кроме ЧП";
   }
   Вернуть 0;
}

Функция ПроверкаПФ_ПАЧК( Значения, мОшибки )
# Проверяется Запись о пачке
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Запись должна быть только одна (ошибка 50).
      #     Не проверяется.

      #     2) Запись должна быть третьей записью файла (ошибка 50).
      #     Не проверяется.

      #     3) Реквизит Номер пачки документов в записи должен соответствовать имени файла (ошибка 40).
      #     Не проверяется.

      #     4) Реквизит Тип пачки должен иметь одно из допустимых значений: <СОБЕС> или <ОПИСЬ> (ошибка 30).
      Если( пИндекс == "ТТИППАЧКИ" и пЗначение != "СОБЕС" и пЗначение != "ОПИСЬ" )
         мОшибки.Ошибка[пИндекс] = "Реквизит Тип пачки должен иметь одно из допустимых значений: <СОБЕС> или <ОПИСЬ>";

      #     5) Реквизит Тип описи должен иметь одно из допустимых значений: <ОП60>, <ОП61> или пустое (ошибка 30).
      Если( пИндекс == "ТТИПОПИСИ" и пЗначение != "ОП60" и пЗначение != "ОП61" и пЗначение )
         мОшибки.Ошибка[пИндекс] = "Реквизит Тип описи должен иметь одно из допустимых значений: <ОП60>, <ОП61> или пустое";

      #     6) Дата составления описи должна быть меньше (не более, чем на 10 календарных месяцев - предупреждение 20) и не должна превышать текущую дату (ошибка 30).
      #     Не проверяется.

      #     7) Если реквизит Тип пачки имеет значение <СОБЕС>, значение реквизита Тип описи должно быть пустое (ошибка 30).
      Если( пИндекс == "ТТИППАЧКИ" и пЗначение == "СОБЕС" )
         Если( Значения.ТТИПОПИСИ )
            мОшибки.Ошибка[пИндекс] = "Если реквизит Тип пачки имеет значение <СОБЕС>, значение реквизита Тип описи должно быть пустое";

      #     8) Если реквизит Тип пачки имеет значение <СОБЕС>, значение реквизита Исходящий номер СПУ должно быть ненулевым (ошибка 30).
      Если( пИндекс == "ТТИППАЧКИ" и пЗначение == "СОБЕС" )
         Если( !Значения.ЧИСХОДЯЩИЙНОМЕРСПУКОДПОДРАЗДЕЛЕНИЯ или !Значения.ЧИСХОДЯЩИЙНОМЕРСПУИСХОДЯЩИЙНОМЕР )
            мОшибки.Ошибка[пИндекс] = "Если реквизит Тип пачки имеет значение <СОБЕС>, значение реквизита Исходящий номер СПУ должно быть ненулевым";

      #     9) Если реквизит Тип пачки имеет значение <ОПИСЬ>, значение реквизита Исходящий номер СПУ должно быть нулевым (ошибка 30).
      Если( пИндекс == "ТТИППАЧКИ" и пЗначение == "ОПИСЬ" )
         Если( Значения.ЧИСХОДЯЩИЙНОМЕРСПУКОДПОДРАЗДЕЛЕНИЯ или Значения.ЧИСХОДЯЩИЙНОМЕРСПУИСХОДЯЩИЙНОМЕР )
            мОшибки.Ошибка[пИндекс] = "Если реквизит Тип пачки имеет значение <ОПИСЬ>, значение реквизита Исходящий номер СПУ должно быть нулевым";

      #     10) Значение реквизита Исходящий номер СПУ.Код подразделения должно удовлетворять следующим условиям (ошибка 30):
      #        - первые три символа должны совпадать с первыми тремя символами значения реквизита Регистрационный номер ПФР (ошибка 30);
      #        - три последних символа - нули (ошибка 30).
      #     Не проверяется.

      #     11) Значение первых четырех символов реквизита Исходящий номер СПУ.Исходящий номер в числовом выражении должно быть больше или равно 2000, а значение последующих семи символов этого же реквизита в числовом выражении должно быть больше нуля (ошибка 30).
      #     Не проверяется.

      #     12) Если реквизит Тип пачки имеет значение <ОПИСЬ>, значение реквизита Тип описи должно быть <ОП60> или <ОП61>  (ошибка 40).
      Если( пИндекс == "ТТИППАЧКИ" и пЗначение == "ОПИСЬ" )
         Если( Значения.ТТИПОПИСИ != "ОП60" и Значения.ТТИПОПИСИ != "ОП61" )
            мОшибки.Ошибка[пИндекс] = "Если реквизит Тип пачки имеет значение <ОПИСЬ>, значение реквизита Тип описи должно быть <ОП60> или <ОП61>";

      #     13) При значении реквизита Тип описи <ОП60> должен быть заполнен Отчетный период, Расчетный период должен быть пустым (ошибка 30).
      Если( пИндекс == "ТТИПОПИСИ" и пЗначение == "ОП60" )
         Если( !Значения.ЧОТЧЕТНЫЙПЕРИОДГОД или Значения.ЧРАСЧЕТНЫЙПЕРИОДГОД )
            мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип описи <ОП60> должен быть заполнен Отчетный период, Расчетный период должен быть пустым";

      #     14) При значении реквизита Тип описи <ОП61> может быть заполнен только один из реквизитов Расчетный период или Отчетный период (ошибка 30).
      Если( пИндекс == "ТТИПОПИСИ" и пЗначение == "ОП61" )
         Если( Значения.ЧОТЧЕТНЫЙПЕРИОДГОД и Значения.ЧРАСЧЕТНЫЙПЕРИОДГОД )
            мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип описи <ОП61> может быть заполнен только один из реквизитов Расчетный период или Отчетный период";

      #     15) В реквизите Расчетный период указывается год, не меньший с 2002 (ошибка 30), Отчетный период может принимать одно из допустимых значений (приведены в приложении 1 в описании формата данных) (ошибка 30).
      #     Не проверяется.

      #     16) При значении реквизита Тип описи пустое реквизиты Расчетный период, От-четный период, Код категории застрахованного лица, Код дополнительного тари-фа, Территориальные условия (код), Тип сведений и Вид корректировки должны быть пустыми (ошибка 30).
      #     Не проверяется.

      #     17) При значении реквизита Тип описи <ОП60> реквизиты Код категории застрахованного лица, Код дополнительного тарифа, Территориальные условия (код), Тип сведений и Вид корректировки должны быть пустыми (ошибка 30).
      Если( пИндекс == "ТТИПОПИСИ" и пЗначение == "ОП60" )
         Если( Значения.ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА
           или Значения.ТКОДДОПОЛНИТЕЛЬНОГОТАРИФА
           или Значения.ТТЕРРИТОРИАЛЬНЫЕУСЛОВИЯКОД
           или Значения.ТТИПСВЕДЕНИЙ
           или Значения.ТВИДКОРРЕКТИРОВКИ )
            мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип описи <ОП60> реквизиты Код категории застрахованного лица, Код дополнительного тарифа, Территориальные условия (код), Тип сведений и Вид корректировки должны быть пустыми";

      #     18) При значении реквизита Тип описи <ОП61> реквизит Код категории застрахованного лица обязателен для заполнения и значение указывается в соответствии с одноименными классификаторами (ошибка 40).
      Если( пИндекс == "ТТИПОПИСИ" и пЗначение == "ОП61" )
      {
         Если( Найти( ",СЗВ--4-1,СЗВ--4-2,АДВ-11,", "," + Документ.ШПЗ + ",") )
         {
            Если( !Значения.ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА )
               мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип описи <ОП61> реквизит Код категории застрахованного лица обязателен для заполнения и значение указывается в соответствии с одноименными классификаторами";
         }
         Иначе
         {
            Если( Значения.ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА )
               мОшибки.Ошибка[пИндекс] = "Реквизит Код категории застрахованного не заполняется для " + Документ.ШПЗ;
         }
      }

      #     19) При значении реквизита Тип описи <ОП61> значения реквизита Код дополнительного тарифа должен быть либо пустым, либо указывается в соответствии с одноименным классификатором (ошибка 40).
      #     Не проверяется.

      #     20) При значении <ОП61> реквизита Тип описи и значении <ИН42> реквизита Тип документа записи о типе документа реквизит Территориальные условия (код) должен быть пустым либо указывается в соответствии с одноименным классификатором (ошибка 30). В остальных случаях Территориальные условия (код) должен быть пустым (ошибка 40).
      #     Не проверяется.

      #     21) При значении реквизита Тип описи <ОП61> реквизиты Тип сведений и Вид корректировки обязательны для заполнения и могут принимать одно из допустимых сочетаний значений (приведены в приложении 1 в описании формата данных) (ошибка 30).
      Если( пИндекс == "ТТИПОПИСИ" и пЗначение == "ОП61" )
         Если( Найти( ",СЗВ--4-1,СЗВ--4-2,СЗВ--К,", "," + Документ.ШПЗ + ",") )
         {
            Если( !Значения.ТТИПСВЕДЕНИЙ
                и !Значения.ТВИДКОРРЕКТИРОВКИ )
               мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип описи <ОП61> реквизиты Тип сведений и Вид корректировки обязательны для заполнения и могут принимать одно из допустимых сочетаний значений (приведены в приложении 1 в описании формата данных)";
         }
         Иначе
         {
            Если( Значения.ТТИПСВЕДЕНИЙ
              или Значения.ТВИДКОРРЕКТИРОВКИ )
               мОшибки.Ошибка[пИндекс] = "Реквизиты Тип сведений и Вид корректировки должны быть пустыми для " + Документ.ШПЗ;
         }

      #     22) При значении <БЕЗР> реквизита Код категории застрахованного лица Значения реквизитов Код дополнительного тарифа, Территориальные условия (код) должны быть пустыми (ошибка 30).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" и пЗначение == "БЕЗР" )
         Если( Значения.ТКОДДОПОЛНИТЕЛЬНОГОТАРИФА
           или Значения.ТТЕРРИТОРИАЛЬНЫЕУСЛОВИЯКОД )
            мОшибки.Ошибка[пИндекс] = "При значении <БЕЗР> реквизита Код категории застрахованного лица Значения реквизитов Код дополнительного тарифа, Территориальные условия (код) должны быть пустыми";
      
      Если( Найти( ",СЗВ--4-1,СЗВ--4-2,", "," + Документ.ШПЗ + ",") )
      {
      #      Допустимые сочетания значений реквизитов Тип сведений и Вид корректировки 
      #      Тип сведений│Вид корректировки
      #      ИСХД        │пустое
      #      пустое      │КОРР
      #      пустое      │ОТМН
      #      ПЕНС        │пустое
      #      ПЕНС        │КОРР
      #      ПЕНС        │ОТМН
         Если( пИндекс == "ТВИДКОРРЕКТИРОВКИ" )
         {
            Если( Значения.ТТИПСВЕДЕНИЙ == "ИСХД" и Значения.ТВИДКОРРЕКТИРОВКИ )
               мОшибки.Ошибка[пИндекс] = "Реквизит 'Вид корректировки', должен быть пустым, т.к. реквизит 'Тип сведений' имеет значение <ИСХД>";
            Если( Значения.ТТИПСВЕДЕНИЙ == ""     и Значения.ТВИДКОРРЕКТИРОВКИ == "" )
               мОшибки.Ошибка[пИндекс] = "Должен быть заполнен хотя бы один из реквизитов: 'Тип сведений' или 'Вид корректировки' для форм СЗВ-4-1 и СЗВ-4-2";
         }
      #     9) При значении реквизита Вид корректировки, отличном от <ОТМН>, Записи о пачке должны быть заполнены реквизиты Сумма начисленных страховых взносов: страховая часть (ошибка 30) и накопительная часть (предупреждение 10).
      #     При этом страховая и накопительная части могут находиться только в одном из допустимых соотношений, приведенных в Приложении №.4 с соответствующими сообщениями.
      #     Не проверяется

      #     10) Для значения реквизита Код категории застрахованного лица <БЕЗР> Записи о пачке значения всех реквизитов Суммае начислнных страховых взносов: страховая часть, накопительная часть и по дополнительному тарифу, реквизиты По временной нетрудоспособности, Отпуск без сохранения зарплаты должны быть равны нулю (ошибка 30).
         Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" )
            Если( пЗначение == "БЕЗР" )
               Если( Значения.чНачисленоСтраховаяЧасть != 0
                 или Значения.чНачисленоНакопительнаяЧасть != 0
                 или Значения.чНачисленоПоДополнительномуТарифу != 0 )
                  мОшибки.Ошибка[пИндекс] = "Для значения реквизита Код категории <БЕЗР> Записи о пачке значения всех реквизитов Сумма взносов: страховая, накопительная часть и по доп. тарифу, по временной нетрудти, Отпуск без сохранения зарплаты должны быть равны нулю";

      #     13) При значении реквизита Вид корректировки <ОТМН> Сумма начисленных страховых взносов: страховая часть, накопительная часть и по дополнительному тарифу, реквизиты По временной нетрудоспособности, Отпуск без сохранения зарплаты, Число основных записей о стаже должны быть нулевые (ошибка 30).
         Если( пИндекс == "ТВИДКОРРЕКТИРОВКИ" )
            Если( пЗначение == "ОТМН" )
               Если( Значения.чНачисленоСтраховаяЧасть != 0
                 или Значения.чНачисленоНакопительнаяЧасть != 0
                 или Значения.чНачисленоПоДополнительномуТарифу != 0 )
                  мОшибки.Ошибка[пИндекс] = "При значении Вид корректировки <ОТМН> Сумма страховых взносов: страховая, накопительная часть и по доп. тарифу, реквизиты По временной нетрудоспособности, Отпуск без сохранения зарплаты, Число основных записей о стаже должны быть нулевые";

      #     15) Сумма начисленных страховых взносов: по дополнительному тарифу должна быть заполнена, если заполнен реквизит Код дополнительного тарифа Записи о пачке (ошибка 30).
         Если( пИндекс == "ЧНАЧИСЛЕНОПОДОПОЛНИТЕЛЬНОМУТАРИФУ" )
            Если( !пЗначение и Значения.тКодДополнительногоТарифа )
               мОшибки.Ошибка[пИндекс] = "Сумма начисленных страховых взносов: по дополнительному тарифу должна быть заполнена, если заполнен реквизит Код дополнительного тарифа Записи о пачке";

      #     16) Если заполнена Сумма начисленных страховых взносов: по дополнительному тарифу, то должен быть заполнен реквизит Код дополнительного тарифа Записи о пачке (ошибка 30).
         Если( пИндекс == "ТКОДДОПОЛНИТЕЛЬНОГОТАРИФА" )
            Если( !пЗначение и Число( Значения.чНачисленоПоДополнительномуТарифу ) )
               мОшибки.Ошибка[пИндекс] = "Если заполнена Сумма начисленных страховых взносов: по дополнительному тарифу, то должен быть заполнен реквизит Код дополнительного тарифа Записи о пачке";
      }
   }
   Вернуть 0;
}

Функция ПроверкаПФ_ТИПД( Значения, мОшибки )
# Проверяется запись о типе документа
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Значение реквизита Число документов данного типа в пачке должно быть ненулевым (ошибка 40).
      #     Не проверяется
 
      #     2) Если реквизит Тип пачки имеет значение <СОБЕС>, то значение реквизита Тип документа может принимать единственное значение: <СПВП> (ошибка 40).
      #     Не проверяется, у нас всегда тип пачки ОПИСЬ
   }
   Вернуть 0;
}

Функция ПроверкаПФ_АНКТ( Значения, мОшибки )
# Проверяется Записи об анкетных данных застрахованного лица
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   перем пСимволыЧисла  = "0123456789";
   перем пСимволыРимскогоЧисла = "XIV";
   перем пАнглСимволы   = "ABCDEFGHIJKLMNOPRSTUVWXYZ";
   перем пРуссСимволы   = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";

   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 40). Пропуски номеров не допускаются (ошибка 30).
      #     Не проверяется
      
      #     2) Записи данного типа следуют подряд после записи о типе документа в порядке возрастания номеров записей (ошибка 40).
      #     Не проверяется

      #     3) Все символьные поля, за исключением поля Серия.Римские цифры при значении Типа документа <ПАСПОРТ> или <СВИД О РОЖД> вводятся буквами русского алфавита (предупреждение 10).
      Если( Найти( пИндекс, "СЕРИЯРИМСКИЕ" ) )
         Если( Значения.ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД != "ПАСПОРТ"
             и Значения.ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД != "СВИД О РОЖД" )
            Если( НедопустимыеСимволы( пЗначение, пАнглСимволы ) )
               мОшибки.Предупреждение[ пИндекс ] = "Все символьные поля, за исключением поля Серия.Римские цифры при значении Типа документа <ПАСПОРТ> или <СВИД О РОЖД> вводятся буквами русского алфавита";

      #     4) Реквизиты Фамилия, Имя, Пол, Дата рождения, Дата заполнения  обязательны для заполнения (ошибка 30).
      Если( пИндекс == "ТФАМИЛИЯ" или пИндекс == "ТИМЯ" или пИндекс == "ТПОЛ" или пИндекс == "ДДРСТАНДАРТНАЯДАТА" или пИндекс == "ДДАТАЗАПОЛНЕНИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Реквизиты Фамилия, Имя, Пол, Дата рождения, Дата заполнения обязательны для заполнения";

      #     5) Реквизит Отчество должен быть заполнен (предупреждение 20).
      Если( пИндекс == "ТОТЧЕСТВО" )
         Если( !пЗначение )
            мОшибки.Предупреждение[пИндекс] = "Реквизит Отчество должен быть заполнен";

      #     6) Дата заполнения не должна превышать Дату составления описи, указанную в Записи о пачке (ошибка 30).
      #     Не проверяется

      #     7) Если реквизит Тип даты рождения имеет значение <СТАНДАРТНАЯ>, должен быть заполнен реквизит Стандартная дата, а реквизиты Особая дата.день, Особая да-та.месяц, Особая дата.год должны быть пустыми (ошибка 30).
      Если( пИндекс == "ДДРСТАНДАРТНАЯДАТА" )
         Если( !пЗначение ) # У нас всегда СТАНДАРТ
            мОшибки.Ошибка[пИндекс] = "Если реквизит Тип даты рождения имеет значение <СТАНДАРТНАЯ>, должен быть заполнен реквизит Стандартная дата, а реквизиты Особая дата.день, Особая да-та.месяц, Особая дата.год должны быть пустыми";

      #     8)Если реквизит Тип даты рождения имеет значение <ОСОБАЯ> реквизит Стан-дартная дата должен быть пустым (ошибка 30) и допустимы только следующие варианты заполнения группы полей Особая дата (ошибка 30):
      #     - указан только Особая дата.год (Особая дата.день и Особая дата.месяц не ука-заны);
      #     - указаны только Особая дата.месяц и Особая дата.год (Особая дата.день не указан);
      #     - указаны Особая дата.день Особая дата.месяц Особая дата.год. Причем ука-занные в полях значения при объединении не могут давать правильной даты 
      #     Не проверяется

      #     9) Реквизит Место рождения должен быть заполнен (предупреждение10).
      Если( Найти( пИндекс, "ТМЕСТОРОЖД" ) )
         Если( !Значения.ТМЕСТОРОЖДНАЗВАНИЕНАС_ГОПУНКТА 
             и !Значения.ТМЕСТОРОЖДРАЙОН
             и !Значения.ТМЕСТОРОЖДОБЛАСТЬ
             и !Значения.ТМЕСТОРОЖДСТРАНА )
            мОшибки.Предупреждение[пИндекс] = "Реквизит Место рождения должен быть заполнен";


      #     13) Адрес регистрации должен быть указан (предупреждение 20)
      Если( пИндекс == "ТАДРЕСРЕГИСТРАЦИИ" )
         Если( !пЗначение )
            мОшибки.Предупреждение[пИндекс] = "Адрес регистрации должен быть указан";
      
      #     14) Реквизит Документ, удостоверяющий личность.Тип документа должен быть указан (ошибка 30).
      Если( пИндекс == "ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Реквизит Документ, удостоверяющий личность.Тип документа должен быть указан";
            
      #     15) При проверке реквизитов Документа, удостоверяющего личность, используются правила, приведенные в общих правилах заполнения полей записей.
      #     Проверяется в общем разделе

      #     16) Дата выдачи подтверждающего документа должна быть меньше или равна дате заполнения анкеты (ошибка 30).
      Если( пИндекс == "ДДОКУДОСТЛИЧНДАТАВЫДАЧИ" )
         Если( пЗначение > Значения.ДДАТАЗАПОЛНЕНИЯ )
            мОшибки.Ошибка[пИндекс] = "Дата выдачи подтверждающего документа должна быть меньше или равна дате заполнения анкеты";
   }
   ПроверкаПФ_МестаРождения( Значения, мОшибки );
   Вернуть 0;
}

Функция ПроверкаПФ_ОБМН( Значения, мОшибки )
# Проверяется Записи Заявления об обмене страхового свидетельства
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 40). Пропуски номеров не допускаются (ошибка 30).
      #     Не проверяется
      
      #     2) Страховой номер должен быть указан (ошибка 40).
      Если( пИндекс == "ТСТРАХОВОЙНОМЕР" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Страховой номер должен быть указан";
      
      #     3) Должны быть указаны следующие реквизиты (ошибка 30):
      #      ФИО из страхового свидетельства. Фамилия
      #      ФИО из страхового свидетельства. Имя
      #      Документ, удостоверяющий личность. Тип
      #      Документ, удостоверяющий личность. Дата выдачи
      Если( пИндекс == "ТФИОУКАЗВСТРАХСВИДФАМИЛИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: ФИО из страхового свидетельства. Фамилия";
      
      Если( пИндекс == "ТФИОУКАЗВСТРАХСВИДИМЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: ФИО из страхового свидетельства. Имя";
      
      Если( пИндекс == "ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Документ, удостоверяющий личность. Тип";
      
      Если( пИндекс == "ДДОКУДОСТЛИЧНДАТАВЫДАЧИ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Документ, удостоверяющий личность. Дата выдачи";
      
      #     4) Должен быть указан следующий реквизит (предупреждение 10):
      #      ФИО из страхового свидетельства. Фамилия
      #     Не проверяется, так как проверяется ранее

      #     5) Должен быть указан хотя бы один из следующих реквизитов (ошибка 30):
      #        Изменившиеся данные:
      #        Фамилия, Имя, Отчество, Гражданство, Пол, Дата рождения, Место рождения, Адрес регистрации,
      #        Адрес фактического места жительства, Признак отмены отчества, Признак отмены места рождения
      Если( пИндекс == "ТФАМИЛИЯ" )
         Если( !Значения.тФамилия
             и !Значения.тИмя
             и !Значения.тОтчество
             и !Значения.тПол
             и !Значения.дДРСтандартнаяДата
             и !Значения.тМестоРождТипМестаРождения
             и !Значения.тМестоРождНазваниеНас_гоПункта
             и !Значения.тМестоРождРайон
             и !Значения.тМестоРождОбласть
             и !Значения.тМестоРождСтрана
             и !Значения.тГражданство
             и !Значения.тАдресРегистрации
             и !Значения.тАдресМестаЖительстваФактический
             и !Значения.тПризнакОтменыОтчества
             и !Значения.тПризнакОтменыМестаРождения )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан хотя бы один из изменившихся реквизитов: Фамилия, Имя, Отчество, Гражданство, Пол, Дата рождения, Место рождения, Адрес регистрации, Адрес фактического места жительства, Признак отмены отчества, Признак отмены места рождения";
      
      #     6) Реквизиты Изменившиеся данные.(Фамилия, Имя, Отчество) не должны совпадать с одноименными реквизитами ФИО из страхового свидетельства.(Фамилия, Имя, Отчество) (ошибка 30).
      Если( пИндекс == "ТФИОУКАЗВСТРАХСВИДФАМИЛИЯ" )
         Если( Значения.тФамилия  == Значения.тФИОУказВСтрахСвидФамилия
           или Значения.тИмя      == Значения.тФИОУказВСтрахСвидИмя
           или Значения.тОтчество == Значения.тФИОУказВСтрахСвидОтчество )
            мОшибки.Ошибка[пИндекс] = "Реквизиты Изменившиеся данные.(Фамилия, Имя, Отчество) не должны совпадать с одноименными реквизитами ФИО из страхового свидетельства.(Фамилия, Имя, Отчество)";

      #     7) Если Признак отмены отчества = <ОТМН>, то реквизит Изменившиеся данные. Отчество должен быть пустой (ошибка 30).
      Если( пИндекс == "ТПРИЗНАКОТМЕНЫОТЧЕСТВА" )
         Если( пЗначение == "ОТМН" и Значения.тОтчество != "" )
            мОшибки.Ошибка[пИндекс] = "Если Признак отмены отчества = <ОТМН>, то реквизит Изменившиеся данные. Отчество должен быть пустой";
      
      #     8) Если Признак отмены места рождения = <ОТМН>, то все реквизиты группы Изменившиеся данные. Место рождения должны быть пустые (ошибка 30).
      Если( пИндекс == "ТПРИЗНАКОТМЕНЫМЕСТАРОЖДЕНИЯ" )
         Если( пЗначение == "ОТМН" 
             и ( Значения.тМестоРождТипМестаРождения != "" 
             или Значения.тМестоРождНазваниеНас_гоПункта != ""
             или Значения.тМестоРождРайон != ""
             или Значения.тМестоРождОбласть != ""
             или Значения.тМестоРождСтрана != "" ) )
            мОшибки.Ошибка[пИндекс] = "Если Признак отмены места рождения = <ОТМН>, то все реквизиты группы Изменившиеся данные. Место рождения должны быть пустые";
      
      #     9) Группа реквизитов Изменившиеся данные. Место рождения, кроме заполненного реквизита Тип места рождения, должны содержать еще хотя бы один заполненный реквизит (ошибка 30):
      #      Название населенного пункта,Район,Область,Страна
      Если( пИндекс == "ТМЕСТОРОЖДТИПМЕСТАРОЖДЕНИЯ" )
         Если( пЗначение == "СТАНДАРТ"
             и Значения.тМестоРождНазваниеНас_гоПункта == ""
             и Значения.тМестоРождРайон == ""
             и Значения.тМестоРождОбласть == ""
             и Значения.тМестоРождСтрана == "" )
            мОшибки.Ошибка[пИндекс] = "Группа реквизитов Изменившиеся данные. Место рождения, кроме заполненного реквизита Тип места рождения, должны содержать еще хотя бы один заполненный реквизит: Название населенного пункта,Район,Область,Страна";
      
      #     10) Если заполнен реквизит Изменившиеся данные. Дата рождения, для его проверки используются те же правила, что и для <Анкеты застрахованного лица>.
      #     Не проверяется
      
      #     11) Если Признак отмены места рождения = пустое, правила проверки группы реквизитов Место рождения используются те же, что и для записи об анкетных данных застрахованного лица.
      #     Проверяется в конце
      
      #     12) При проверке группы реквизитов Документ, удостоверяющий личность, используются правила, приведенные в общих правилах заполнения полей записей
      #     Проверяется в общем разделе
      
      #     13) Дата выдачи подтверждающего документа должна быть меньше или равна дате заполнения анкеты (ошибка 30).
      Если( пИндекс == "ДДОКУДОСТЛИЧНДАТАВЫДАЧИ" )
         Если( пЗначение > Значения.ДДАТАЗАПОЛНЕНИЯ )
            мОшибки.Ошибка[пИндекс] = "Дата выдачи подтверждающего документа должна быть меньше или равна дате заполнения анкеты";
   }
   #     11) Если Признак отмены места рождения = пустое, правила проверки группы реквизитов Место рождения используются те же, что и для записи об анкетных данных застрахованного лица.
   Если( Значения.ТМЕСТОРОЖДТИПМЕСТАРОЖДЕНИЯ == "СТАНДАРТ" )
      ПроверкаПФ_МестаРождения( Значения, мОшибки );
   
   Вернуть 0;
}

Функция ПроверкаПФ_ДУБЛ( Значения, мОшибки )
# Проверяется
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 40). Пропуски номеров не допускаются (ошибка 30).
      #     Не проверяется

      #     2) Должны быть указаны следующие реквизиты (ошибка 30):
      #      Данные, указанные в страховом свидетельстве. Фамилия
      #      Данные, указанные в страховом свидетельстве. Имя
      #      Данные, указанные в страховом свидетельстве. Пол
      #      Данные, указанные в страховом свидетельстве. Дата рождения
      #      Документ, удостоверяющий личность. Тип
      #      Документ, удостоверяющий личность. Дата выдачи
      Если( пИндекс == "ТФИОУКАЗВСТРАХСВИДФАМИЛИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Данные, указанные в страховом свидетельстве. Фамилия";
      
      Если( пИндекс == "ТФИОУКАЗВСТРАХСВИДИМЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Данные, указанные в страховом свидетельстве. Имя";

      Если( пИндекс == "ТПОЛУКАЗВСТРАХСВИД" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Данные, указанные в страховом свидетельстве. Пол";
 
      Если( пИндекс == "ДДРСТАНДАРТНАЯДАТАУКАЗВСТРАХСВИД" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Данные, указанные в страховом свидетельстве. Дата рождения";
      
      Если( пИндекс == "ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Документ, удостоверяющий личность. Тип";
      
      Если( пИндекс == "ДДОКУДОСТЛИЧНДАТАВЫДАЧИ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должен быть указан реквизит: Документ, удостоверяющий личность. Дата выдачи";

      #     3) Должны быть указаны следующие реквизиты (предупреждение 20):
      #      Данные, указанные в страховом свидетельстве. Отчество
      #      Данные, указанные в страховом свидетельстве. Место рождения
      Если( пИндекс == "ТФИОУКАЗВСТРАХСВИДОТЧЕСТВО" )
         Если( !пЗначение )
            мОшибки.Предупреждение[пИндекс] = "Должен быть указан реквизит: Данные, указанные в страховом свидетельстве. Отчество";

      Если( пИндекс == "ТМЕСТОРОЖДНАЗВАНИЕНАС_ГОПУНКТАУКАЗВСТРАХСВИД" )
         Если( Значения.тМестоРождНазваниеНас_гоПунктаУказВСтрахСвид == ""
             и Значения.тМестоРождРайонУказВСтрахСвид == ""
             и Значения.тМестоРождОбластьУказВСтрахСвид == ""
             и Значения.тМестоРождСтранаУказВСтрахСвид == "" )
            мОшибки.Предупреждение[пИндекс] = "Должен быть указан реквизит: Данные, указанные в страховом свидетельстве. Место рождения";

      #     4) Если указан страховой номер, то Отметка о представлении сведений о стаже и заработке не должна иметь значение пустое (предупреждение 10).
      Если( пИндекс == "тСведенияПредоставлялись" )
         Если( Значения.тСтраховойНомер и !пЗначение )
            мОшибки.Предупреждение[пИндекс] = "Если указан страховой номер, то Отметка о представлении сведений о стаже и заработке не должна иметь значение пустое";

      #     5) При проверках реквизитов в случае отмены отчества или места рождения используются те же правила, что и для записи Заявления об обмене страхового свидетельства.
      #     *) Если Признак отмены отчества = <ОТМН>, то реквизит Изменившиеся данные. Отчество должен быть пустой (ошибка 30).
      Если( пИндекс == "ТПРИЗНАКОТМЕНЫОТЧЕСТВА" )
         Если( пЗначение == "ОТМН" и Значения.тОтчество != "" )
            мОшибки.Ошибка[пИндекс] = "Если Признак отмены отчества = <ОТМН>, то реквизит Изменившиеся данные. Отчество должен быть пустой";

      #     *) Если Признак отмены места рождения = <ОТМН>, то все реквизиты группы Изменившиеся данные. Место рождения должны быть пустые (ошибка 30).
      Если( пИндекс == "ТПРИЗНАКОТМЕНЫМЕСТАРОЖДЕНИЯ" )
         Если( пЗначение == "ОТМН" 
             и ( Значения.тМестоРождТипМестаРождения != "" 
             или Значения.тМестоРождНазваниеНас_гоПункта != ""
             или Значения.тМестоРождРайон != ""
             или Значения.тМестоРождОбласть != ""
             или Значения.тМестоРождСтрана != "" ) )
            мОшибки.Ошибка[пИндекс] = "Если Признак отмены места рождения = <ОТМН>, то все реквизиты группы Изменившиеся данные. Место рождения должны быть пустые";

      #     6) Для проверки групп полей Дата рождения и Место рождения используются те же правила, что и для записи об анкетных данных застрахованного лица.
      #     Проверяется в конце

      #     7) При проверках реквизитов подтверждающего документа используются правила, приведенные в общих правилах заполнения полей записей.
      #     Проверяется в общем разделе
   }
   #     6) Для проверки групп полей Дата рождения и Место рождения используются те же правила, что и для записи об анкетных данных застрахованного лица.
   Если( Значения.ТМЕСТОРОЖДТИПМЕСТАРОЖДЕНИЯ == "СТАНДАРТ" )
      ПроверкаПФ_МестаРождения( Значения, мОшибки );
   
   Вернуть 0;
}

Функция ПроверкаПФ_СМРТ( Значения, мОшибки )
# Проверяется Записи Справки о смерти
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 40). Пропуски номеров не допускаются (ошибка 30).
      #     Не проверяется
      
      #     2) Должны быть указаны следующие реквизиты (ошибка 30):
      #      Фамилия,Имя,Пол,Дата рождения,Дата смерти,Дата заполнения,Номер записи акта,Дата записи акта
      Если( пИндекс == "ТФАМИЛИЯ"
        или пИндекс == "ТИМЯ"
        или пИндекс == "ТПОЛ"
        или пИндекс == "ДДРСТАНДАРТНАЯДАТА"
        или пИндекс == "ДДАТАСМЕРТИ"
        или пИндекс == "ДДАТАЗАПОЛНЕНИЯ"
        или пИндекс == "ТНОМЕРЗАПИСИАКТА"
        или пИндекс == "ДДАТАЗАПИСИАКТА" )
          Если( !пЗначение )
             мОшибки.Ошибка[пИндекс] = "Должны быть указаны следующие реквизиты: Фамилия,Имя,Пол,Дата рождения,Дата смерти,Дата заполнения,Номер записи акта,Дата записи акта";

      #     3) Должны быть указаны следующие реквизиты (предупреждение 10):
      #      Отчество,Где работал умерший,Страховой номер,Тип подтверждающего документа,Дата выдачи подтверждающего документа
      Если( пИндекс == "ТОТЧЕСТВО"
        или пИндекс == "ТГДЕРАБОТАЛУМЕРШИЙ"
        или пИндекс == "ТСТРАХОВОЙНОМЕР"
        или пИндекс == "ТДОКУДОСТЛИЧНТИПДОКУМЕНТАКОД"
        или пИндекс == "ДДОКУДОСТЛИЧНДАТАВЫДАЧИ" )
          Если( !пЗначение )
             мОшибки.Предупреждение[пИндекс] = "Должны быть указаны следующие реквизиты: Отчество,Где работал умерший,Страховой номер,Тип подтверждающего документа,Дата выдачи подтверждающего документа";

      #      Адрес последнего постоянного места жительства
      Если( пИндекс == "ТАДРЕСПОСЛЕДНЕГОПОСТОЯННОГОМЕСТАЖИТЕЛЬСТВА" )
          Если( !ДопустимыеСимволы( пЗначение, "," ) )
             мОшибки.Предупреждение[пИндекс] = "Должны быть указаны следующие реквизиты: Адрес последнего постоянного места жительства";

      #      Место рождения
      Если( пИндекс == "ТМЕСТОРОЖДНАЗВАНИЕНАС_ГОПУНКТА" )
          Если( !Значения.тМестоРождНазваниеНас_гоПункта
              и !Значения.тМестоРождРайон
              и !Значения.тМестоРождОбласть
              и !Значения.тМестоРождСтрана )
             мОшибки.Предупреждение[пИндекс] = "Должны быть указаны следующие реквизиты: Место рождения";

      #     4) Для проверки групп реквизитов Дата рождения и Место рождения используются те же правила, что и для записи об анкетных данных застрахованного лица.
      #     Проверяется в конце

      #     5) Дата смерти должна быть больше Даты рождения (ошибка 30).
      Если( пИндекс == "ДДАТАСМЕРТИ" и пЗначение )
          Если( пЗначение < Значения.дДРСтандартнаяДата )
             мОшибки.Ошибка[пИндекс] = "Дата смерти должна быть больше Даты рождения";

      #     6) Дата записи акта должна быть больше либо равна Дате смерти (ошибка 30).
      Если( пИндекс == "ДДАТАЗАПИСИАКТА" и пЗначение )
          Если( пЗначение < Значения.дДатаСмерти )
             мОшибки.Ошибка[пИндекс] = "Дата записи акта должна быть больше либо равна Дате смерти";

      #     7) Дата записи акта должна быть меньше либо равна текущей дате (ошибка 30).
      Если( пИндекс == "ДДАТАЗАПИСИАКТА" и пЗначение )
          Если( пЗначение > ТекДат() )
             мОшибки.Ошибка[пИндекс] = "Дата записи акта должна быть меньше либо равна текущей дате";

      #     8) Дата заполнения должна быть меньше либо равна Дате записи акта (ошибка 30).
      #     Не проверяется
   }
   #     4) Для проверки групп реквизитов Дата рождения и Место рождения используются те же правила, что и для записи об анкетных данных застрахованного лица.
   ПроверкаПФ_МестаРождения( Значения, мОшибки );

   Вернуть 0;
}

Функция ПроверкаПФ_ИН41_ИН42( Значения, мОшибки )
# Проверяется Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-4-1 или СЗВ-4-2
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #  21. Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-4-1 или СЗВ-4-2 (общие правила)
      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 30). Пропуски номеров не допускаются (ошибка 30).
      #     Не проверяется
      
      #     2) Реквизит Страховой номер должен быть указан (ошибка 40).
      Если( пИндекс == "ТСТРАХОВОЙНОМЕР" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Реквизит Страховой номер должен быть указан";
      
      #     3) Реквизиты Фамилия, Имя, Расчетный период, Дата заполнения обязательны для заполнения (ошибка 30).
      Если( пИндекс == "ТФАМИЛИЯ"
        или пИндекс == "ТИМЯ" 
        или пИндекс == "ЧРАСЧЕТНЫЙПЕРИОДГОД"
        или пИндекс == "ДДАТАЗАПОЛНЕНИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Реквизиты Фамилия, Имя, Расчетный период, Дата заполнения обязательны для заполнения";
      
      #     4) Дата заполнения не должна превышать Дату составления описи, указанную в Записи о пачке (ошибка 30).
      #     Не проверяется

      #     5) Дата заполнения должна быть позже последнего числа Расчетного периода при значениях <ИСХД> или пустое реквизита Тип сведений Записи о пачке (предупреждение 20).
      #     Не проверяется
      
      #     6) Реквизит Отчество должен быть заполнен (предупреждение 10).
      Если( пИндекс == "ТОТЧЕСТВО" )
         Если( !пЗначение )
            мОшибки.Предупреждение[пИндекс] = "Реквизит Отчество должен быть заполнен";
      
      #     7) В реквизите Расчетный период обязательно указывается год, начиная с 2002 (ошибка 30).
      Если( пИндекс == "ЧРАСЧЕТНЫЙПЕРИОДГОД" )
         Если( пЗначение < 2002 )
            мОшибки.Ошибка[пИндекс] = "В реквизите Расчетный период обязательно указывается год, начиная с 2002";
      
      #     8) Адрес для информирования должен быть указан: для расчетного периода 2002 года - ошибка 30; для расчетный периодов больше 2002 года - предупреждение 10.
      Если( пИндекс == "ТАДРЕСДЛЯИНФОРМИРОВАНИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Адрес для информирования должен быть указан: для расчетного периода 2002 года - ошибка; для расчетных периодов больше 2002 года - предупреждение.";
      
      #     9) При значении реквизита Вид корректировки, отличном от <ОТМН>, Записи о пачке должны быть заполнены реквизиты Сумма начисленных страховых взносов: страховая часть (ошибка 30) и накопительная часть (предупреждение 10). При этом страховая и накопительная части могут находиться только в одном из допустимых соотношений, приведенных в Приложении №.4 с соответ-ствующими сообщениями.
      #     Проверяется при проверке пачки
      
      #     10) Для значения реквизита Код категории застрахованного лица <БЕЗР> Записи о пачке значения всех реквизитов Суммае начислнных страховых взносов: страховая часть, накопительная часть и по дополнительному тарифу, реквизиты По временной нетрудоспособности, Отпуск без сохранения зарплаты должны быть равны нулю (ошибка 30).
      #     Проверяется при проверке пачки
      
      #     11) Если при значении реквизита Код категории застрахованного лица, отличном от <БЕЗР>, и при значении реквизита Вид корректировки, отличном от <ОТМН>, Записи о пачке Сумма начисленных страховых взносов: страховая часть, накопительная часть и по дополнительному тарифу имеют нулевые значения (все три составляющие), то должен быть указан реквизит По временной не-трудоспособности (ошибка 30).
      #     Не проверяется
      
      #     12) В реквизитах Сумма начисленных страховых взносов: страховая часть, накопительная часть и по дополнительному тарифу должны быть указаны копейки (ошибка 30).
      #     Не проверяется
      
      #     13) При значении реквизита Вид корректировки <ОТМН> Сумма начисленных страховых взносов: страховая часть, накопительная часть и по дополнительному тарифу, реквизиты По временной нетрудоспособности, Отпуск без сохранения зарплаты, Число основных записей о стаже должны быть нулевые (ошибка 30).
      #     Проверяется при проверке пачки
      
      #     14) Если заполнена Сумма начисленных страховых взносов: по дополнительному тарифу, то должна быть заполнена Сумма начисленных страховых взносов: страховая часть (ошибка 30).
      Если( пИндекс == "ЧНАЧИСЛЕНОПОДОПОЛНИТЕЛЬНОМУТАРИФУ" )
         Если( пЗначение и !Значения.чНачисленоСтраховаяЧасть )
            мОшибки.Ошибка[пИндекс] = "Если заполнена Сумма начисленных страховых взносов: по дополнительному тарифу, то должна быть заполнена Сумма начисленных страховых взносов: страховая часть";

      #     15) Сумма начисленных страховых взносов: по дополнительному тарифу должна быть заполнена, если заполнен реквизит Код дополнительного тарифа Записи о пачке (ошибка 30).
      #     Проверяется при проверке пачки
      
      #     16) Если заполнена Сумма начисленных страховых взносов: по дополнительному тарифу, то должен быть заполнен реквизит Код дополнительного тарифа Записи о пачке (ошибка 30).
      #     Проверяется при проверке пачки

      #  22. Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-4-1 (частные правила)
      Если( Значения.ТТИПЗАПИСИ == "ИН41" )
      {
         #     17) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 30). Пропуски номеров не допускаются (ошибка 30).
         #     Не проверяется

         #     18) Значения реквизитов По временной нетрудоспособности (месяцев, дней) и Отпуск без сохранения заработной платы (месяцев, дней) в сумме не должны превышать календарный период, определяемый реквизитами Начало периода первой Основной записи о стаже и Конец периода последней Основной записи о стаже (ошибка 30).
         #     Не проверяется, нет данных о стаже

         #     19) При значении <БЕЗР> реквизита Код категории застрахованного лица и при значении реквизита Вид корректировки, отличном от  <ОТМН>,  Записи о пачке должно быть указано Число основных записей о стаже (ошибка 30).
         #     Не проверяется, нет данных о пачке

         #     20) При значении реквизита Вид корректировки, отличном от  <ОТМН>, Записи о пачке не могут быть одновременно нулевыми все три составляющие Суммы начисленных страховых взносов (страховая, накопительная части и по дополнительному тарифу) и Число основных записей о стаже (ошибка 30).
         #     Не провряется, нет данных о пачке
      }

      #  23. Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-4-2 (частные правила)
      Если( Значения.ТТИПЗАПИСИ == "ИН42" )
      {
         #     21) Период работы: С, По должен быть заполнен (предупреждение 10).
         Если( пИндекс == "ДПЕРИОДРАБОТЫС" или пИндекс == "ДПЕРИОДРАБОТЫПО")
            Если( !пЗначение )
               мОшибки.Предупреждение[пИндекс] = "Период работы: С, По должен быть заполнен";

         #     22) Период работы: С, По должен находиться в пределах Расчетного периода (ошибка 30).
         #     Не прооверяется, СтажВедомость() все равно обрезает
         
         #     23) Значение Период работы: С не должен превышать значение Период работы: По (ошибка 30).
         #     Не проверяется

         #     24) При значении реквизита Вид корректировки <ОТМН> Записи о пачке Период работы: С, По должен быть нулевым (ошибка 30).
         #     Не проверяется, нет данных о пачке
         
         #     25) Значения реквизитов По временной нетрудоспособности (месяцев, дней) и Отпуск без сохранения заработной платы (месяцев, дней) в сумме не должны превышать календарный период, определяемый реквизитами Период работы: С, По (ошибка 30).
         Если( пИндекс == "ЧПОВРЕМЕННОЙНЕТРУДОСПОСОБНОСТИМЕСЯЦЕВ" )
            Если( ( Значения.чОтпускБезСохраненияЗарплатыМесяцев * 30 + Значения.чОтпускБезСохраненияЗарплатыДней
                  + Значения.чПоВременнойНетрудоспособностиМесяцев * 30 + Значения.чПоВременнойНетрудоспособностиДней )
                  > ( п = Значения.дПериодРаботыПо - Значения.дПериодРаботыС ) )
               мОшибки.Ошибки[пИндекс] = "Значения реквизитов По временной нетрудоспособности (месяцев, дней) и Отпуск без сохранения заработной платы (месяцев, дней) в сумме не должны превышать календарный период, определяемый реквизитами Период работы: С, По";
         
         #     26) При значении <БЕЗР> реквизита Код категории застрахованного лица и при значении реквизита Вид корректировки, отличном от <ОТМН> Записи о пачке значение реквизита Период работы должно быть указано (ошибка 30).
         #     Не проверяется, нет данных о пачке
         
         #     27) При значении реквизита Вид корректировки, отличном от <ОТМН>, Записи о пачке не могут быть одновременно нулевыми все три составляющие Сумма начисленных страховых взносов (страховая, накопительная части и по дополнительному тарифу) и пустыми реквизиты Период работы: С, По (ошибка 30).
         #     Не проверяется, нет данных о пачке
      }
      #      20. Требования по проверке сочетаний вида стажа по  формам СЗВ-1, СЗВ-3, СЗВ-4-1 
      #      Не проверяется, очень сложно
   }
   Вернуть 0;
}

Функция ПроверкаПФ_СВОД( Значения, мОшибки )
# Проверяется Сводная ведомость форм документов СЗВ-3
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
   # 24. Записи Сводная ведомость форм документов СЗВ-3 (общие правила)
      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 30). Пропуски номеров не допускаются (ошибка 30).
      # Не проверяется

      #    2) Должны быть указаны следующие реквизиты (ошибка 30):
      #       Количество пачек с исходными документами СЗВ-3;
      #       Количество исходных документов СЗВ-3;
      #       Код категории застрахованного лица.
      Если( пИндекс == "ЧКОЛИЧЕСТВОПАЧЕКСИСХОДНЫМИДОКУМЕНТАМИСЗВ3"
        или пИндекс == "ЧКОЛИЧЕСТВОИСХОДНЫХДОКУМЕНТОВСЗВ3"
        или пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Должны быть указаны следующие реквизиты: Количество пачек с исходными документами, Количество исходных документов, Код категории застразованного лица";

      #    3) Реквизит Отчетный период может принимать одно из допустимых значений (приведены ниже), но начинаться не ранее 1 января 2001 года (ошибка 30). 
      Если( пИндекс == "ЧОТЧЕТНЫЙПЕРИОДКВАРТАЛ" )
      {
         ВыборПо( Значения.чОтчетныйПериодГод )
         {
            Выбор 2001:
            {
                ; # Допустимо все от 0 до 9
            }
            Выбор 2002:
            {
               Если( !Найти( ",0,", "," + пЗначение + "," ) )
                  мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период для 2002 года может принимать одно значение: 0.";
            }
            Иначе
               мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период год может быть от 2001 до 2002";
         }
      }

      #    4) Значение реквизита Код категории застрахованного лица указывается в соответствии с одноименным классификатором и отчетным периодом (ошибка 30).
      # Не проверяется - заполняется всегда

      #    5) В записях с различным значением реквизита Номер документа в пачке значение реквизита Код категории застрахованного лица должно быть различным (ошибка 30).
      # Не проверяется

      #    6) Недопустимо указание для пачек от работодателей в реквизите Код категории застрахованного лица следующего значения (ошибка 30): 
      #       Индивидуальный предприниматель> (код <ИП>);
      #       Индивидуальный предприниматель - инвалид> (код <ИПИВ>);
      #       Индивидуальный предприниматель, уплачивающий единый налог на вмененный доход> (код <ИПЕД>)
      #       Лица, получающие пособие по безработице (код <БЕЗР>).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" )
         Если( пЗначение == "ИП"
           или пЗначение == "ИПИВ"
           или пЗначение == "БЕЗР"
           или пЗначение == "ИПЕД" )
            мОшибки.Ошибка[пИндекс] = "Недопустимо указание для пачек от работодателей в реквизите Код категории застрахованного лица следующего значения (ИП, ИПИВ, БЕЗР, ИПЕД)";
      
      #    7) В реквизитах ИТОГО - заработок (вознаграждение), доход, ИТОГО - в том числе пособие по временной нетрудоспособности, стипендия, ИТОГО - начислено взносов в ПФР, ИТОГО - перечислено взносов в ПФР должны быть указаны копейки (ошибка 30).
      # Не проверяется
      
      #    8) ИТОГО - заработок (вознаграждение), доход должно быть равно (с точностью до 1 рубля) сумме значений реквизита Заработок (вознаграждение), доход, указанных в записях, содержащих сведения о заработке и доходе о начислениях, относящихся к данной записи (ошибка 30).
      # Не проверяется
      
      #    9) ИТОГО - в том числе пособие по временной нетрудоспособности, стипендия  должно быть равно (с точностью до 1 рубля) сумме значений реквизита В том числе пособие по временной нетрудоспособности, стипендия, указанных в записях, содержащих сведения о заработке и доходе о начислениях, относящихся к данной записи  (ошибка 30).
      # Не проверяется
      
      #    10) ИТОГО - начислено взносов в ПФР (с точностью до 1 рубля) должно быть равно значению реквизита Начислено взносов в ПФР, указанному в последней из записей, содержащих  сведения о заработке и доходе о начислениях, относящихся к данной записи (ошибка 30).
      # Не проверяется
      
      #    11) ИТОГО - перечислено взносов в ПФР (с точностью до 1 рубля) должно быть равно значению реквизита Перечислено взносов в ПФР, указанному в последней из записей, содержащих  сведения о заработке и доходе о начислениях, относящихся к данной записи (ошибка 30).
      # Не проверяется
      
      #    12) ИТОГО - заработок (вознаграждение), доход и ИТОГО - в том числе пособие по временной нетрудоспособности, стипендия должны быть больше либо равны нулю (предупреждение 20).
      Если( пИндекс == "ЧЗАРАБОТОКВСЕГО"
        или пИндекс == "ЧЗАРАБОТОКПОВРЕМЕННОЙНЕТРУДОСПОСОБНОСТИ" )
         Если( пЗначение < 0 )
            мОшибки.Предупреждение[пИндекс] = "ИТОГО - заработок (вознаграждение), доход и ИТОГО - в том числе пособие по временной нетрудоспособности, стипендия должны быть больше либо равны нулю";
      
      #    13) ИТОГО - начислено взносов в ПФР и ИТОГО - перечислено взносов в ПФР должны быть больше либо равны нулю (предупреждение 20).
      Если( пИндекс == "ЧНАЧИСЛЕННОВЗНОСОВ"
        или пИндекс == "ЧПЕРЕЧИСЛЕНОВЗНОСОВ" )
         Если( пЗначение < 0 )
            мОшибки.Предупреждение[пИндекс] = "ИТОГО - начислено взносов в ПФР и ИТОГО - перечислено взносов в ПФР должны быть больше либо равны нулю";
   
   # 25. Записи Сводная ведомость форм документов СЗВ-3 (особые случаи)
      #    14) Если реквизит Код категории застрахованного лица имеет значение <АВИА>, то значение реквизита Номер документа в пачке должно быть наибольшим (ошибка 30).
      # Не проверяется

      #    15) Если реквизит Код категории застрахованного лица имеет значение <АВИА>, то хотя бы одно из значений реквизитов Задолженность по уплате взносов в ПФР на конец отчетного периода, Итого - начислено взносов в ПФР, Итого - перечислено взносов в ПФР должно быть ненулевым (ошибка 30).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" )
         Если( ( пЗначение == "АВИА" )
            и  ( !ЗНАЧЕНИЯ.чзадолженностьпоуплатевзносовнаконецотчетногопериода
             и !ЗНАЧЕНИЯ.чначисленновзносов
             и !ЗНАЧЕНИЯ.чперечисленовзносов ))
            мОшибки.Предупреждение[пИндекс] = "Хотя бы одно из значений реквизитов Задолженность по уплате взносов в ПФР на конец отчетного периода, Итого - начислено взносов в ПФР, Итого - перечислено взносов в ПФР должно быть ненулевым";
           
      #    16) Если реквизит Код категории застрахованного лица имеет значение <АВИА>, то значение реквизита Итого - перечислено взносов в ПФР должно быть равно (с точностью до 1 рубля) должно быть равно значению реквизита Начислено взносов в ПФР, указанному в последней из записей, содержащих  сведения о заработке и доходе о начислениях, относящихся к данной записи (предупреждение 20).
      # Не проверяется

      #    17) Если значение реквизита Номер документа в пачке имеет наименьшее значение и значение реквизита Код категории застрахованного лица не равно <АВИА>, то хотя бы одно из значений реквизитов Задолженность по уплате взносов в ПФР на конец отчетного периода, Итого - начислено взносов в ПФР, Итого - перечислено взносов в ПФР должно быть больше нуля (предупреждение 20).
      # Не проверяется

   # 26. Записи, содержащие общие сведения о численности, заработке и доходе (общие правила)
   # Не проверяется

   # 27. Записи, содержащие общие сведения о численности, заработке и доходе застрахованных лиц (особые случаи)
   # Не проверяется
   }  
   Вернуть 0;
}

Функция ПроверкаПФ_ВУПЛ( Значения, мОшибки )
# Проверяется Записи Ведомость уплаты страховых взносов АДВ-11
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #     1) Записей данного типа может быть только одна (ошибка 50).
      Если( пИндекс == "ЧНОМЕРДОКУМЕНТАВПАЧКЕ" )
         Если( пЗначение >= 2 )
            мОшибки.Ошибки[пИндекс] = "Записей данного типа может быть только одна";

      #     2) Должны быть указаны следующие реквизиты (ошибка 30):
      #     · количество пачек с документами СЗВ-4-1 и СЗВ-4-2;
      #     · число застрахованных лиц, представленных в формах СЗВ-4-1 и СЗВ-4-2;
      #     · код основного тарифа;
      #     · расчетный период;
      #     · дата действия;
      #     · дата заполнения.
      Если( пИндекс == "ЧКОЛИЧЕСТВОПАЧЕКСДОКУМЕНТАМИСЗВ41ИСЗВ42" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Должен быть указан реквизит: количество пачек с документами СЗВ-4-1 и СЗВ-4-2";

      Если( пИндекс == "ЧЧИСЛОЗАСТРАХОВАННЫХЛИЦПРЕДСТАВЛЕННЫХВФОРМАХСЗВ41ИСЗВ42" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Должен быть указан реквизит: число застрахованных лиц, представленных в формах СЗВ-4-1 и СЗВ-4-2";

      Если( пИндекс == "ТКОДОСНОВНОГОТАРИФА" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Должен быть указан реквизит: код основного тарифа";

      Если( пИндекс == "ЧРАСЧЕТНЫЙПЕРИОДГОД" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Должен быть указан реквизит: расчетный период";

      Если( пИндекс == "ДДАТАДЕЙСТВИЯ" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Должен быть указан реквизит: дата действия";

      Если( пИндекс == "ДДАТАЗАПОЛНЕНИЯ" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Должен быть указан реквизит: дата заполнения";

      #     3) В реквизите Расчетный период обязательно указывается год, начиная с 2002 (ошибка 30).
      Если( пИндекс == "ЧРАСЧЕТНЫЙПЕРИОДГОД" и пЗначение < 2002 )
         мОшибки.Ошибки[пИндекс] = "В реквизите Расчетный период обязательно указывается год, начиная с 2002";

      #     4) Дата действия должна находиться в рамках Расчетного периода (ошибка 30).
      #     Не проверяется

      #     5) Значение реквизита Код основного тарифа (код категории застрахованного лица) указывается в соответствии с одноименным классификатором (ошибка 40).
      Если( пИндекс == "ТКОДОСНОВНОГОТАРИФА" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Значение реквизита Код основного тарифа (код категории застрахованного лица) указывается в соответствии с одноименным классификатором";

      #     6) Значение реквизита Код дополнительного тарифа указывается в соответствии с одноименным классификатором (ошибка 40).
      #     Не проверяется

      #     3) Недопустимо указание в реквизите Код основного тарифа (код категории застрахованного лица) значения <БЕЗР> (ошибка 40).
      Если( пИндекс == "ТКОДОСНОВНОГОТАРИФА" и пЗначение == "БЕЗР" )
         мОшибки.Ошибки[пИндекс] = "Недопустимо указание в реквизите Код основного тарифа (код категории застрахованного лица) значения <БЕЗР>";

      #     4) Если указан Код дополнительного тарифа, то должен быть указан Код основного тарифа (ошибка 30).
      Если( пИндекс == "ТКОДДОПОЛНИТЕЛЬНОГОТАРИФА" и пЗначение )
         Если( !Значения.тКодОсновногоТарифа )
         мОшибки.Ошибки[пИндекс] = "Если указан Код дополнительного тарифа, то должен быть указан Код основного тарифа";

      #     5) Дата заполнения должна быть больше либо равна Дате действия (ошибка 30).
      #     Не проверяется

      #     1) Значение реквизита Признак тарифа должно принимать следующие  значения (ошибка 30):
      #     <М> - для расчетного периода, в котором применялся максимальный тариф начисления  взносов в ПФР на страховую и накопительную часть трудовой пенсии;
      #     <Р> - для расчетного периода, в котором применялась регрессивная шкала начисления взносов в ПФР на страховую и накопительную часть трудовой пенсии.
      Если( пИндекс == "ТПРИЗНАКТАРИФА" )
         Если( пЗначение != "М" и пЗначение != "Р" )
            мОшибки.Ошибки[пИндекс] = "Значение реквизита Признак тарифа должно принимать следующие значения <М>, <Р>";

      #     2) Значения реквизитов Начислено, ИТОГО задолженность на начало периода, ИТОГО уплачено, ИТОГО задолженность на начало периода должны быть указаны с точностью до рубля (ошибка 30).
      Если( пИндекс == "ЧНАЧИСЛЕНОСТРАХОВАЯЧАСТЬ"
        или пИндекс == "ЧНАЧИСЛЕНОНАКОПИТЕЛЬНАЯЧАСТЬ"
        или пИндекс == "ЧНАЧИСЛЕНОПОДОПОЛНИТЕЛЬНОМУТАРИФУ"
        или пИндекс == "ЧЗАДОЛЖЕННОСТЬНАНАЧАЛОПЕРИОДАСТРАХОВАЯЧАСТЬ"
        или пИндекс == "ЧЗАДОЛЖЕННОСТЬНАНАЧАЛОПЕРИОДАНАКОПИТЕЛЬНАЯЧАСТЬ"
        или пИндекс == "ЧЗАДОЛЖЕННОСТЬНАНАЧАЛОПЕРИОДАПОДОПОЛНИТЕЛЬНОМУТАРИФУ"
        или пИндекс == "ЧУПЛАЧЕНОСТРАХОВАЯЧАСТЬ"
        или пИндекс == "ЧУПЛАЧЕНОНАКОПИТЕЛЬНАЯЧАСТЬ"
        или пИндекс == "ЧУПЛАЧЕНОПОДОПОЛНИТЕЛЬНОМУТАРИФУ"
        или пИндекс == "ЧЗАДОЛЖЕННОСТЬНАКОНЕЦПЕРИОДАСТРАХОВАЯЧАСТЬ"
        или пИндекс == "ЧЗАДОЛЖЕННОСТЬНАКОНЕЦПЕРИОДАНАКОПИТЕЛЬНАЯЧАСТЬ"
        или пИндекс == "ЧЗАДОЛЖЕННОСТЬНАКОНЕЦПЕРИОДАПОДОПОЛНИТЕЛЬНОМУТАРИФУ" )
         Если( пЗначение != Окр( пЗначение, 1 ) )
            мОшибки.Ошибки[пИндекс] = "Значения реквизитов Начислено, ИТОГО задолженность на начало периода, ИТОГО уплачено, ИТОГО задолженность на начало периода должны быть указаны с точностью до рубля";
      
      #     3) ИТОГО уплачено (страховая, накопительная часть, по дополнительному тарифу соответственно) должно быть равно сумме значений реквизита Уплачено (страховая, накопительная часть, по дополнительному тарифу соответственно), указанных в записях об уплаченных страховых взносах, относящихся к данной записи (ошибка 30).
      #     Не проверяется, реквизита нет в электронной форме
      
      #     4) ИТОГО задолженность на начало периода (страховая, накопительная часть, по дополнительному тарифу соответственно) должно быть равно сумме значений реквизита Задолженность (страховая, накопительная часть, по дополнительному тарифу соответственно), указанных в записях о задолженности на начало периода, относящихся к данной записи (ошибка 30).
      #     Не проверяется, реквизита нет в электронной форме
      
      #     5) ИТОГО задолженность на конец периода (страховая, накопительная часть, по дополнительному тарифу соответственно) должно быть равно сумме значений реквизита Задолженность (страховая, накопительная часть, по дополнительному тарифу соответственно), указанных в записях о задолженности на конец периода, относящихся к данной записи (ошибка 30).
      #     Не проверяется, реквизита нет в электронной форме
      
      #     6) Начислено и ИТОГО уплачено должны быть больше либо равны нулю (предупреждение 20).
      Если( пИндекс == "ЧНАЧИСЛЕНОСТРАХОВАЯЧАСТЬ"
        или пИндекс == "ЧНАЧИСЛЕНОНАКОПИТЕЛЬНАЯЧАСТЬ"
        или пИндекс == "ЧНАЧИСЛЕНОПОДОПОЛНИТЕЛЬНОМУТАРИФУ"
        или пИндекс == "ЧУПЛАЧЕНОСТРАХОВАЯЧАСТЬ"
        или пИндекс == "ЧУПЛАЧЕНОНАКОПИТЕЛЬНАЯЧАСТЬ"
        или пИндекс == "ЧУПЛАЧЕНОПОДОПОЛНИТЕЛЬНОМУТАРИФУ" )
         Если( пЗначение < 0 )
            мОшибки.Предупреждение[пИндекс] = "Начислено и ИТОГО уплачено должны быть больше либо равны нулю";
      
      #     7) Значение Начислено: страховая часть должно быть равно сумме значения Уплачено: страховая часть, указанного в записи об уплаченных страховых взносах за расчетный год, и значения Задолженность: страховая часть, указанного в записи за расчетный год о задолженности на конец периода (ошибка 30). 
      #     Не проверяется, так как эти поля рассчитываемые

      #     8) Значение Начислено: накопительная часть должно быть равно сумме значения Уплачено: накопительная часть, указанного в записи об уплаченных страховых взносах за расчетный год, и значения Задолженность: накопительная часть, указанного в записи за расчетный год о задолженности на конец периода (ошибка 30). 
      #     Не проверяется, так как эти поля рассчитываемые
      
      #     9) Значение Начислено: по дополнительному тарифу должно быть равно сумме значения Уплачено: по дополнительному тарифу, указанного в записи об уплаченных страховых взносах за расчетный год, и значения Задолженность: по дополнительному тарифу, указанного в записи за расчетный год о задолженности на конец периода (ошибка 30).
      #     Не проверяется, так как эти поля рассчитываемые
   }
   Вернуть 0;
}

Функция ПроверкаПФ_ИН20_ИН30( Значения, мОшибки )
# Проверяется Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-1 и СЗВ-3 (общие правила)
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      #      1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пачке (ошибка 30). Пропуски номеров не допускаются (ошибка 30).
      #      Не проверяется

      #      2) Реквизит Тип формы может принимать одно из допустимых значений (приведены в приложении 1 в описании формата данных) (ошибка 30).
      Если( пИндекс == "ТТИПФОРМЫ" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Реквизит Тип формы (сведений) может принимать одно из допустимых значений";

      #      3) Реквизит Страховой номер должен быть указан (ошибка 30).
      Если( пИндекс == "ТСТРАХОВОЙНОМЕР" и !пЗначение )
         мОшибки.Ошибки[пИндекс] = "Реквизит Страховой номер должен быть указан";

      #      4) Реквизиты Фамилия, Имя, Отчетный период, Дата заполнения обязательны для заполнения (ошибка 30).
      Если( пИндекс == "ТФАМИЛИЯ"
        или пИндекс == "ТИМЯ" 
        или пИндекс == "ЧОТЧЕТНЫЙПЕРИОДГОД"
        или пИндекс == "ЧОТЧЕТНЫЙПЕРИОДКВАРТАЛ"
        или пИндекс == "ДДАТАЗАПОЛНЕНИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Реквизиты Фамилия, Имя, Отчетный период, Дата заполнения обязательны для заполнения";
      
      #      5) Дата заполнения не должна превышать Дату составления описи, указанную в Записи о пачке (ошибка 30).
      #      Не проверяется

      #      6) Дата заполнения должна быть позже последнего числа отчетного периода при всех значениях реквизита Тип формы, кроме <ПЕНС> (предупреждение 10).
      #      Не проверяется
      
      #      7) Реквизит Отчество должен быть заполнен (предупреждение 20).
      Если( пИндекс == "ТОТЧЕСТВО" и !пЗначение )
         мОшибки.Предупреждение[пИндекс] = "Реквизит Отчество должен быть заполнен";
      
      #      8) Реквизит Отчетный период может принимать одно из допустимых значений (приведены в приложении 1 в описании формата данных) (ошибка 30).
      Если( пИндекс == "ЧОТЧЕТНЫЙПЕРИОДКВАРТАЛ" )
      {
          ВыборПо( Значения.чОтчетныйПериодГод )
          {
             Выбор 1996:
             {
                Если( !Найти( ",3,4,0,", "," + пЗначение + "," ) )
                   мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период для 1996 года может принимать одно из значений: 3,4,0.";
             }
             Выбор 1997,1998,1999,2000:
             {
                Если( !Найти( ",2,4,0,", "," + пЗначение + "," ) )
                   мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период для 1997-2000 года может принимать одно из значений: 2,4,0.";
             }
             Выбор 2001:
             {
                ; # Допустимо все от 0 до 9
             }
             Выбор 2002:
             {
                Если( !Найти( ",0,", "," + пЗначение + "," ) )
                   мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период для 2002 года может принимать одно значение: 0.";
             }
             Иначе
                мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период год может быть от 1996 до 2002";
          }
      }
      
      #      9) Дата заключения договора не должна превышать последнего числа отчетного периода (предупреждение 10).
      Если( пИндекс == "ДДАТАЗАКЛЮЧЕНИЯ")
         Если( пЗначение и Год( пЗначение ) > Значения.чОтчетныйПериодГод )
            мОшибки.Предупреждение[пИндекс] = "Дата заключения договора не должна превышать последнего числа отчетного периода";

      #      10) Значение реквизита Вид выплаты указывается в соответствии с одноименным классификатором (ошибка 30).
      #      Не проверяется

      #      11) Если заполнены реквизиты Дата заключения и Вид выплаты должен быть заполнен и реквизит Номер договора (предупреждение 20).
      Если( пИндекс == "ТНОМЕРДОГОВОРА" )
         Если( !пЗначение и Значения.дДатаЗаключения и Значения.тВидВыплаты )
            мОшибки.Предупреждение[пИндекс] = "Если заполнены реквизиты Дата заключения и Вид выплаты должен быть заполнен и реквизит Номер договора";
      
      #      12) Реквизиты Дата заключения и Вид выплаты должны быть либо оба заполнены, либо оба пусты (ошибка 30).
      Если( пИндекс == "ДДАТАЗАКЛЮЧЕНИЯ")
         Если( ( !Значения.дДатаЗаключения ) != ( !Значения.тВидВыплаты ) )
            мОшибки.Ошибка[пИндекс] = "Реквизиты Дата заключения и Вид выплаты должны быть либо оба заполнены, либо оба пусты";

      #      13) При указании в реквизите Вид выплаты значения <АВАНС> значение реквизита Число основных записей о стаже должно быть равно нулю (ошибка 30).
      Если( пИндекс == "ТВИДВЫПЛАТЫ")
         Если( пЗначение == "АВАНС" и Значения.чЧислоОсновныхЗаписейОСтаже != 0 )
            мОшибки.Ошибка[пИндекс] = "При указании в реквизите Вид выплаты значения <АВАНС> значение реквизита Число основных записей о стаже должно быть равно нулю";
      
      #      14) При указании в реквизите Вид выплаты значения <ПРОЧЕЕ> значение реквизита Число основных записей о стаже должно быть больше нуля (предупреждение 20).
      Если( пИндекс == "ТВИДВЫПЛАТЫ")
         Если( пЗначение == "ПРОЧЕЕ" и Значения.чЧислоОсновныхЗаписейОСтаже <= 0 )
            мОшибки.Предупреждение[пИндекс] = "При указании в реквизите Вид выплаты значения <ПРОЧЕЕ> значение реквизита Число основных записей о стаже должно быть больше нуля";
      
      #      15) При значении реквизита Тип формы <ИСХД>, <КОРР> или <ПЕНС> число записей о начислениях и число основных записей о стаже не должны быть одновременно равны нулю (ошибка 30).
      Если( пИндекс == "ТТИПФОРМЫ" )
         Если( ( пЗначение == "ИСХД" или пЗначение == "КОРР" или пЗначение == "ПЕНС" )
               и Значения.чЧислоЗаписейОНачислениях   == 0
               и Значения.чЧислоОсновныхЗаписейОСтаже == 0 )
            мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип формы <ИСХД>, <КОРР> или <ПЕНС> число записей о начислениях и число основных записей о стаже не должны быть одновременно равны нулю";

      #      16) Если реквизит Тип формы имеет значение <ОТМН> число записей о начислениях и число основных записей о стаже должны быть одновременно равны нулю (ошибка 30).
      Если( пИндекс == "ТТИПФОРМЫ" )
         Если( пЗначение == "ОТМН"
               и ( Значения.чЧислоЗаписейОНачислениях   != 0
               или Значения.чЧислоОсновныхЗаписейОСтаже != 0 ) )
            мОшибки.Ошибка[пИндекс] = "Если реквизит Тип формы имеет значение <ОТМН> число записей о начислениях и число основных записей о стаже должны быть одновременно равны нулю";
   }
   Вернуть 0;
}

Функция ПроверкаПФ_ИН30( Значения, мОшибки )
# Проверяется Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-3 (частные правила)
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];

      #      1) Реквизит Отчетный период может принимать одно из допустимых значений, но начинаться не ранее 1 января 2001 года (ошибка 30).
      Если( пИндекс == "ЧОТЧЕТНЫЙПЕРИОДГОД" )
         Если( пЗначение < 2001 )
            мОшибки.Ошибка[пИндекс] = "Реквизит Отчетный период может принимать одно из допустимых значений, но начинаться не ранее 1 января 2001 года";
      
      #      2) В записи об индивидуальных сведениях застрахованного лица по форме СЗВ-3 должен быть заполнен один и только один из реквизитов: Код категории застрахованного лица или Код дополнительного тарифа (ошибка 30).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" )
         Если( ( !пЗначение + !Значения.тКодДополнительногоТарифа ) != 1 )
            мОшибки.Ошибка[пИндекс] = "В записи об индивидуальных сведениях застрахованного лица по форме СЗВ-3 должен быть заполнен один и только один из реквизитов: Код категории застрахованного лица или Код дополнительного тарифа";
      
      #      3) Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-3 со значением реквизита Тип формы <ИСХД> или <ПЕНС> должны иметь одинаковое значение реквизита Код категории застрахованного лица (ошибка 30).
      #      Не проверяется, хотя можно сравнить значение на сотруднике со значением на ведомости
      
      #      4) Значение реквизита Код категории застрахованного лица указывается в соответствии с одноименным классификатором и отчетным периодом (ошибка 30).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" и !пЗначение )
         мОшибки.Ошибка[пИндекс] = "Значение реквизита Код категории застрахованного лица указывается в соответствии с одноименным классификатором и отчетным периодом";

      #      5) Значение реквизита Код дополнительного тарифа указывается в соответствии с одноименным классификатором и отчетным периодом (ошибка 30).
      #      Не проверяется
      
      #      6) В реквизитах Сумма налогооблагаемого заработка (вознаграждения) и дохода с начала года, Сумма начисленного взноса в ПФР с начала года, ИТОГО за отчетный период - Всего начислено, ИТОГО за отчетный период - в том числе пособие по временной нетрудоспособности, стипендия  должны быть указаны копейки (ошибка 30).
      #      Не проверяется
      
      #      7) Значение реквизита Сумма начисленного взноса в ПФР с начала года (кроме следующих значений реквизита Код категории застрахованного лица: <НРЕД>, <ИПЕД> и значения реквизита Код дополнительного тарифа: <АВИА>) должно быть равно (с точностью до 1 рубля) значению переменной Сумма начисленного взноса в ПФР с начала года (предупреждение 20). Алгоритм вычисления переменной Сумма начисленного взноса в ПФР с начала года приведен в Приложении №2.
      #      Не проверяется
      
      #      8) Значение реквизита Сумма начисленного взноса в ПФР с начала года для значения реквизита Код дополнительного тарифа <АВИА> должно быть равно (с точностью до 1 рубля): разности значений реквизита <Всего начислено> и <В том числе пособие по временной нетрудоспособности, стипендия>. Полученное значение умножить на процент взносов, соответствующий значению реквизита Код дополнительного тарифа (ошибка 30).
      #      Не проверяется
      
      #      9) ИТОГО за отчетный период - Всего начислено должно быть равно (с точностью до 1 рубля) сумме значений реквизита Всего начислено, указанных в записях о начислениях, относящихся к данной записи о застрахованном лице (ошибка 30).
      #      Не проверяется
      
      #      10) ИТОГО за отчетный период - в том числе пособие по временной нетрудоспособности, стипендия  должно быть равно (с точностью до 1 рубля) сумме значений реквизита  В том числе пособие по временной нетрудоспособности, стипендия, указанных в записях о начислениях, относящихся к данной записи о застрахованном лице (ошибка 30).
      #      Не проверяется
      
      #      11) ИТОГО за отчетный период - Всего начислено должны быть больше либо равны нулю (предупреждение 20).
      Если( пИндекс == "ЧЗАРАБОТОКВСЕГОЗАПЕРИОД" и пЗначение < 0 )
         мОшибки.Предупреждение[пИндекс] = "ИТОГО за отчетный период - Всего начислено должны быть больше либо равны нулю";
      
      #      12) ИТОГО за отчетный период - в том числе пособие по временной нетрудоспособности, стипендия не должно превышать ИТОГО за отчетный период - Всего начислено (предупреждение 20).
      Если( пИндекс == "ЧЗАРАБОТОКПОВРЕМЕННОЙНЕТРУДОСПОСОБНОСТИЗАПЕРИОД" и пЗначение < 0 )
         мОшибки.Предупреждение[пИндекс] = "ИТОГО за отчетный период - в том числе пособие по временной нетрудоспособности, стипендия не должно превышать ИТОГО за отчетный период - Всего начислено";
      
      #      13) Недопустимо указание в реквизите  Код категории застрахованного лица для СЗВ-3 следующего значения (ошибка 30) (эти документы представляются лично застрахованным лицом, поэтому не объединяются в пачку и, следовательно, не представляются в виде описываемого здесь файла): 
      #       <Индивидуальный предприниматель> (код <ИП>);
      #       <Индивидуальный предприниматель - инвалид> (код <ИПИВ>):
      #       <Индивидуальный предприниматель, уплачивающий единый налог на вмененный доход> (код <ИПЕД>).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" )
         Если( пЗначение == "ИП" или пЗначение == "ИПИВ" или пЗначение == "ИПЕД" )
            мОшибки.Ошибка[пИндекс] = "Недопустимо указание в реквизите Код категории застрахованного лица для СЗВ-3 следующего значения: ИП, ИПИВ, ИПЕД";
      
      #      14) Для значения реквизита Код категории застрахованного лица <БЕЗР> реквизиты Сумма налогооблагаемого заработка (вознаграждения) и дохода с начала года, Сумма начисленного взноса в ПФР с начала года, ИТОГО за отчетный период - Всего начислено, ИТОГО за отчетный период - в том числе пособие по временной нетрудоспособности, стипендия  должны быть равны нулю (ошибка 30).
      Если( пИндекс == "ТКОДКАТЕГОРИИЗАСТРАХОВАННОГОЛИЦА" и пЗначение == "БЕЗР" )
         Если( Значения.чЗаработокВсегоСНачалаГода
           или Значения.чНачисленноВзносаСНачалаГода
           или Значения.чЗаработокВсегоЗаПериод
           или Значения.чЗаработокПоВременнойНетрудоспособностиЗаПериод )
         мОшибки.Ошибка[пИндекс] = "Для значения Код категории <БЕЗР> реквизиты Сумма облаг. заработка и дохода с нач. года, Сумма нач. взноса в ПФР с нач. года, ИТОГО за отчетный период - Всего начислено, ИТОГО за отчетный период - в т.ч. пособие по временной нетруд. должны быть равны нулю";
      
      #      15) При представлении СЗВ-3 за весь год Сумма налогооблагаемого заработка (вознаграждения), дохода с начала года должна быть равна ИТОГО за отчетный период - Всего начислено минус ИТОГО за отчетный период - в том числе пособие по временной нетрудоспособности, стипендия (ошибка 30).
      Если( пИндекс == "ЧЗАРАБОТОКВСЕГОСНАЧАЛАГОДА" )
         Если( Значения.чОтчетныйПериодКвартал == 0 )
            Если( пЗначение != Значения.чЗаработокВсегоЗаПериод
                            - Значения.чЗаработокПоВременнойНетрудоспособностиЗаПериод )
               мОшибки.Ошибка[пИндекс] = "В отчете за весь год Сумма облаг. заработка, дохода с нач года должна быть равна ИТОГО за отч. период - Всего нач. минус ИТОГО за отч. период - в т.ч. пособие по временной нетруд.";
   }
   Вернуть 0;
}

Функция ПроверкаПФ( Значения )
# Проверяются значения массива, содержащего запись формы для персучета (АНКТ, ПАЧК, ...)
# Праметры: Значения - проверяемый массив со значениями
# Возвращает массив ошибок
{
   Если( Есть( 'N п/п' ) и Есть( ФИО ) )
      ВывестиСтатус( "Идет проверка " + 'N п/п' + " " + ФИО + "...");
   Иначе
      ВывестиСтатус( "Идет проверка..." );
   Объект мОшибки;
   Перем  пИндекс;

   # 3. Общие правила заполнения реквизитов записей
   ПроверкаПФ_Общие( Значения, мОшибки );

   ВыборПо( Значения.ТТИПЗАПИСИ )
   {
      #  4. Запись-заголовок
      Выбор "ЗГЛВ": ПроверкаПФ_ЗГЛВ( Значения, мОшибки );

      #  5. Запись о работодателе
      Выбор "РБТД": ПроверкаПФ_РБТД( Значения, мОшибки );
   
      #  6. Запись о пачке
      Выбор "ПАЧК": ПроверкаПФ_ПАЧК( Значения, мОшибки );
    
      #  7. Записи о типе документа
      Выбор "ТИПД": ПроверкаПФ_ТИПД( Значения, мОшибки );
   
      #  8. Записи об анкетных данных застрахованного лица
      Выбор "АНКТ": ПроверкаПФ_АНКТ( Значения, мОшибки );
   
      #  9. Записи Заявления об обмене страхового свидетельства
      Выбор "ОБМН": ПроверкаПФ_ОБМН( Значения, мОшибки );
   
      #  10. Записи Заявления о выдаче дубликата страхового свидетельства
      Выбор "ДУБЛ": ПроверкаПФ_ДУБЛ( Значения, мОшибки );
   
      #  13. Записи Справки о смерти
      Выбор "СМРТ": ПроверкаПФ_СМРТ( Значения, мОшибки );

      #  14. Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-1
      Выбор "ИН20": ПроверкаПФ_ИН20_ИН30( Значения, мОшибки );  # (общие   правила)

      #  14. Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-3
      Выбор "ИН30": ПроверкаПФ_ИН20_ИН30( Значения, мОшибки );  # (общие   правила)
                    ПроверкаПФ_ИН30( Значения, мОшибки );       # (частные правила)
   
      #  21. Записи об индивидуальных сведениях застрахованного лица по форме СЗВ-4-1 или СЗВ-4-2
      Выбор "ИН41": ПроверкаПФ_ИН41_ИН42( Значения, мОшибки );
      Выбор "ИН42": ПроверкаПФ_ИН41_ИН42( Значения, мОшибки );
   
      #  24. Записи Сводная ведомость форм документов СЗВ-3 
      Выбор "СВОД": ПроверкаПФ_СВОД( Значения, мОшибки );
      
      #  28. Записи Ведомость уплаты страховых взносов АДВ-11
      Выбор "ВУПЛ": ПроверкаПФ_ВУПЛ( Значения, мОшибки );
   
      # 29. Записи о задолженности на начало периода
      # Не проверяется, так как все рассчитывается
      
      # 30. Записи об уплаченных страховых взносах 
      # Не проверяется, так как все рассчитывается
      
      # 31. Записи о задолженности на конец периода 
      # Не проверяется, так как все рассчитывается
      
      # 32. Записи о Сведениях о трудовом стаже застрахованного лица СЗВ-К
      # за период до регистрации в системе государственного пенсионного страхования (далее - запись о Сведениях о трудовом стаже)
      Выбор "КОНВ": ПроверкаПФ_КОНВ( Значения, мОшибки );
      
      # 18. Основные записи о стаже 
      # Не проверяется, так как не рассчитывается через РасчетПФ, там и так все просто
      
      # 19. Дополнительные записи о льготном стаже 
      # Непроверяется аналогично
   }
   #ВывестиСтатус( "" );
   Вернуть( мОшибки );
}

Функция ПроверкаВводаСтажа( Событие, Поле )
# Вызывается из обработчиков стажа СЗВ-4, СЗВ-К и Трудовой деятельности
{
   Если( Событие == "Изменение" )
   {
      # Проверка заполнения сокращений у дополнительных сведений
      Если( [Поле] )
      {
         Перем Сокр = Вверх( Подстрока([Поле], Размер([Поле]), 1 ) );
         ВыборПо( Поле )
         {
            выбор "_Стаж1П1":
               Если( Сокр != "М" и Сокр != "Ч")
               {  Сообщить("Укажите сокращение: м-месяцы, ч-часы"); Вернуть Поле; }
            выбор "_Стаж1П2":
               Если( Сокр != "Д" и Сокр != "М")
               {  Сообщить("Укажите сокращение: д-дни, м-минуты"); Вернуть Поле; }
            выбор "_Стаж1П4":
               Если( Сокр != "Г")
               {  Сообщить("Укажите сокращение: г-годы"); Вернуть Поле; }
            выбор "_Стаж2П1":
               Если( Сокр != "Ч" и Сокр != "М" и Сокр != "П" )
               {  Сообщить("Укажите сокращение: ч-часы, м-месяцы, п-прыжки"); Вернуть Поле; }
            выбор "_Стаж2П2":
               Если( Сокр != "М" и Сокр != "Д")
               {  Сообщить("Укажите сокращение: м-минуты, д-дни"); Вернуть Поле; }
         }
      }
   }
   Вернуть "";
}

Функция РасчетНаимСЗВ_К()
# Вызывается по кнопке в наименовании ведомости
{
   # Если не указано лицо
   Если( Есть( '.Лица-Список' ) != 1 ) Вернуть 0;
   Если( !ДаНет( "Произвести расчет стажей по данным зарплаты?" ) )
      Вернуть 0;
   Перем пКакЗаполнять = Меню( "по трудовой деятельности и должностям\n"
                             + "только по трудовой деятельности\n"
                             + "только по должностям" );
   Если( !пКакЗаполнять ) Вернуть 0;
   Если( Есть('.') == 1 )
      ДляВсех( Записей( "Список стажей", '.' ) )
         Удалить( Запись );
   Иначе
      Добавить('.');
   РасчетСЗВ_К( '.', СтажСЗВ_К( '.', пКакЗаполнять) );
   Сохранить('.');
}

Функция РасчетЗаписейСЗВ_К()
# Вызывается по кнопке в ведомости СЗВ-К
{
   Если( !ДаНет( "Произвести расчет стажей по данным зарплаты?" ) )
      Вернуть 0;
   Перем пКакЗаполнять = Меню( "по трудовой деятельности и должностям\n"
                             + "только по трудовой деятельности\n"
                             + "только по должностям" );
   Если( !пКакЗаполнять ) Вернуть 0;
   ДляВсех( Наименований )
   {
      ВывестиСтатус('N п/п' + " " + Название);
      ДляВсех( Записей( "Список стажей", Наим ) )
         Удалить( Запись );
      РасчетСЗВ_К( Наим, СтажСЗВ_К( 'Наим.Лица-Список', пКакЗаполнять) );
      Сохранить( Наим );
   }
   ВывестиСтатус("");
}

Функция СтажСЗВ_К( оЛицо, пКакЗаполнять )
# Рассчитывает массив с записями стажа по Лицу для ведомости СЗВ-К
#     ├─Организация        - организация (только для СЗВ-К)
#     ├─Профессия          - профессия (только для СЗВ-К)
#     ├─ВидДеятельности    - вид деятельности (только для СЗВ-К)
#     ├─ДатНач             - начало периода
#     ├─ДатКнц             - конец периода
#     ├─ВыслЛет            - основание (код) условия для досрочного назначения пенсии основание
#     ├─ВыслЛетДоп1        - параметр 1 дополнительных сведений
#     ├─ВыслЛетДоп2        - параметр 2 дополнительных сведений
#     ├─ВыслЛетДоп3        - параметр 3 дополнительных сведений
#     ├─ИсчТрудСтажа       - основание (код) исчисления страхового стажа (выслуга лет)
#     ├─ИсчТрудСтажаДоп0   - параметр 0 дополнительных сведений
#     ├─ИсчТрудСтажаДоп1   - параметр 1 дополнительных сведений
#     ├─ИсчТрудСтажаДоп2   - параметр 2 дополнительных сведений
#     ├─ИсчТрудСтажаДоп3   - параметр 3 дополнительных сведений
#     ├─ОсобУсл            - особые условия труда (код)
#     ├─ОсобУслКодПозСписка - особые условия труда код позции списка
#     ├─РайонКоэф          - районный коэффициент
#     └─ТеррУсл            - территориальные условия (код)
# Параметры: оЛицо - (объект) Сотрудник
#            пКакЗаполнять - (число) 1 - По трудовой деятельности и должностям
#                                    2 - только по трудовой деятельности
#                                    3 - только по должностям
{
   Объект мСписСтаж;
   Перем Нпп = 0;
   # По трудовой деятельности
   Если( пКакЗаполнять == 1 или пКакЗаполнять == 2 )
   {
      ДляВсех( Записей( "ПредРабот", 'оЛицо.Расширение сотрудника' ) )
      {
         Перем ДатаОкончания = Мин( 'Дата окончания', 31.12.01 );
         Если( 'Дата начала' <= ДатаОкончания )
         {
            Нпп++;
            # Начало периода
            мСписСтаж[Нпп].ДатНач = 'Дата начала';
            # Конец периода
            мСписСтаж[Нпп].ДатКнц = ДатаОкончания;
            # Наименование организации
            мСписСтаж[Нпп].Организация = Организация;
            # Профессия или должность
            мСписСтаж[Нпп].Профессия = Специальность;
            # Вид деятельности (код)
            мСписСтаж[Нпп].ВидДеятельности = 'Вид деятельности';
            # Особые условия труда (код)
            мСписСтаж[Нпп].ОсобУсл = Стаж0;
            # Код позиции списка
            мСписСтаж[Нпп].ОсобУслКодПозСписка = 'N диплома';
            # Территориальные условия (код)
            мСписСтаж[Нпп].ТеррУсл = Комментарий;
            # Исчисление страхового стажа
            мСписСтаж[Нпп].ИсчТрудСтажа = Стаж1;
            Текст п1 = п2 = п3 = п4 = "";
            Разбить( Профессия, ";",  п1, п2, п3, п4);
            мСписСтаж[Нпп].ИсчТрудСтажаДоп1 = п1; 
            мСписСтаж[Нпп].ИсчТрудСтажаДоп2 = п2;
            мСписСтаж[Нпп].ИсчТрудСтажаДоп3 = п3;
            мСписСтаж[Нпп].ИсчТрудСтажаДоп0 = п4;
            # Условия для досрочного начисления пенсии
            мСписСтаж[Нпп].ВыслЛет = Стаж2;
            п1 = п2 = п3 = п4 = "";
            Разбить( Факультет, ";",  п1, п2, п3, п4);
            мСписСтаж[Нпп].ВыслЛетДоп1 = п1; 
            мСписСтаж[Нпп].ВыслЛетДоп2 = п2;
            мСписСтаж[Нпп].ВыслЛетДоп3 = п3;
            мСписСтаж[Нпп].РайонКоэф   = п4;
         }
      }
   }
   # По должностям
   Если( пКакЗаполнять == 1 или пКакЗаполнять == 3 )
   {
      # Если название нашей организации изменялось
      Объект оКонсНФ_НАИМ = Объект("Константы");
      оКонсНФ_НАИМ.Имя = "ПФНАИМЕНОВАНИЕ";
      Объект мПфНаим;
      Перем НппКонст = 0;
      Если( Найти( оКонсНФ_НАИМ, "Имя" ) == 1 )
      {
         ДляВсех( Записей( "История константы", оКонсНФ_НАИМ ) )
         {
            НппКонст++; # В порядке убывания дат
            мПфНаим[НппКонст].Дата     = Запись.Дата;
            мПфНаим[НппКонст].Значение = Запись.Значение;
         }
         НппКонст++;
         # На случай, если история констант не заполнена
         # или начинается не с самого начала
         мПфНаим[НппКонст].Дата = 00.00.00;
         мПфНаим[НппКонст].Значение = ПФНАИМЕНОВАНИЕ;
      }
      Иначе Ошибка("Не найдена константа ПфНаименование!");

      Перем ДатНач = 00.00.00;
      Перем ДатКнц = 31.12.01;
      Установить(оЛицо);
      Объект мСтаж = Стаж(); # Выбираем стаж из должностей
      Установить();
      перем пПериод;
      ДляВсех( Элементов( мСтаж, пПериод ) )
      {
         Установить( мСтаж[ пПериод ] );
         Перем пДатаПФ, ДНач, ДКнц;
         ДНач = ДатНач;
         ДКнц = ДатКнц;
         ДляВсех( Элементов( мПфНаим, НппКонст ) )
         {
            пДатаПФ = мПфНаим[НппКонст].Дата;
            Если( пДатаПФ <= ДКнц )
            {
               # Определяем кусок периода, который попробуем добавить в стаж
               Перем ДНач1 = Макс( ДНач, пДатаПФ );
               Перем ДКнц1 = ДКнц;
               # И отрезаем этот кусок от общего
               ДКнц = ДНач1 - 1;
               Если( ДНач1 <= ДКнц1 )
               {  # Начало добавления стажа
                  Нпп++
                  # Начало периода
                  мСписСтаж[Нпп].ДатНач = ДНач1;
                  # Конец периода
                  мСписСтаж[Нпп].ДатКнц = ДКнц1;
                  # Наименование организации
                  мСписСтаж[Нпп].Организация = мПфНаим[НппКонст].Значение;
                  # Профессия или должность
                  мСписСтаж[Нпп].Профессия = НазвДолж;
                  # Вид деятельности (код)
                  мСписСтаж[Нпп].ВидДеятельности = "РАБОТА";
                  # Особые условия труда (код)
                  мСписСтаж[Нпп].ОсобУсл = УслТруда;
                  # Код позиции списка
                  мСписСтаж[Нпп].ОсобУслКодПозСписка = Код;
                  # Территориальные условия (код)
                  мСписСтаж[Нпп].ТеррУсл = ТеррУсл;
                  # Районный коэффициент
                  мСписСтаж[Нпп].РайонКоэф = "";
                  # Исчисление страхового стажа
                  мСписСтаж[Нпп].ИсчТрудСтажа = ИсчТрудСтаж;
                  # Лет      Месяцев  Дней     Доп.свед.(ДЕКРЕТ,ДЕТИ), время (м,д)
                  Если( Метка == " ") Метка = "";
                  мСписСтаж[Нпп].ИсчТрудСтажаДоп0 = "";
                  мСписСтаж[Нпп].ИсчТрудСтажаДоп1 = "";
                  мСписСтаж[Нпп].ИсчТрудСтажаДоп2 = "";
                  мСписСтаж[Нпп].ИсчТрудСтажаДоп3 = Метка;
                  # Условия досрочного назначения пенсии
                  мСписСтаж[Нпп].ВыслЛет = ВыслугаЛет;
                  # Часов, Минут, Доля
                  мСписСтаж[Нпп].ВыслЛетДоп1 = "";
                  мСписСтаж[Нпп].ВыслЛетДоп2 = "";
                  мСписСтаж[Нпп].ВыслЛетДоп3 = "";
               } # Конец добавления стажа
            }
         }
         Установить();
      }
   }
   Вернуть мСписСтаж;
}

Функция РасчетСЗВ_К( оСЗВ_Кнаим, мСтаж )
# Заполняет список стажей для наименования СЗВ-К из указанного массива
# Параметры: оСЗВ_Кнаим - (объект) уже созданная запись ведомости СЗВ-К
# Вызывается из РасчетЗаписейСЗВ_К() и РасчетНаимСЗВ_К() и ФормированиеПачекСЗВ_К()
{
   Объект оСписСтаж = Выборка( "Список стажей" );
   # По трудовой деятельности
   Перем Нпп;
   ДляВсех( Элементов( мСтаж, Нпп ) )
   {
      Установить( мСтаж[Нпп] );
      Очистить( оСписСтаж );
      оСписСтаж.Связать( "Образование-Список", оСЗВ_Кнаим );
      # Начало периода
      'оСписСтаж.Дата начала'    = ДатНач;
      # Конец периода
      'оСписСтаж.Дата окончания' = ДатКнц;
      # Наименование организации
      оСписСтаж.Организация      = Организация;
      # Профессия или должность
      оСписСтаж.Профессия        = Профессия;
      # Вид деятельности (код)
      'оСписСтаж.Вид деятельности' = ВидДеятельности;
      # Особые условия труда (код)
      оСписСтаж.Стаж0            = ОсобУсл;
      # Код позиции списка
      'оСписСтаж.N диплома'      = ОсобУслКодПозСписка;
      # Территориальные условия (код)
      'оСписСтаж.ОКПДТР'         = ТеррУсл;
      # Районный коэф
      'оСписСтаж.Сумма'          = РайонКоэф;
      # Исчисление страхового стажа
      'оСписСтаж.Стаж1'          = ИсчТрудСтажа;
      # Лет      Месяцев  Дней     Доп.свед.(ДЕКРЕТ,ДЕТИ)
      'оСписСтаж.Специальность'  = ИсчТрудСтажаДоп1 + ";"
                                 + ИсчТрудСтажаДоп2 + ";"
                                 + ИсчТрудСтажаДоп3 + ";"
                                 + ИсчТрудСтажаДоп0 + ";";
      # Условия для досрочного начисления пенсии
      'оСписСтаж.Стаж2' = ВыслЛет;
      # Часов,Кол_во  Минут        Доля
      'оСписСтаж.Факультет'      = ВыслЛетДоп1 + ";"
                                 + ВыслЛетДоп2 + ";"
                                 + ВыслЛетДоп3 + ";";
      Добавить( оСписСтаж );
      Установить();
   }
}

Функция ФормированиеПачекСЗВ_К()
# Вызывается из локального меню ведомостей
{
   # Сведения о стаже предоставляются на всех работающих лиц,
   # за исключением работающих пенсионеров, за период стажа до 01.01.2002 г.
   # Срок сдачи сведений формы СЗВ-К июль-август 2003 г.

   Перем пЕстьСЗВК_ОСОБ = 0, пЕстьСЗВК_ОБЫЧ = 0;
   объект оВедомость, оВедомость_ОСОБ, оВедомость_ОБЫЧ;

   # Начальная инициализации корневой папки
   Объект оПапка = Объект("Документ");
   'оПапка.Тип документа' = "Кадры";
   Корень( оПапка, "Папки" );
   Узел( оПапка, "Папки" );
   Найти( оПапка, "Папки" );
   # Начальная инициализация отдела
   Объект оОтдел = Объект( "Сотрудники" );

   Объект оДиалог = СоздатьДиалог( "Выбор папки ведомостей" );
   Связать( оДиалог.Папка, оПапка );
   Если( !ВыполнитьДиалог( оДиалог ) )
      Вернуть 0;
   Если( Есть( оДиалог.Папка ) == 1 ) оПапка = оДиалог.Папка;
   Если( Есть( оДиалог.Отдел ) == 1 ) оОтдел = оДиалог.Отдел;

   Перем пКакЗаполнять = Меню( "по трудовой деятельности и должностям\n"
                             + "только по трудовой деятельности\n"
                             + "только по должностям" );
   Если( !пКакЗаполнять ) Вернуть 0;
   Перем МаксЛицВПачке = 50;
   Спросить( "Макс. количество лиц в пачке (не более 100)", МаксЛицВПачке );
   Если( МаксЛицВПачке <= 0 или МаксЛицВПачке > 100 ) Вернуть 0;
            
   Перем Нпп = пБезНом = 0;
   Перем пНовНомер = ДатьНомерДляНумерации( "Ведомость", 'оПапка.Группа нумерации' );
   Лицо = Объект("Сотрудники");
   Пока( Следующий( Лицо, "ФИО" ) )
      Если( СотрИзОтдела( Лицо, оОтдел ) )
      {  
         Объект мСтажСЗВ_К = СтажСЗВ_К( Лицо, пКакЗаполнять );
         Если( Размер(мСтажСЗВ_К) )
         {  
            # Формы СЗВ-К, подаваемые о застрахованных лицах, работавших в обычных
            # условиях труда, не имеющих специального стажа или права на льготное
            # пенсионное обеспечение, формируются отдельными пачками.
            Перем пПериод, пФлагОУ = "_ОБЫЧ";
            ДляВсех( Элементов( мСтажСЗВ_К, пПериод ) )
            {
               Установить( мСтажСЗВ_К[ пПериод ] );
               Если( ВыслЛет или ИсчТрудСтажа или ОсобУсл или
                     ОсобуслКодПозСписка или ТеррУсл )
                  пФлагОУ = "_ОСОБ";
               Установить();
            }
            Установить( Лицо );
            # Включем всех у кого Принят, Уволен работали в июле - августе 2003
            Перем пФлагВключать = ( Принят <= 31.08.03 и Уволен >= 01.07.03 );
            # за исключением работающих пенсионеров
            Если( 'Вид пенсии' != "Нет пенсии" и НаПенсию и НаПенсию < 01.07.03 )
               пФлагВключать = 0;
            Если( пФлагВключать )
            {
               Если( !Найти( "0123456789", ПодСтрока( 'Регистрационный номер', 1, 1 ) ) )
                  пБезНом++;
               Нпп++;
               ВывестиСтатус( Нпп + " " + ФИО + "..." );
               
               оВедомость = ["оВедомость" + пФлагОУ];
               Если( !["пЕстьСЗВК" + пФлагОУ] )
               {
                  # Создать ведомость СЗВ-К
                  оВедомость = Выборка( "Ведомости" );
                  оВедомость.Связать( "Папки", оПапка );
                  'оВедомость.Группа нумерации' = 'оПапка.Группа нумерации';
                  оВедомость.Номер = пНовНомер;
                  пНовНомер++;
                  оВедомость.Дата = ТекДат;
                  оВедомость.ШПЗ = "СЗВ--К";
                  оВедомость.ПФТИП_СВЕДЕНИЙ = "ИСХД";
                  оВедомость.ПФОТЧПЕРИОД_ГОД = Год( ТекДат );
                  Добавить( оВедомость );
                  # Делаем все родные параметры ручными, чтобы они не удалялись при закрытии.
                  Если( СделатьПараметрыРучными( оВедомость ) )
                     Сохранить( оВедомость );
                  ["оВедомость" + пФлагОУ] = оВедомость;
               }
               ["пЕстьСЗВК"  + пФлагОУ] += 1;
      
               Объект оСЗВ_Кнаим = Выборка( "СЗВ--К наименования" );
               оСЗВ_Кнаим.Связать( "Ведомость-Список", оВедомость );
               оСЗВ_Кнаим.дата = оВедомость.Дата;
               'оСЗВ_Кнаим.N п/п' = ["пЕстьСЗВК"  + пФлагОУ];
               оСЗВ_Кнаим.Связать( "Лица-Список", Лицо );
               Добавить( оСЗВ_Кнаим );
      
               РасчетСЗВ_К( оСЗВ_Кнаим, мСтажСЗВ_К );
               Сохранить( оСЗВ_Кнаим );
               Если( ["пЕстьСЗВК" + пФлагОУ] >= МаксЛицВПачке ) # В папке не более 100 листов - то есть примерно 50 чел
                  ["пЕстьСЗВК" + пФлагОУ] = 0;
            }
            Установить();
         }
      }
   Если( пБезНом ) Сообщить("У " + пБезНом + " лиц не заполнен страховой номер!");
   ВывестиСтатус("");
}

Функция ПроверкаПФ_ПСТЖ_ПЛГТ( Значения, мОшибки )
# Проверяются записи стажа для СЗВ-К
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив, содержащий массив мСтажБезСжатия:
#   └─Индекс по дате начала + уникальный номер
#     ├─Организация        - организация (только для СЗВ-К)
#     ├─Профессия          - профессия (только для СЗВ-К)
#     ├─ВидДеятельности    - вид деятельности (только для СЗВ-К)
#     ├─ДатНач             - начало периода
#     ├─ДатКнц             - конец периода
#     ├─ВыслЛет            - основание (код) условия для досрочного назначения пенсии основание
#     ├─ВыслЛетДоп1        - параметр 1 дополнительных сведений
#     ├─ВыслЛетДоп2        - параметр 2 дополнительных сведений
#     ├─ВыслЛетДоп3        - параметр 3 дополнительных сведений
#     ├─ИсчТрудСтажа       - основание (код) исчисления страхового стажа (выслуга лет)
#     ├─ИсчТрудСтажаДоп0   - параметр 0 дополнительных сведений (только СЗВ-К)
#     ├─ИсчТрудСтажаДоп1   - параметр 1 дополнительных сведений
#     ├─ИсчТрудСтажаДоп2   - параметр 2 дополнительных сведений
#     ├─ИсчТрудСтажаДоп3   - параметр 3 дополнительных сведений
#     ├─ОсобУсл            - особые условия труда (код)
#     ├─ОсобУслКодПозСписка - особые условия труда код позции списка
#     ├─РайонКоэф          - районный коэффициент
#     └─ТеррУсл            - территориальные условия (код)
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Если( !Есть( Значения.мСтажБезСжатия) ) Вернуть 0;
   Перем пИндекс, пИндексДата, Нпп = 0;
   Перем ПредДатНач = ПредДатКнц = 00.00.00, ПредОрганизация = "";
   ДляВсех( Элементов( Значения.мСтажБезСжатия, пИндексДата ) )
   {
      Нпп++;
      Объект оСтаж = Значения.мСтажБезСжатия[пИндексДата];
      # Проверка пересечения стажей
      Перем ДНач, ДКнц;
      ДНач = Макс( оСтаж.ДатНач, ПредДатНач );
      ДКнц = Мин(  оСтаж.ДатКнц, ПредДатКнц );
      Если( ДНач <= ДКнц и Нпп > 1 ) 
         Если( оСтаж.ДатНач != ПредДатНач или 
               оСтаж.ДатКнц != ПредДатКнц или 
               оСтаж.Организация != ПредОрганизация )
         мОшибки.Ошибка[" СТАЖ" + Нпп + " ДАТНАЧ"] = "Стаж " +  оСтаж.ДатНач + "-" + оСтаж.ДатКнц + " пересекается с другими, это не допустимо! Чтобы ввести дополнительную запись о льготном стаже, укажите у нее в точности такой же период и организацию";
      ПредДатНач = оСтаж.ДатНач;
      ПредДатКнц = оСтаж.ДатКнц;
      ПредОрганизация = оСтаж.Организация;

      # Проверяем сокращения у дополнительных сведений
      Перем Сокр;
      Сокр = Вверх( Подстрока(оСтаж.ВыслЛетДоп1, Размер(оСтаж.ВыслЛетДоп1), 1 ) )Перем Сокр = Вверх( Подстрока(оСтаж.ВыслЛетДоп1, Размер(оСтаж.ВыслЛетДоп1), 1 ) );
      Если( оСтаж.ВыслЛетДоп1 и Сокр != "Ч" и Сокр != "М" и Сокр != "П" )
         мОшибки.Ошибка[" СТАЖ" + Нпп + " ВыслЛетДоп1"] = "Укажите сокращение: часы(месяцы,прыжки)";

      Сокр = Вверх( Подстрока(оСтаж.ВыслЛетДоп2, Размер(оСтаж.ВыслЛетДоп2), 1 ) );
      Если( оСтаж.ВыслЛетДоп2 и Сокр != "М" и Сокр != "Д" )
         мОшибки.Ошибка[" СТАЖ" + Нпп + " ВыслЛетДоп2"] = "Укажите сокращение: минуты(дни)";

      Сокр = Вверх( Подстрока(оСтаж.ИсчТрудСтажаДоп0, Размер(оСтаж.ИсчТрудСтажаДоп0), 1 ) );
      Если( оСтаж.ИсчТрудСтажаДоп0 и Сокр != "Г" )
         мОшибки.Ошибка[" СТАЖ" + Нпп + " ИсчТрудСтажаДоп0"] = "Укажите сокращение: годы";

      Сокр = Вверх( Подстрока(оСтаж.ИсчТрудСтажаДоп1, Размер(оСтаж.ИсчТрудСтажаДоп1), 1 ) );
      Если( оСтаж.ИсчТрудСтажаДоп1 и Сокр != "М" и Сокр != "Ч" )
         мОшибки.Ошибка[" СТАЖ" + Нпп + " ИсчТрудСтажаДоп1"] = "Укажите сокращение: месяцы(часы)";

      Сокр = Вверх( Подстрока(оСтаж.ИсчТрудСтажаДоп2, Размер(оСтаж.ИсчТрудСтажаДоп2), 1 ) );
      Если( оСтаж.ИсчТрудСтажаДоп2 и Сокр != "Д" и Сокр != "М" )
         мОшибки.Ошибка[" СТАЖ" + Нпп + " ИсчТрудСтажаДоп2"] = "Укажите сокращение: дни(минуты)";

      #   1) Записи данного типа следуют в порядке возрастания значения реквизита Номер перио-да (пропуски номеров не допускаются) (ошибка 30).
      #   Не проверяется

      #   2) Указание значений реквизитов Тип записи, Номер периода, Начало периода и Конец периода обязательно (ошибка 30).
         Если( !оСтаж.ДатНач или !оСтаж.ДатКнц )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " ДАТНАЧ"] = "Указание значений реквизитов Начало периода и Конец периода обязательно";

      #   3) Начало периода не должно быть позже Конца периода (ошибка 30).
         Если( оСтаж.ДатНач и оСтаж.ДатКнц и оСтаж.ДатНач > оСтаж.ДатКнц )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " ДАТНАЧ"] = "Начало периода не должно быть позже Конца периода";

      #   4) Реквизит Начало периода последующей основной записи о предыдущем стаже должен быть датой, следующей за датой реквизита Конец периода предыдущей основной за-писи о предыдущем стаже. Если дата в реквизите Начало периода последующей записи превышает больше чем на единицу дату в реквизите Конец периода предыдущей запи-си - предупреждение 10. Если дата в реквизите Начало периода последующей записи меньше либо равна дате в реквизите Конец периода предыдущей записи - ошибка.
      #   Проверяется, но иначе

      #   5) Значение реквизита Начало периода первой основной записи о предыдущем стаже по-следующей записи о периодах трудовой и иной общественно полезной деятельности должно быть больше либо равно значению реквизита Начало периода последней ос-новной записи о предыдущем стаже предшествующей записи о периодах трудовой и иной общественно полезной деятельности (предупреждение 10).
      #   Не проверяется

      #   6) Значение реквизита Конец периода последней основной записи о предыдущем стаже последней записи о периодах трудовой и иной общественно полезной деятельности должно быть датой, не превышающей дату 31.12.2001 (ошибка 40).
         Если( оСтаж.ДатКнц > 31.12.01 и Есть( Значения.чНомерДокументаВПачке ) )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " ДАТКНЦ"] = "Значение реквизита Конец периода записи о предыдущем стаже должно быть датой, не превышающей дату 31.12.2001";

      #   7) При значениях ВОДОЛАЗ и СЕЗОН реквизита <Исчисляемый трудовой стаж - основа-ние> значения реквизитов Начало периода и Конец периода должны находиться в пре-делах одного календарного года (ошибка 40).
         Если( ( оСтаж.ИсчТрудСтажа == "ВОДОЛАЗ" или оСтаж.ИсчТрудСтажа == "СЕЗОН" )
               и Год( оСтаж.ДатНач ) != Год( оСтаж.ДатКнц )
             )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " ИСЧТРУДСТАЖА"] = "При значениях ВОДОЛАЗ и СЕЗОН реквизита <Исчисляемый трудовой стаж - основание> значения реквизитов Начало периода и Конец периода должны находиться в пределах одного календарного года";

      #   8) Если хотя бы один из параметров (Параметр 1, Параметр 2, Параметр 3) Выслуги лет - Дополнительных сведений имеет ненулевое (или непустое) значение, то значения рек-визитов Начало периода и Конец периода должны находиться в пределах одного ка-лендарного года (ошибка 40).
         Если( ( Число( оСтаж.ВыслЛетДоп1 ) или Число( оСтаж.ВыслЛетДоп2 ) или Число( оСтаж.ВыслЛетДоп3 ) )
               и Год( оСтаж.ДатНач ) != Год( оСтаж.ДатКнц )
             )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " ВЫСЛЛЕТДОП1"] = "Если хотя бы один из параметров (Параметр 1, Параметр 2, Параметр 3) Выслуги лет - Дополнительных сведений имеет ненулевое (или непустое) значение, то значения реквизитов Начало периода и Конец периода должны находиться в пределах одного календарного года";

      #   9) Значения реквизитов Территориальные условия (код), Особые условия труда (код), Выслуга лет - основание и Исчисляемый трудовой стаж - основание и дополнительные сведения (3 параметр) указываются в соответствии со значениями одноименных клас-сификаторов, действительными на дату 31.12.2001 (ошибка 40).
      #   Не проверяется

      #   10) Значение реквизита Код позиции списка указывается в соответствии со Списками №1 и №2 производств, работ, профессий, должностей и показателей, дающих право на льготное пенсионное обеспечение (ошибка 40).
      #   Не проверяется
      
      #   11) При указании фактически отработанного времени (лет, месяцев, дней) оно не должно превышать календарно отработанное время, определяемое по Алгоритму вычисления календарного стажа (прилагается) (ошибка 30).
      #   Не проверяется

      #   12) При указании в третьем параметре реквизита <Исчисляемый трудовой стаж - допол-нительные сведения> значения <ДЕТИ> значение реквизита <Отчество> записи о Све-дениях о трудовом стаже не должно оканчиваться на <-ич> (предупреждение 10).
      #   13) При указании в третьем параметре реквизита <Исчисляемый трудовой стаж - допол-нительные сведения> значения <ДЕКРЕТ> значение реквизита <Отчество> записи о Сведениях о трудовом стаже не должно оканчиваться на <-ич> (ошибка 30).
      #   Не проверяется
     
      #   14)  При указании значения РКС или МКС в реквизите Территориальные условия Район-ный коэффициент к заработной плате должен быть ненулевым (ошибка 30).
         Если( ( оСтаж.ТеррУсл == "РКС"  или оСтаж.ТеррУсл == "МКС" ) и !Число( оСтаж.РайонКоэф ) )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " РАЙОНКОЭФ"] = "При указании значения РКС или МКС в реквизите Территориальные условия Районный коэффициент к заработной плате должен быть ненулевым";

      #   15) При указании значения пустое в реквизите Территориальные условия Районный ко-эффициент к заработной плате должен быть нулевым (предупреждение 10).
         Если( оСтаж.ТеррУсл == "" и Число( оСтаж.РайонКоэф ) )
            мОшибки.Предупреждение[" СТАЖ" + Нпп + " РАЙОНКОЭФ"] = "При указании значения пустое в реквизите Территориальные условия Районный коэффициент к заработной плате должен быть нулевым";

      #   16) При указании значения, отличного от РКС, МКС или пустое, в реквизите Территори-альные условия Районный коэффициент к заработной плате должен быть нулевым (ошибка 30).
         Если( ( оСтаж.ТеррУсл != "РКС" и оСтаж.ТеррУсл != "МКС") и Число( оСтаж.РайонКоэф ) )
            мОшибки.Ошибка[" СТАЖ" + Нпп + " РАЙОНКОЭФ"] = "При указании значения, отличного от РКС, МКС или пустое, в реквизите Территориальные условия Районный коэффициент к заработной плате должен быть нулевым";
      
      #   17) Если в реквизите Территориальные условия (код) указано непустое значение, то среди записей с расчетом стажа по территориальным условиям должна быть всего одна за-пись, у которой реквизит Код имеет значение, равное значению Территориальные ус-ловия (код) Основной записи о предыдущем стаже (ошибка 30).
      #   Не проверяется
            
      #   18) Если в реквизите Особые условия труда (код) указано непустое значение, то среди за-писей с расчетом стажа по особым условиям труда должна быть всего одна запись, у которой реквизит Код имеет значение, равное значению Особые условия труда (код) Основной записи о предыдущем стаже (ошибка 30).
      #   Не проверяется
      
      #   19) Если в реквизите Выслуга лет (код) указано непустое значение, то среди записей с расчетом стажа по выслуге лет должна быть всего одна запись, у которой реквизит Код имеет значение, равное значению Выслуга лет (код) Основной записи о предыдущем стаже (ошибка 30).
      #   Не проверяется
   }
   Вернуть 0;
}

Функция ПроверкаПФ_КОНВ( Значения, мОшибки )
# Проверяется Записи о Сведениях о трудовом стаже застрахованного лица
# за период до регистрации в системе государственного пенсионного страхования
# и заполняется массив ошибок, переданный в качестве параметра
# Праметры: Значения - проверяемый массив со значениями
#           мОшибки  - массив в который заносятся ошибки
# Возвращает - 0
{
   Перем пИндекс;
   ДляВсех( Элементов( Значения, пИндекс ) )
   {
      УдалитьПерем( пЗначение );
      Перем пЗначение = Значения[пИндекс];
      # 32. Записи о Сведениях о трудовом стаже застрахованного лица за период до ре-гистрации в системе государственного пенсионного страхования (далее - запись о Сведениях о трудовом стаже)

      #     1) Записи данного типа должны быть упорядочены по реквизиту Номер документа в пач-ке (ошибка 30). Пропуски номеров не допускаются (ошибка 30).
      #     Не проверяется
      
      #     2) Реквизит Тип формы может принимать одно из значений ИСХД, КОРР, ОТМН (ошиб-ка 30).
      #     Не проверяется
      
      #     3) При значении ИСХД реквизита Тип сведений записи о пачке реквизит Тип формы должен иметь значение ИСХД (ошибка 30).
      #     Не проверяется
      
      #     4) При значении КОРР или ОТМН реквизита Вид корректировки записи о пачке реквизит Тип формы должен иметь такое же значение, что и Вид корректировки (ошибка 30).
      #     Не проверяется

      #     5) Реквизит Страховой номер должен быть указан (ошибка 30).
      Если( пИндекс == "ТСТРАХОВОЙНОМЕР" )
         Если( !пЗначение или !Найти( "0123456789", Подстрока(пЗначение, 1, 1 ) ) )
            мОшибки.Ошибка[пИндекс] = "Реквизит Страховой номер должен быть указан";
      
      #     6) Реквизиты Фамилия, Имя, Дата рождения, Дата заполнения обязательны для заполнения (ошибка 30).
      Если( пИндекс == "ТФАМИЛИЯ"
        или пИндекс == "ТИМЯ" 
        или пИндекс == "ДДАТАРОЖДЕНИЯ"
        или пИндекс == "ДДАТАЗАПОЛНЕНИЯ" )
         Если( !пЗначение )
            мОшибки.Ошибка[пИндекс] = "Реквизиты Фамилия, Имя, Дата рождения, Дата заполнения обязательны для заполнения";

      #     7) Дата заполнения не должна превышать Дату составления описи, указанную в Записи о пачке (ошибка 30).
      #     Не проверяется

      #     8) Реквизит Отчество должен быть заполнен (предупреждение 20).
      Если( пИндекс == "ТОТЧЕСТВО" )
         Если( !пЗначение )
            мОшибки.Предупреждение[пИндекс] = "Реквизит Отчество должен быть заполнен";

      #     9) Для проверки составляющих реквизита Дата рождения используются те же правила, что и для <Анкеты застрахованного лица>.
      #     Не проверяется

      #     10) При указании в реквизите Территориальные условия проживания на 31.12.2001 зна-чения РКС или МКС обязательно должен быть указан ненулевой Районный коэффициент к заработной плате на 31.12.2001 (ошибка 30).
      Если( пИндекс == "ЧРАЙОННЫЙКОЭФФИЦИЕНТНА311201" )
         Если( !пЗначение и Значения.тТеррУсловияНа311201 )
            мОшибки.Ошибка[пИндекс] = "При указании в реквизите Территориальные условия проживания на 31.12.2001 значения РКС или МКС обязательно должен быть указан ненулевой Районный коэффициент к заработной плате на 31.12.2001";

      #     11) При значении пустое реквизита Территориальные условия проживания на 31.12.2001 должен быть нулевым Районный коэффициент к заработной плате на 31.12.2001 (ошибка 30).
      Если( пИндекс == "ЧРАЙОННЫЙКОЭФФИЦИЕНТНА311201" )
         Если( пЗначение и !Значения.тТеррУсловияНа311201 )
            мОшибки.Ошибка[пИндекс] = "При значении пустое реквизита Территориальные условия проживания на 31.12.2001 должен быть нулевым Районный коэффициент к заработной плате на 31.12.2001";

      #     12) Значения составляющих Лет, Месяцев, Дней реквизита Общий трудовой стаж опреде-ляются Правилами подсчета стажа в форме <Сведения о трудовом стаже застрахован-ного лица за период до регистрации в системе обязательного пенсионного страхова-ния>, приведенными в Инструкции по заполнению форм документов индивидуального (персонифицированного) учета в системе государственного пенсионного страхования (ошибка 30).
      #     Не проверяется

      #     13) При значении реквизита Тип формы <ИСХД>, <КОРР> составляющие Лет, Месяцев, Дней реквизита Общий трудовой стаж не должны быть одновременно равны нулю и Число записей о периодах трудовой или иной общественно полезной деятельности должно быть больше 0 (ошибка 30).
      Если( пИндекс == "ЧТРУДОВОЙСТАЖЛЕТ" )
         Если( ( Значения.тТипФормы == "ИСХД" или Значения.тТипФормы == "КОРР" ) 
             и  ( ( !Значения.чТрудовойСтажЛет и !Значения.чТрудовойСтажМесяцев и !Значения.чТрудовойСтажДней )
                или !Значения.чЗаписейСтажаТрудДеят
                )
             )
            мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип формы <ИСХД>, <КОРР> составляющие Лет, Месяцев, Дней реквизита Общий трудовой стаж не должны быть одновременно равны нулю и Число записей о периодах трудовой или иной общественно полезной деятельности должно быть больше 0";
      
      #     14) При значении реквизита Тип формы <ОТМН> составляющие Лет, Месяцев, Дней рек-визита Общий трудовой стаж должны быть одновременно равны нулю и Число запи-сей о периодах трудовой или иной общественно полезной деятельности должно быть равно 0 (ошибка 30).
      Если( пИндекс == "ЧТРУДОВОЙСТАЖЛЕТ" )
         Если( Значения.тТипФормы == "ОТМН"
             и  ( Значения.чТрудовойСтажЛет или Значения.чТрудовойСтажМесяцев или Значения.чТрудовойСтажДней
                  или Значения.чЗаписейСтажаТрудДеят
                )
             )
            мОшибки.Ошибка[пИндекс] = "При значении реквизита Тип формы <ОТМН> составляющие Лет, Месяцев, Дней реквизита Общий трудовой стаж должны быть одновременно равны нулю и Число записей о периодах трудовой или иной общественно полезной деятельности должно быть равно 0";
      
   }
   ПроверкаПФ_ПСТЖ_ПЛГТ( Значения, мОшибки );
   Вернуть 0;
}

Функция СтажВедомостьБезСжатия()
# Возвращает стаж по текущему сотруднику в виде массива в формате
#   └─Индекс по дате начала + уникальный номер
#     ├─Организация        - организация (только для СЗВ-К)
#     ├─Профессия          - профессия (только для СЗВ-К)
#     ├─ВидДеятельности    - вид деятельности (только для СЗВ-К)
#     ├─ДатНач             - начало периода
#     ├─ДатКнц             - конец периода
#     ├─ВыслЛет            - основание (код) условия для досрочного назначения пенсии основание
#     ├─ВыслЛетДоп1        - параметр 1 дополнительных сведений
#     ├─ВыслЛетДоп2        - параметр 2 дополнительных сведений
#     ├─ВыслЛетДоп3        - параметр 3 дополнительных сведений
#     ├─ИсчТрудСтажа       - основание (код) исчисления страхового стажа (выслуга лет)
#     ├─ИсчТрудСтажаДоп0   - параметр 0 дополнительных сведений (только СЗВ-К)
#     ├─ИсчТрудСтажаДоп1   - параметр 1 дополнительных сведений
#     ├─ИсчТрудСтажаДоп2   - параметр 2 дополнительных сведений
#     ├─ИсчТрудСтажаДоп3   - параметр 3 дополнительных сведений
#     ├─ОсобУсл            - особые условия труда (код)
#     ├─ОсобУслКодПозСписка - особые условия труда код позции списка
#     ├─РайонКоэф          - районный коэффициент
#     └─ТеррУсл            - территориальные условия (код)
{
   объект мСтажи;
   Перем пИндекс, Нпп = 0;
   ДляВсех( Записей( "Список стажей", Лицо ) )
   {
      Нпп++;
      пИндекс = ('Дата начала' ? Текст( 'Дата начала', "ДАТА (ГГГГ_ММ_ДД)" ): "0000_00_00") + "|" + Нпп ;
      мСтажи[ пИндекс ] = УслСтажаВедомость( 1 );
      мСтажи[ пИндекс ].ДатНач = 'Дата начала';
      мСтажи[ пИндекс ].ДатКнц = 'Дата окончания';
   }
   Вернуть( мСтажи );
}

Функция ОшибкиТрудовойДеятельности()
{
   # Просто все записи стажа отсортированные по дате начала, нужны для проверки
   объект мСтажи;
   Перем пИндекс, Нпп = 0;
   ДляВсех( Записей( "ПредРабот", . ) )
   {
      Нпп++;
      пИндекс = ('Дата начала' ? Текст( 'Дата начала', "ДАТА (ГГГГ_ММ_ДД)" ): "0000_00_00") + "|" + Нпп ;
      мСтажи[ пИндекс ].ДатНач = 'Дата начала';
      мСтажи[ пИндекс ].ДатКнц = 'Дата окончания';
      мСтажи[ пИндекс ].ТеррУсл = Комментарий;
      мСтажи[ пИндекс ].РайонКоэф = Текст( _РайонК, "ЧИСЛО 0.2" );

      мСтажи[ пИндекс ].ОсобУсл = Стаж0;
      мСтажи[ пИндекс ].ОсобУслКодПозСписка = Вверх('N диплома');

      мСтажи[ пИндекс ].ИсчТрудСтажа = Стаж1;
      Разбить( Профессия, ";", 
               мСтажи[ пИндекс ].ИсчТрудСтажаДоп1, 
               мСтажи[ пИндекс ].ИсчТрудСтажаДоп2, 
               мСтажи[ пИндекс ].ИсчТрудСтажаДоп3,
               мСтажи[ пИндекс ].ИсчТрудСтажаДоп0 );
      мСтажи[ пИндекс ].ИсчТрудСтажаДоп0 = Текст( мСтажи[ пИндекс ].ИсчТрудСтажаДоп0, "Текст" );
      мСтажи[ пИндекс ].ИсчТрудСтажаДоп1 = Текст( мСтажи[ пИндекс ].ИсчТрудСтажаДоп1, "Текст" );
      мСтажи[ пИндекс ].ИсчТрудСтажаДоп2 = Текст( мСтажи[ пИндекс ].ИсчТрудСтажаДоп2, "Текст" );
      Если( мСтажи[ пИндекс ].ИсчТрудСтажаДоп0 == "0" ) мСтажи[ пИндекс ].ИсчТрудСтажаДоп0 = "";
      Если( мСтажи[ пИндекс ].ИсчТрудСтажаДоп1 == "0" ) мСтажи[ пИндекс ].ИсчТрудСтажаДоп1 = "";
      Если( мСтажи[ пИндекс ].ИсчТрудСтажаДоп2 == "0" ) мСтажи[ пИндекс ].ИсчТрудСтажаДоп2 = "";

      мСтажи[ пИндекс ].ВыслЛет = Стаж2;
      Перем пРайонК;
      Разбить( Факультет, ";", 
               мСтажи[ пИндекс ].ВыслЛетДоп1, 
               мСтажи[ пИндекс ].ВыслЛетДоп2, 
               мСтажи[ пИндекс ].ВыслЛетДоп3,
               пРайонК );
      мСтажи[ пИндекс ].ВыслЛетДоп1 = Текст( мСтажи[ пИндекс ].ВыслЛетДоп1, "Текст" );
      мСтажи[ пИндекс ].ВыслЛетДоп2 = Текст( мСтажи[ пИндекс ].ВыслЛетДоп2, "Текст" );
      мСтажи[ пИндекс ].ВыслЛетДоп3 = Текст( Число( мСтажи[ пИндекс ].ВыслЛетДоп3 ), "ЧИСЛО 0.2" );
      Если( мСтажи[ пИндекс ].ВыслЛетДоп1 == "0" ) мСтажи[ пИндекс ].ВыслЛетДоп1 = "";
      Если( мСтажи[ пИндекс ].ВыслЛетДоп2 == "0" ) мСтажи[ пИндекс ].ВыслЛетДоп2 = "";

      Перем пОрганизация = Заменить( Вверх(Организация) , "\"", "'");
            пОрганизация = Заменить( Вверх(пОрганизация) , "N", "№");
      мСтажи[ пИндекс ].Организация = Вверх(пОрганизация);
      мСтажи[ пИндекс ].Профессия   = Заменить( Вверх(Специальность) , "\"", "'");
      Перем пВидДеятельности;
      Разбить( 'Вид деятельности', " ", пВидДеятельности );
      мСтажи[ пИндекс ].ВидДеятельности = пВидДеятельности;
   }
   
   Объект м.мСтажБезСжатия = мСтажи;
   м.тТипЗаписи = "КОНВ"; # СЗВ-К
   объект мПроверкаПФ = ПроверкаПФ( м );
   перем пТип, пПоле;
   ДляВсех( Элементов( мПроверкаПФ, пТип ) )
      ДляВсех( Элементов( мПроверкаПФ[ пТип ], пПоле ) )
      {
         оОшибки = Выборка( "Ошибки" );
         оОшибки._Тип = пТип;
         оОшибки._Поле = ПодСтрока( пПоле, 2, -1 );
         перем пЗначение = мПроверкаПФ[ пТип, пПоле ];
         Пока( пЗначение )
         {
            оОшибки._Комментарий += ПодСтрока( пЗначение, 1, 70 ) + "\n";
            пЗначение = ПодСтрока( пЗначение, 71, -1 );
         }
         Добавить( оОшибки );
      }

   объект оРасшифровкаОшибок = СоздатьДиалог( "Расшифровка ошибок" );
   ВыполнитьДиалог( оРасшифровкаОшибок );
}
