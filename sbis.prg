# Функции, используемые во всех задачах СБиС++

Функция НДС10()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция НДС20()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция НСП5()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция Сумма0()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция Сумма10()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция Сумма20()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция СуммаОсв()
# Дополнительные расчеты для параметров
# Возвращает 0, если параметр не определен
{
   Вернуть 0;
}

Функция СуммаДок()
# Сумма документа с налогами в т.ч.
{ 
   Вернуть Число(Сумма10)  + Число(Сумма20) + Число(Сумма0) + Число(СуммаОсв)
           + Число(НДС10)  +  Число(НДС20)  + Число(НСП5);
}

Функция НалогВкл( Сумма, Ставка )
# Возвращает: сумму выделенного налога
# Параметры:  Сумма  - сумма из которой надо выделить налог
#             Ставка - ставка по которой выделяется налог
{  
   Вернуть Окр( Число(Сумма) / (100 + Число(Ставка)) * Число(Ставка), 0.01 );
}

Функция НалогСвх( Сумма, Ставка )
# Возвращает: сумму рассчитанного налога
# Параметры:  Сумма  - сумма (без налога ) от которой надо рассчитать налог
#             Ставка - ставка по которой рассчитывается налог
{  
   Вернуть Окр( Число(Сумма) / 100 * Число(Ставка), 0.01 );
}

Функция НалогСверху( Сумма, Ставка )
# Возвращает: сумму рассчитанного налога
# Параметры:  Сумма  - сумма (без налога ) от которой надо рассчитать налог
#             Ставка - ставка по которой рассчитывается налог
{  
   Вернуть Окр( Число(Сумма) / 100 * Число(Ставка), 0.01 );
}

Функция Аналитика( ... )
# Параметры:  документ, для которого вычисляется аналитика.
#             Если параметр не указан, то используется текущий документ.
# Возвращает: Лицо2 - если Лицо2 документа заполнено;
#             Лицо1 - если Лицо2 не указано;
{ 
   Перем Док;
   Док = Размер( Параметры ) ?
             Параметры[1] :      # Либо в параметрах указан документ
             Документ;           # Либо проверяется текущий документ
   Если( Есть(Док.Лицо2) == 1 )
      Вернуть Док.Лицо2;
   Иначе
      Вернуть Док.Лицо1;
}

Функция ОсвобождНДС()
# Определяет освобождена ли организация от НДС на дату документа
# 1 - да, 0 - нет
{ 
   перем ОсвНДС;
   ОсвНДС =  Число( Константа(Документ.Дата, "ОСВОБОЖД_НДС") );
   Если( Есть(ДЕЯТ_НЕОБЛ_НДС) ) # на документе установлен параметр "Вид деяельности", не облагаемый НДС
      Если( ДЕЯТ_НЕОБЛ_НДС == 1 ) # вид деятельности НДС не облагается
         ОсвНДС = 1;
   Вернуть ОсвНДС;
}

Функция ОсвобождНДС(пДата)
# Определяет освобождена ли организация от НДС на указанную дату
# 1 - да, 0 - нет
{ 
   перем ОсвНДС;
   ОсвНДС =  Число( Константа(пДата, "ОСВОБОЖД_НДС") );
   Если( Есть( ДЕЯТ_НЕОБЛ_НДС ) ) # на документе установлен параметр "Вид деяельности", не облагаемый НДС
      Если(ДЕЯТ_НЕОБЛ_НДС == 1 ) # вид деятельности НДС не облагается
         ОсвНДС = 1;
   Вернуть ОсвНДС;
}

Функция НайтиДокумент(Тип, Дата, Номер, Тема)
# Найти документ по типу, дате, номеру и теме
{
   Объект О = Объект("Документ");
   'О.Тип документа' = Тип;
   О.Дата  = Дата;
   О.Номер = Номер;
   О.Тема  = Тема;
   Если( Найти(О, "Номер") != 1 )
      Очистить(О);
   Вернуть О;
}

Функция СтрокаДок( Документ )
# Используется в функциях и правилах операций для выдачи сообщений об ошибках
#   с указанием документа
# Возвращает строку, содержащую Тип, номер, тему, дату и сумму указанного документа
# Параметры: Документ - объект типа документ
{  
   Вернуть 'Документ.Тип документа' + " N" + Документ.Номер
           + (Документ.Тема ? "/" + Документ.Тема : "")
           + " от " + Документ.Дата + " =" + Документ.Сумма;
}

Функция КоэфОплаты()
# Вычисляет коэффициент оплаты по текущему документу основанию
# Вызывается внутри цикла ДляВсех(Оснований)
{  
   Перем СД;
   СД = Макс( Связь.Документ.Сумма2, Связь.Документ.Сумма );
   Копл = СД ? Число(Связь.Сумма / СД) : 0;
   Если( Копл > 1 и ЗакрытиеДокумента() )
      Ошибка( "Коэффициент оплаты=" + Копл + ", больше 1 не допускается!"
              + "\nИзмените сумму связи по " + СтрокаДок(Связь.Документ) );
   Вернуть Копл;
}

Функция СтрокаНДСОснований()
# Формирует строку НДС по документам, указанным в основании
# Используется в платежных поручениях, кассовых ордерах
{
   Перем Пр = "По";
   Деньги СуммаНДС10, СуммаНДС20, СуммаНСП5;
   ДляВсех( Оснований )
   { 
      СуммаНДС10 = СуммаНДС20 = СуммаНСП5 = 0;
      Копл = КоэфОплаты();  # Расчет коэффициента оплаты
      СуммаНДС10 = Есть(Связь.НДС10) ? Связь.НДС10 * Копл : 0;
      СуммаНДС20 = Есть(Связь.НДС20) ? Связь.НДС20 * Копл : 0;
      СуммаНСП5  = Есть(Связь.НСП5)  ? Связь.НСП5  * Копл : 0;
      Пр += " сч N" + Связь.Документ.Номер
            + (Связь.Тема ? "/" + Связь.Тема : "") + " " + Связь.Сумма;
      Если( СуммаНДС10 или СуммаНДС20 или СуммаНСП5 )
      { 
         Пр += " в т.ч."
         Если(СуммаНДС10) Пр += " НДС10% " + Текст(СуммаНДС10,"ДЕНЬГИ=");
         Если(СуммаНДС20) Пр += " НДС20% " + Текст(СуммаНДС20,"ДЕНЬГИ=");
         Если(СуммаНСП5)  Пр += " НСП5% "  + Текст(СуммаНСП5, "ДЕНЬГИ=");
      }
      Иначе
         Пр += " Без НДС";
   }
   # Если документы основания не указаны, то указывается вручную
   Если( Пр == "По" )
      Пр = Приложение;
#   Если( Пр == "По" и Сумма )
#      Пр = "В том числе НДС "+ Текст( Сумма * 20/120, "ДЕНЬГИ=" );
   Вернуть Пр;
}

Функция ОчиститьПараметры()
# Очищает параметры документа
{ 
   УдалитьПерем( СуммаОсв );
   УдалитьПерем( Сумма0 );
   УдалитьПерем( Сумма10 );
   УдалитьПерем( Сумма20 );
   УдалитьПерем( НДС10 );
   УдалитьПерем( НДС20 );
   УдалитьПерем( НСП5 );
}

Функция ЗакрытиеДокумента()
# Определяет момент закрытия документа
# Возвращает 1, если происходит закрытие документа, иначе 0
# Не рекомендуется к использованию
{       
   Если( Есть( Закрытие ) )
      Вернуть 1;
   Иначе
      Вернуть 0;
}

Функция Модуль( Число )
# Возвращает абсолютное значение по модулю
# не рекомендуется к использованию
{
   Вернуть Число( Число ) > 0 ? Число( Число ) : Число( -Число );
}

Функция ЕстьДокументыПоПравилуПозже( пДата )
# Проверяет, есть ли документы по правилу позже указанной даты
# Вызывается из справочника операций по <Ctrl+S>
# Возврашает 1 - есть, 0 - нет
# Работает в 1.8 и 1.9
{
   Объект оПравило  = '.'; # Текущая запись справочника правил операций
   Объект оДокумент = Объект( Есть(ВерсияПрограммы) ? "Документ" : "Документы" );
   # Находим последний документ по правилу
   Если( Предыдущий( оПравило, оДокумент, "Правила-Документы" ) )
      # Сравниваем дату документа с указанной датой
      Вернуть оДокумент.Дата >= пДата;
   Иначе # Нет документов по правилу
      Вернуть 0;
}

Функция ЦенаНаДату( Дата, ... )
# Возвращает цену товара из истории цен на указанную дату
# если в истории цен нет записей, то возвращает 0
# ЦенаНаДату( Дата [,ВидЦены [,оТовар] ] )
# Параметры:
#    Дата    - дата на которую требуется получить цену
#    ВидЦены - строка, содержащая название цены
#              возможные значения: Цена1, Цена2, Цена3, ПланСебест
#              если не указано, то берется Цена1
#    оТовар  - запись таблицы Номенклатура или Складская картотека или Лицо
#              если не указано, то используется контекстный объект ТОВАР
{
   Перем пВидЦены = Есть( Параметры[1] ) ? Параметры[1] : "Цена1";
   Объект оТовар  = Есть( Параметры[2] ) ? Параметры[2] : ТОВАР;

   Объект оЦена = Объект( "Цены" );
   # Устанавливаем фильтр для поиска
   Связать( 'оЦена.Номенклатура-Цены', оТовар );
   # В случае если в оТовар был объект не "Номенклатура" а "Складская картотека" или "Лицо"
   # то в результате в оТовар будет соответствующая запись "Номенклатура"
   оТовар = Объект( 'оЦена.Номенклатура-Цены' );
   оЦена.Дата = Дата;
   # Выполняем поиск
   Если( Найти( оЦена, "Номенклатура-Цены" ) )    # Найдена какая-то запись в истории цен
      Если( 'оЦена.Номенклатура-Цены' == оТовар ) # Это запись для искомой номенклатуры
         Вернуть оЦена[пВидЦены];
   Вернуть 0;
}

Функция Оплата( Документ, пДата )
# Возвращает сумму оплаты указанного документа на указанную дату, включительно
# Параметры:
#    Документ (объект) - документ, для которого рассчитывается оплата
#    пДата (дата) - дата, на которую определяется оплата
{
   Перем СуммаОплаты = 0;
   # Перебираем все основания
   ДляВсех( Записей( "Связка2", Документ ) )
   {
      Если( СВЯЗЬ.Дата <= пДата и Флаг( СВЯЗЬ.Флаги, "Оплата" ) )
         СуммаОплаты += СВЯЗЬ.Сумма;
   }
   # Перебираем все следствия
   ДляВсех( Записей( "Связка1", Документ ) )
      Если( СВЯЗЬ.Дата <= пДата и Флаг( СВЯЗЬ.Флаги, "Оплата" ) )
         СуммаОплаты += СВЯЗЬ.Сумма;
   Вернуть СуммаОплаты;
}

Функция СтрокаРазработчики()
# Печатает завершающую строку на странице печатной формы
{
   Формат( СтрокаРазработчики,"ТЕКСТ в УН" );
   Вернуть("Отпечатано в системе СБиС++, г.Ярославль, (0852)72-72-61, 45-14-13");
}

Функция ДобавитьНаим( Лицо, Сумма )
# Вызывается в ведомостях прочих выплат
# Добавляет лицо в ведомость с указанной суммой
# Параметры:
#    Лицо (объект)  - добавляемое лицо
#    Сумма (деньги) - сумма для ведомости
{
   Объект оСтрока = Выборка("Список лиц");
   Связать( 'оСтрока.Ведомость-Список',Документ );
   Связать( 'оСтрока.Лица-Список', Лицо );
   оСтрока.Сумма = Сумма;
   Добавить(оСтрока);
}

функция Dos2Win( Стр )
# конвертирует переданную строку из DOS-кодировки в Win-кодировку и возвращает результат
{
   Перем WIN = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ ";
   Перем DOS = "                                                                АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя";
   Перем Стр2 = "";
   Перем н = 1;
   Пока( н <= Размер( Стр ) )
   {
      Перем Символ = ПодСтрока( Стр, н, 1 );
      Если( Символ != " " )
      {
         Перем поз = Найти( DOS, Символ );
         Если( поз > 0 )
            Стр2 += ПодСтрока( WIN, поз, 1 );
         иначе
            Стр2 += Символ;
      }
      иначе
         Стр2 += " ";
      н++;
   }
   вернуть Стр2;
}

функция Win2Dos( Стр )
# конвертирует переданную строку из Win-кодировки в DOS-кодировку и возвращает результат
{
   Перем WIN = "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ ";
   Перем DOS = "                                                                АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя";
   Перем Стр2 = "";
   Перем н = 1;
   Пока( н <= Размер( Стр ) )
   {
      Перем Символ = ПодСтрока( Стр, н, 1 );
      Если( Символ != " " )
      {
         Перем поз = Найти( WIN, Символ );
         Если( поз > 0 )
            Стр2 += ПодСтрока( DOS, поз, 1 );
         иначе
            Стр2 += Символ;
      }
      иначе
         Стр2 += " ";
      н++;
   }
   вернуть Стр2;
}

Функция НайтиСклад( пНомНомер )
# Находит склад (объект) в таблице Складская катротека
# Параметр : пНомНомер (текст) номенклатурный номер склада, например "СКЛАД-N1"
{
   Объект оНоменклатура = Объект( "Номенклатура" );
   оНоменклатура.НомНомер = пНомНомер;
   Если( Найти( оНоменклатура, "НомНомер" ) == 1 )
   {
      Объект оСклад = Объект( "Складская картотека" );
      оСклад.Связать( "Номенклатура-Склад", оНоменклатура );
      Найти( оСклад, "Номенклатура-Склад" );
      Если( 'оСклад.Номенклатура-Склад' == оНоменклатура )
         Вернуть оСклад;
   }
   # Иначе возвращаем пустой объект
   Вернуть Объект( "Складская картотека" );
}

Функция КонстантыЕНВД()
{
   объект оДиалог = СоздатьДиалог( "ЕНВД константы" );
   # присваиваем значения нужным полям
   Установить(оДиалог);
   Разбить(Имя, "_", @Справочник, @ИНН_ТЕМА, @ВИД_Д );
   объект оЛицо = НайтиЛицо(@ИНН_ТЕМА, @Справочник);
   Если( Есть(оЛицо)>0 )
   {
      Связать(оДиалог.ОИНН, оЛицо);
   }
   @Название = оДиалог.ОИНН.Название;
   Разбить(Значение, ",", @Баз_Дох, @Физ_Пок, @К1, @К2, @К3);
   Если( ВыполнитьДиалог( оДиалог ) )
   {
      Имя = @Справочник + "_" + @ИНН_ТЕМА + "_" + @ВИД_Д;
      'Полное имя' = @Название;
      Значение = @Баз_Дох + "," + @Физ_Пок + "," + @К1 + "," + @К2 + "," + @К3;
   }
}

Функция ЗначениеКонстантыЕНВД()
{
   объект оДиалог = СоздатьДиалог( "Значение константы ЕНВД" );
   # присваиваем значения нужным полям
   Установить(оДиалог);
   @пДат = Дата;
   Разбить(Значение, ",", @Баз_Дох, @Физ_Пок, @К1, @К2, @К3);
   Если( ВыполнитьДиалог( оДиалог ) )
   {
      Значение = @Баз_Дох + "," + @Физ_Пок + "," + @К1 + "," + @К2 + "," + @К3;
      Дата = @пДат;
   }
}

Функция КоэфЕНВД( пДата )
# Возвращает долю выручки с ЕВНД от общей суммы выручки
# за указанный месяц из константы КОЭФ_ЕНВД
# Если на конец указанного месяца нет значения в истории константы, то
# Выдает ошибку и предлагает заполнить это значение
# Параметры: пДата - дата определяющая месяц
{ 
   Объект оКонст = Объект("Константы");
   оКонст.Имя = "КОЭФ_ЕНВД";
   Если( Найти( оКонст, "Имя" ) != 1 )
      Ошибка( "Не найдена константа с именем 'КОЭФ_ЕНВД',\n"
            + "Определяющая долю выручки с ЕНВД от общей суммы выручки!");
   Объект оИстКон = Объект("История констант");
   Связать( 'оИстКон.Константа-История', оКонст );
   Перем пДатКнц = Дата( 31, Месяц( пДата ), Год( пДата ) );
   оИстКон.Дата = пДатКнц;
   Если( Найти( оИстКон, "Константа-История" ) != 1 )
      Ошибка( "Не заполнено значение константы 'КОЭФ_ЕНВД' на " + пДатКнц + ",\n"
            + "определяющее долю выручки с ЕНВД от общей суммы выручки!\n"
            + "Рассчитайте ее в прочем документе с правилом\n"
            + "'Расчет доли выручки с ЕВНД за месяц'." );
   Перем пКоэф = Число( оИстКон.Значение );
   Если( пКоэф < 0 или пКоэф > 1 )
      Ошибка( "Значение константы 'КОЭФ_ЕНВД' на " + пДатКнц + ",\n"
            + "определяющее долю выручки с ЕНВД от общей суммы выручки\n"
            + "должно быть заполнено в пределах от 0 до 1." );
   Вернуть пКоэф;
}

Функция ДатаНДС()
#  Определяет дату, по которой выбирается ставка НДС (10 или 20%)
#  Для всех документов, кроме счетов - это дата документа,
#  Для счетов - срок оплаты.
#  Предполагается, что если выставляется счет - товар ещё не отгружен/оприходован и НДС ещё не начислен
{
   перем пДата = Есть( Параметры[ 1 ] ) ? Параметры[ 1 ] : Дата;
   Если( Есть( 'Тип документа' ) )
      Если( 'Тип документа' == "СчетИсхд" или 'Тип документа' == "СчетВход" )
          пДата = 'Срок оплаты' ? 'Срок оплаты' : пДата;
   Если('Тип документа' == "НаклРасх") # Расходная накладная - проверяем, не на возврат ли
      Если(Найти(Вверх('Ключевая фраза'), "ВОЗВРАТ " ) )
      {
         ДляВсех(Оснований( "НаклПрих" ) )   # Возврат поставщику - считаем НДС по ставке, по которой приходовали  (на дату прихода)
            пДата = Связь.Документ.Дата;  
         ДляВсех(Оснований( "НаклРасх" ) )
            пДата = Связь.Документ.Дата;     # Возврат от покупателя - считаем НДС по ставке, по которой отгружали (на дату отгрузки)
      }

   Вернуть пДата;
}

# Определяет ставку налога:
# до 2004 года возвращает параметр Н1_03,
# с  2004 года возвращает параметр Н1_04
Функция нН1()
{
   Если( ДатаНДС() <= 31.12.03 )
   {
      Если( Есть( Н1_03 ) )
         Вернуть( Н1_03 )
      Иначе
         Ошибка( "Не определён параметр Н1_03 для" + Наименование );
   }
   Иначе
   {
      Если( Есть( Н1_04 ) )
         Вернуть( Н1_04 )
      Иначе
         Ошибка( "Не определён параметр Н1_04 для" + Наименование );
   }
}