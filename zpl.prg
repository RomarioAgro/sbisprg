# Функции для расчета заработной платы

Функция СреднееМаксЧасы( Дата )
# Рассчитывает максимальное часовое пособие
# в указанном месяце по графику больничного
# Определяет глобальную переменную .СреднееМакс
# Параметр: Дата - начало оплачиваемого периода
{
   ПроверитьКонстанту("МРОТ", "Минимальный размер месячной оплаты труда", 450);
   перем ДатНач, ДатКнц, План;
   ЗаМесяц(Дата);
   План = ПланЧасы(ДатНач, ДатКнц);
   Если(План)
   {
      Если( Дата > 14.02.2002 )
         Вернуть .СреднееМакс = Деньги(11700) / План;
      Иначе
         Вернуть .СреднееМакс = Деньги( Константа(Дата, "МРОТ") ) * 85 / План;
   }
   Иначе
      Вернуть    .СреднееМакс = 0;
}

Функция СреднееМаксДни( Дата )
# Рассчитывает максимальное дневное пособие
# в указанном месяце по графику больничного
# Определяет глобальную переменную .СреднееМакс
# Параметр: Дата - начало оплачиваемого периода
{
   ПроверитьКонстанту("МРОТ", "Минимальный размер месячной оплаты труда", 450);
   перем ДатНач, ДатКнц, План;
   ЗаМесяц(Дата);
   План = ПланДни(ДатНач, ДатКнц);
   Если(План)
   {
      Если( Дата > 14.02.2002 )
         Вернуть .СреднееМакс = Деньги(11700) / План;
      Иначе
         Вернуть .СреднееМакс = Деньги( Константа(Дата,"МРОТ") ) * 85 / План;
   }                                                        
   Иначе
      Вернуть    .СреднееМакс = 0;
}

Функция ПочтовыйСборСверху( Сумма )
# Параметр  : сумма без почтового сбора
# Возвращает: сумму почтового сбора с НСП посчитанную сверху
# Определяет глобальную переменную .ПочтНСП сумма НСП с почтового сбора
{
   Если( Константа( МесРасчета(), "ТАРИФ_ПОЧТ" ) != "Ускоренные" )
   # Обычные платежи 8,6,4%
   {
      Число ПроцПочт;
      Деньги Сум = БезКоп(Сумма);
      Если( Сум < Сумма )
         Сум += 1; # если были копейки, то округлять в большую сторону
      Число ПроцПочт;
      Если( Сум <= 1000 )       ПроцПочт = 0.08;
      Иначе Если( Сум <= 5000 ) ПроцПочт = 0.06;
      Иначе                     ПроцПочт = 0.04;
      Сум *= ПроцПочт;
      .ПочтНСП = НалогСвх( Сум, Константа( МесРасчета(), "НСП_ПОЧТ" ));
      Вернуть Сум + .ПочтНСП;
   }
   Иначе
   # Ускоренные платежи ELPAY с регрессивной шкалой
   {
      Деньги Сум = БезКоп(Сумма);
      Если( Сум < Сумма )
         Сум += 1; # если были копейки, то округлять в большую сторону
      Если( Сум <= 6000 )         Сум = 0.05 * Сум;
      Иначе Если( Сум <=  25000 ) Сум = 0.04 * Сум + 300;
      Иначе Если( Сум <=  50000 ) Сум = 0.03 * Сум + 1060;
      Иначе Если( Сум <= 100000 ) Сум = 0.02 * Сум + 1810;
      Иначе Ошибка("Сумма почтового перевода по ускоренной системе ELPAY не может быть более 100000");
      .ПочтНСП = НалогСвх( Сум, Константа( МесРасчета(), "НСП_ПОЧТ" ));
      Вернуть Сум + .ПочтНСП;
   }
}

Функция ПочтовыйСборВкл( Сумма )
# Параметр  : сумма включая почтовый сбор и НСП
# Возвращает: сумму почтового сбора и НСП в том числе
# Определяет глобальную переменную .ПочтНСП сумма НСП с почтового сбора
{
   Число ПроцНСП, ПроцПочт;
   ПроцНСП = Константа( МесРасчета(), "НСП_ПОЧТ" );
   Если( Сумма < (1000.01 + 1001 * 0.06 + НалогСвх( 1001 * 0.06, ПроцНСП )) )
      ПроцПочт = 0.08;
   Иначе Если( Сумма < (5000.01 + 5001 * 0.04 + НалогСвх( 5001 * 0.04, ПроцНСП )) )
      ПроцПочт = 0.06;
   Иначе 
      ПроцПочт = 0.04;
   Деньги Сум, Почта;
   Сум = Сумма / ( 1 + ПроцПочт * (1 + ПроцНСП / 100) );
   Если( БезКоп(Сум) < Сум ) # если были копейки, то округлять в большую сторону
      Сум = БезКоп(Сум) + 1;
   Иначе
      Сум = БезКоп(Сум);
   Почта = Сум * ПроцПочт;
   .ПочтНСП = НалогСвх( Почта, ПроцНСП );
   Вернуть Почта + .ПочтНСП;
}

Функция СреднееДни( График, ДатаСобыт, ... )
# СреднееДни( График, ДатаСобыт [, РасчетПериод ])
# Возвращает среднедневной заработок
# Используется если нет суммированного учета рабочего времени
# Параметры: 
#   График - (7 или 5) 7 - для отпусков, 5 - для гособязанностей и т.д.
#   ДатаСобыт - дата начала события (отпуска), относительно которой определяется расчетный период
#   РасчетПериод - количество месяцев расчетного периода 3, 12 или любое другое
# Определяет глобальные переменные, которые используются в отчете "Справка по среднему отпуска":
#   .Среднее        - среднедневной заработок
#   .ПР3,.ПР6,.ПР12 - суммы квартальной, полугодовой и годовой премий (в размере месячной части)
#   .ПРЕД - суммы премий за прошлые месяца за расчетный период
#   .мГраф - календарные дни приходящиеся на отработанное время ( для отпусков )
#          - дни по пятидневке приходящиеся на отработанное время ( для гособязанностей и т.д. )
#            за исключением времени оплаты по среднему.
#   .График - значение параметра График 7 или 5.
#   .ПоДням - 1
#   .КолМес - количество месяцев, учтенных в расчетном периоде (нужно для определения доли премий)
#   .СреднееМесПрем - среднемесячная премия, для форм Т-60,61
#   .КоэфОтр - Коэффициент отработанного времени для учета премий
#   .КоэфОтрСтр - то же но в виде строки расшифроки расчета
#
# Описание меток в табеле:
#   Б Временная нетрудоспособность в т.ч. по беременности и родам
#   О Ежегодный отпуск
#   У Учебный отпуск с полным сохранением заработной платы
#   А Административный отпуск без сохранения зарплаты на основании статьи 76 КЗоТ 
#   Ю Отгул по заявлению работника без сохранения зарплаты
#   К Командировки
#   Г Выполнение государственных и общественных обязанностей
#   Т Льготные дни родителей детей-инвалидов
#   И Простои по вине работодателя
#   Е Перевод на более легкий труд
#   М Медицинское обследование или дни доноров
#   З Забастовки, в которых работник не участвовал, но не имел возможности работать
{
   Перем РасчетПериод = Есть( Параметры[1] ) ? Параметры[1] : 3;
 
   .ПРЕД = .ПР3 = .ПР6 = .ПР12 = .КолМес = 0;
   .График = График;
   .ПоДням = 1;
   .КоэфОтр = 0;
   .КоэфОтрСтр = "";
   Очистить(.мГраф);

   Перем пГрафикСре;
   Если( График == 7 ) # Расчет среднего для отпусков в календарных днях
      пГрафикСре = "График для отпусков (кален.дни)";
   Иначе Если( График == 5 ) # Расчет среднего для остальных случаев, кроме отпусков
      пГрафикСре = "Пятидневка";
   Иначе Ошибка("Недопустимое значение параметра График при вызове функции СреднееДни()");

   # Далее определяем периоды времени (больничные), исключаемые из расчетного периода
   Объект Д1, Д2;
   Перем Н = 0;
   ДляВсех( БольничныхСотр() )
      Если(ДатНач и ДатКнц и Метка и Метка != " ")
      # Если сотрудник заболел, но больничный еще не принес, то метка " "
      # В след мес при предъявлении больничного оформляется еще один больничный с меткой "Б"
      {
         Д1[Н] = ДатНач; Д2[Н] = ДатКнц; Н++;
      }
   # Определяется сумма годовой премии за прошлый год
   # К премиям за прошлый год относятся премии, начисленные за период
   # с декабря прошлого года по текущий месяц расчета включая,
   # за исключением декабря текущего года.
   Перем ДатНач = Дата(1, 12, Год( ДатаСобыт ) - 1);
   Перем ДатКнц = Мин( МесРасчета(), Дата( 30, 11, Год( ДатаСобыт ) ) );
   .ПР12 = ЗаПериодРасчета("ПР12") / 12;
   Перем С = К = М = 0;
   Объект мПропДни; # Массив в котором будут храниться пропущенные дни
   М = 1;
   Пока( М <= РасчетПериод )
   {
      ЗаМесяц( Дата( 1, Месяц( ДатаСобыт ) - М, Год( ДатаСобыт ) ) );
      Перем МесДатНач = ДатНач;
      Перем МесДатКнц = ДатКнц;
      ДатНач = Макс(ДатНач, Принят);
      ДатКнц = Мин( ДатКнц, Уволен);
      Если( ДатНач <= ДатКнц )
      {
         .КолМес++;
         # Определяем график работника
         Объект оДолжн = ТекДолжность( ДатКнц );
         пГрафикРаб = Есть( 'оДолжн.ФРВ-Отпуск' ) ? 'оДолжн.ФРВ-Отпуск.Название' : "";
         # Для среднего для отпусков при графике пятидневка
         # используется коэфф. пересчета 1.4 от рабочих дней (если месяц отработан не полностью, иначе 29.6)
         Перем пГрафик;
         Если( График == 7 и пГрафикРаб == "Пятидневка" )
            пГрафик = пГрафикРаб;
         Иначе
            пГрафик = пГрафикСре;
   
         Перем Сдвиг = М + Месяц('Дата начисления') - Месяц(ДатаСобыт)
                     + ( Год('Дата начисления') - Год(ДатаСобыт) ) * 12;
         # Этот расчет нужен потому что функция Среднее берет смещение
         # относительно 'Даты начисления'
         Среднее( Сдвиг, Сдвиг ); # Определяет переменную ОбщаяСумма
         # Премии за предыдущий месяц, учитываются все, но пропорционально отработанному времени
         .ПРЕД += ЗаПериодРасчета("ПРЕД");
         # Премии за периоды работы, превышающие один месяц, берутся не более одной.
         Если(!.ПР3) .ПР3 = ЗаПериодРасчета("ПР3") / 3;
         Если(!.ПР6) .ПР6 = ЗаПериодРасчета("ПР6") / 6;
         # Кол-во план. и факт. дней в месяце по указанному графику
         Перем пПлан = пФакт = ПланДни(пГрафик, ДатНач, ДатКнц,"");
         Очистить( мПропДни );
         # Дополнительно сохраняем плановые дни в "пПлан" для
         # дальнейшего сравнения их с фактическими днями и выбора коэффициента 29.6
         # Время, исключаемое из расчетного периода, оформленное отпусками и больничными
         ДляВсех(Элементов(Д1,Н))
         {  Перем пНач = Макс(Д1[Н], ДатНач); # Находим больничные
            Перем пКнц = Мин( Д2[Н], ДатКнц); # приходящиеся на расчетный месяц
            Перем пДат = пНач;
            # Переберем все дни больничного
            Пока( пДат <= пКнц )
            {  # Если этот день есть в указанном графике
               Если( ПланДни( пГрафик, пДат, пДат, "" ) )
                  мПропДни[ пДат ] = "";
               пДат += 1;
            }
         }
         Перем пКолТаб = 0;
         ДляВсех(Табелей(МесДатНач))
         {  # Если это табель по основной должности
            Если( Флаг( 'Расчеты>Расчет_.Признак', "Основная должность" ) )
            {
               # Коэффициент отраб. времени для учета премий
               .КоэфОтр += ПланДни ? ФактДни / ПланДни : 0;
               .КоэфОтрСтр = ФактДни + "/" + ПланДни + ( !КоэфОтрСтр ? " )" : " + " ) + .КоэфОтрСтр;
               # Определяем время по графику, исключаемое из расчетного периода
               Перем пНач = Макс( ДатНач, 'Расчеты.Дата расчета' );   # Если был перевод с должности на должность,
               Перем пКнц = Мин(  ДатКнц, 'Расчеты.Дата начисления' );# то рассмотрим только часть месяца, приходящуюся на данную должность
               
               Перем пДат = пНач;
               Пока( пДат <= пКнц ) # Переберем дни в табеле
               {  # Если этот день есть в указанном графике
                  Если( ПланДни( пГрафик, пДат, пДат, "*" ) )
                  {  # Если этот день в табеле отмечен меткой, которые исключаются из расчетного периода.
                     Если( ФактДни( пДат, пДат, "О+У+А+Ю+К+Г+Т+И+Е+М+З" ) )
                           мПропДни[пДат] = "";
                     # Если этот день в табеле не отработан и вышеперечисленной метки нет (прогул например)
                     # тогда проверяем есть ли этот день в графике работника
                     Иначе Если( ФактЧасы( пДат, пДат, "*" ) == 0 )
                              Если( ПланДни( пГрафикРаб, пДат, пДат, "*" ) )
                                 мПропДни[пДат] = "";
                  }
                  пДат += 1;
               }
               пКолТаб++;
            }
         }
         пФакт -= Размер( мПропДни );
         Если( !пКолТаб ) Сообщить("У " + ФИО(ФИО) + " (" + ТабНомер + ") нет табеля по основной должности за " + МесДатНач);
   
         Если( График == 7 ) # Для отпусков
         {
            # Если месяц отработан полностью
            Если( пФакт == пПлан и пФакт != 0
                и ДатНач == МесДатНач и ДатКнц == МесДатКнц )
            {   # с 1 февраля берем количество дней - 29.6 (Трудовой кодекс)
                Если( ДатаСобыт >= 01.02.02 )
                   пФакт = 29.6;
            }
            # Если месяц отработан не полностью
            # то для пятидневки используется коэффициент пересчета 1.4 от рабочих дней по пятидневке
            Иначе Если( пГрафикРаб == "Пятидневка" )
               пФакт = пФакт * 1.4;
         }
         .мГраф[Месяц(МесДатНач)] = пФакт;
         К += пФакт;
         С += ОбщаяСумма;
      }
      М += 1;
   }
   .КоэфОтр        = .КолМес ? .КоэфОтр / .КолМес : 0;
   .КоэфОтрСтр     = .КоэфОтрСтр ? ( "( " + .КоэфОтрСтр + " / " + .КолМес ) : "";
   .СреднееМесПрем = (.ПР3 + .ПР6 + .ПР12) * .КоэфОтр;
   .СреднееМесПрем += .КолМес ? ( .ПРЕД * .КоэфОтр / .КолМес ) : 0;
   С += .СреднееМесПрем * .КолМес;
   .Среднее = Деньги( К > 0 ? С / К : 0 );
   Вернуть .Среднее;
}

# СреднееЧасы( ДатаСобыт [, РасчетПериод ])
# Возвращает среднечасовой заработок
# Используется для суммированного учета рабочего времени
# Параметры: 
#   ДатаСобыт - дата начала события (отпуска), относительно которой определяется расчетный период
#   РасчетПериод - количество месяцев расчетного периода 3, 12 или любое другое
# Определяет глобальные переменные, которые используются в отчете "Справка по среднему отпуска":
#   .Среднее        - среднедневной заработок
#   .ПР3,.ПР6,.ПР12 - суммы квартальной, полугодовой и годовой премий (в размере месячной части)
#   .ПРЕД - суммы премий за прошлые месяца за расчетный период
#   .мГраф - календарные дни приходящиеся на отработанное время ( для отпусков )
#          - дни по пятидневке приходящиеся на отработанное время ( для гособязанностей и т.д. )
#            за исключением времени оплаты по среднему.
#   .КолМес - количество месяцев, учтенных в расчетном периоде (нужно для определения доли премий)
#   .ПоДням - 0
#   .СреднееМесПрем - среднемесячная премия, для форм Т-60,61
#   .КоэфОтр - Коэффициент отработанного времени для учета премий
#   .КоэфОтрСтр - то же но в виде строки расшифроки расчета
# Описание меток в табеле:
#   Б Временная нетрудоспособность в т.ч. по беременности и родам
#   О Ежегодный отпуск
#   У Учебный отпуск с полным сохранением заработной платы
#   А Административный отпуск без сохранения зарплаты на основании статьи 76 КЗоТ 
#   Ю Отгул по заявлению работника без сохранения зарплаты
#   К Командировки
#   Г Выполнение государственных и общественных обязанностей
#   Т Льготные дни родителей детей-инвалидов
#   И Простои по вине работодателя
#   Е Перевод на более легкий труд
#   М Медицинское обследование или дни доноров
#   З Забастовки, в которых работник не участвовал, но не имел возможности работать
Функция СреднееЧасы( ДатаСобыт, ... )
{
   Перем РасчетПериод = Есть( Параметры[1] ) ? Параметры[1] : 3;
 
   .ПРЕД = .ПР3 = .ПР6 = .ПР12 = .КолМес = 0;
   .ПоДням = 0;
   .КоэфОтр = 0;
   .КоэфОтрСтр = "";
   Очистить(.мГраф);

   # Определяется сумма годовой премии за прошлый год
   # К премиям за прошлый год относятся премии, начисленные за период
   # с декабря прошлого года по текущий месяц расчета включая,
   # за исключением декабря текущего года.
   Перем ДатНач = Дата(1, 12, Год( ДатаСобыт ) - 1);
   Перем ДатКнц = Мин( МесРасчета(), Дата( 30, 11, Год( ДатаСобыт ) ) );
   .ПР12 = ЗаПериодРасчета("ПР12") / 12;
   Перем С = К = М = 0;
   М = 1;
   Пока( М <= РасчетПериод )
   {
      ЗаМесяц( Дата( 1, Месяц( ДатаСобыт ) - М, Год( ДатаСобыт ) ) );
      # Расчет фактически отработанных дней по указанному графику
      Перем МесДатНач = ДатНач;
      Перем МесДатКнц = ДатКнц;
      ДатНач = Макс(ДатНач, Принят);
      ДатКнц = Мин( ДатКнц, Уволен);
      Если( ДатНач <= ДатКнц )
      {
         .КолМес++;
         Перем Сдвиг = М + Месяц('Дата начисления') - Месяц(ДатаСобыт)
                   + ( Год('Дата начисления') - Год(ДатаСобыт) ) * 12;
         # Этот расчет нужен потому что функция Среднее берет смещение
         # относительно 'Даты начисления'
         Среднее( Сдвиг, Сдвиг ); # Определяет переменную ОбщаяСумма
         # Премии за предыдущий месяц, учитываются все, но пропорционально отработанному времени
         .ПРЕД += ЗаПериодРасчета("ПРЕД");
         # Премии за периоды работы, превышающие один месяц, берутся не более одной.
         Если(!.ПР3) .ПР3 = ЗаПериодРасчета("ПР3") / 3;
         Если(!.ПР6) .ПР6 = ЗаПериодРасчета("ПР6") / 6;
         # Время, исключаемое из расчетного периода, определяем по меткам табеля
         Очистить(мИсклЧасы); # Массив с исключаемыми днями (на случай двух табелей)
         Перем пФакт = пКолТаб = 0;
         ДляВсех(Табелей(МесДатНач))
         {  # Если это табель по основной должности
            Если( Флаг( 'Расчеты>Расчет_.Признак', "Основная должность" ) )
            {
               # Коэффициент отраб. времени для учета премий
               .КоэфОтр += ПланЧасы ? ФактЧасы / ПланЧасы : 0;
               .КоэфОтрСтр = ФактЧасы + "/" + ПланЧасы + ( !КоэфОтрСтр ? " )" : " + " ) + .КоэфОтрСтр;
               # Фактические часы, за исключением оплаты по среднему 
               # Дни с метками Б+О+У+А+Ю не вычитаются, так как при этом часы равны = 0
               пФакт += ФактЧасы - ФактЧасы( ДатНач, ДатКнц, "К+Г+Т+И+Е+М+З" );
               пКолТаб++;
            }
         }
         Если( !пКолТаб ) Сообщить("У " + ФИО(ФИО) + " (" + ТабНомер + ") нет табеля по основной должности за " + МесДатНач);
         .мГраф[Месяц(МесДатНач)] = пФакт;
         К += пФакт;
         С += ОбщаяСумма;
      }
      М += 1;
   }
   .КоэфОтр        = .КолМес ? .КоэфОтр / .КолМес : 0;
   .КоэфОтрСтр     = .КоэфОтрСтр ? ( "( " + .КоэфОтрСтр + " / " + .КолМес ) : "";
   .СреднееМесПрем = (.ПР3 + .ПР6 + .ПР12) * .КоэфОтр;
   .СреднееМесПрем += .КолМес ? ( .ПРЕД * .КоэфОтр / .КолМес ) : 0;
   С += .СреднееМесПрем * .КолМес;
   .Среднее = Деньги( К > 0 ? С / К : 0 );
   Вернуть .Среднее;
}

Функция ТекДолжность(...)
# Возвращает объект - основную должность сотрудника на заданную дату
# или текущую дату, если дата не указана
# Если на указанную дату нет действующей должности, то возвращается
# последняя должность, действовавшая до указаной даты.
{
   Перем ДатаРасч = Есть(Параметры[1]) ? Параметры[1] : ТекДат();
   Объект оРасч;
   ДляВсех( ДолжностейСотр() ) # В порядке убывания даты начала ('Дата расчета')
   {
      Если( Флаг( 'ОТПУСК/БОЛЬН.Расчет_.Признак', "Основная должность" ) )
      {  # Если должность начинается до искомой даты
         Если( ДатаРасч >= 'Дата расчета' )
         {  # Запоминаем первую встретившуюся должность, начинающуюся до искомой даты
            Если( Есть( оРасч ) != 1 )
            {
               оРасч = Объект('ОТПУСК/БОЛЬН.Расчет_.Расчет_');
               оРасч.Название   = 'оРасч.Виды расчетов-Расчет.Виды расчетов-Должности.Название';
               оРасч.Примечание = 'оРасч.Виды расчетов-Расчет.Виды расчетов-Должности.Примечание';
            }
            # Если должность заканчивается после искомой даты
            Если( 'Дата начисления' >= ДатаРасч  )
            {
               оРасч = Объект('ОТПУСК/БОЛЬН.Расчет_.Расчет_');
               оРасч.Название   = 'оРасч.Виды расчетов-Расчет.Виды расчетов-Должности.Название';
               оРасч.Примечание = 'оРасч.Виды расчетов-Расчет.Виды расчетов-Должности.Примечание';
               Вернуть оРасч;
            }
         }
      }
   }
   Если( Есть( оРасч ) != 1 )
   {
      оРасч = Объект("Расчет");
      оРасч.Название   = "";
      оРасч.Примечание = "";
   }
   Вернуть оРасч;
}

Функция ПовышенаПоУслТруда(...)
# Повышена-ли ставка по условиям труда
{ 
   Если( Процент и Процент > 100 и (ПодСтрока('Разряд', 2, 1) == "С"
         или ПодСтрока('Разряд', 2, 1) == "П") и ПодСтрока(Разряд, 3, 1)== "1" ) Вернуть 1;
   Вернуть 0;
}

Функция СредБолПремия( ДатаСобыт )
# Расчет среднемесячной премии
# Для расчета пособий по больничному листу
# Параметры :
#    ДатаСобыт - дата начала нетрудоспособности
# Возвращает:
#    средПрем - среднемесячная премия
# Определяет глобальные переменные, которые используются в справке по расчету:
#    срПрем - среднемесячная премия
#    срПР, срПР3, срПР6, срПР12 - средние суммы разовых, квартальной, полугодовой и годовой премий
#    срКМес - количество месяцев за год, за которые посчитана среднемесячная премия
{ 
   ПроверитьКонстанту( "84НерПриб","Счет нераспределенной прибыли (нов план счетов). Если ее нет - ''", "84-1", "ЕСН");
   Перем ДатНач, ДатКнц; # Что бы не портить внешние переменные
   # Расчет среднемесячной премии за год
   # Устанавливаем период за год предшествующий началу трудоспособности
   СНачГода( ЗаМесяц( Дата( 1, Месяц( ДатаСобыт ) - 1, Год( ДатаСобыт ) ) ) );
   # но не раньше даты принятия на работу
   ДатНач = Макс( ДатНач, Принят );
   # Количество месяцев в установленном периоде
   .срКМес = Месяц( ДатКнц ) - Месяц( ДатНач ) + 1
         + ( Год( ДатКнц ) - Год( ДатНач ) ) * 12;
   # Если берется период менее трех месяцев, то в каждом месяце учитыв-я не более одной трети квартальной премии. 
   КМесКв = Макс( срКМес, 3 );
   Перем пСчНерПриб = ( ДатНач >= ДАТА_НОВ_ПЛАН ) ? 84НерПриб : 88НерПриб;
   Если( .срКМес )
   {  # Суммы премий, деленные на соответствующее число месяцев
      .срПР   = ( ЗаПериодРасчета("ПР")   # разовые/единовременные премии
                  - ЗаПериодРасчета("ПР",   пСчНерПриб ) ) / .срКМес;
      .срПР3  = ( ЗаПериодРасчета("ПР3")  # квартальная премия
                  - ЗаПериодРасчета("ПР3",  пСчНерПриб ) ) / КМесКв;
      .срПР6  = ( ЗаПериодРасчета("ПР6")  # премия за полугодие
                  - ЗаПериодРасчета("ПР6",  пСчНерПриб ) ) / .срКМес;
      .срПР12 = ( ЗаПериодРасчета("ПР12") # годовая премия и выслуга лет за год
                  - ЗаПериодРасчета("ПР12", пСчНерПриб ) ) / 12;
   }
   Иначе # Если был принят на работу и сразу заболел
   {  
      .срПР = .срПР3 = .срПР6 = .срПР12 = 0;
   }
   # Если годовая премия и выслуга лет за год не начислялись
   # в этом году, то считаем их по прошлому году
   Если( .срПР12 == 0 )
   {
       ЗаГод( Дата( 1, 1, Год( ДатНач ) - 1 ) );
      .срПР12 = ( ЗаПериодРасчета("ПР12")
                - ЗаПериодРасчета("ПР12", пСчНерПриб ) ) / 12;
   }
   .срПрем = .срПР + .срПР3 + .срПР6 + .срПР12;
   Вернуть .срПрем;
}

Функция СредБол2ПредМес( ДниЧасы, ДатаСобыт )
# Расчет среднедневного заработка при СДЕЛЬНОЙ форме оплаты труда
# за 2 месяца, предшествующих началу нетрудоспособности, в которых работал и была зарплата.
# Параметр:
#    ДниЧасы - определяет в чем вести расчет, в днях или часах, 
#              может принимать два значения "Дни" или "Часы".
#    ДатаСобыт - дата начала нетрудоспособности
# Определяет глобальные переменные, которые используются в справке по расчету:
#    Среднее    - среднедневной/часовой заработок
#    срМес1, срМес2  - дата 1,2 месяца
#    срКоэфОтр1, срКоэфОтр2 - Коэффициент отработанного времени для учета премий за 1,2 месяц
#    срКоэфОтрСтр1, срКоэфОтрСтр2  - то же но в виде строки расшифроки расчета
#    срПоДням - "1" - расчет по дням, "0" - расчет по часам
{
   Перем пИтОбщаяСумма = пИтСредПрем = пИтФакт = пКолТаб = 0;
   # Определяем в чем вести расчет (по дням или по часам)
   .срПоДням = ДниЧасы == "Дни";
   # Расчет среднемесячной премии за год
   Перем пСреднПрем = СредБолПремия( ДатаСобыт );
   Перем Попытка = 1, пОт, пДо;
   Пока( Попытка <= 2 и !пИтОбщаяСумма )
   {
      ВыборПо( Попытка )
      {
         # 2 прошлых месяца
         Выбор 1: пОт = 1;
                  пДо = 2;
         # текущий месяц
         Выбор 2: пОт = 0;
                  пДо = 0;
                  # Эти переменные только для справки
                  .срМес2  = 00.00.00;
                  .срКоэфОтр2 = 0;
                  .срКоэфОтрСтр2 = "";
      }
      # Инициализация переменных
      пИтОбщаяСумма = пИтСредПрем = пИтФакт = 0;
      Пока( пОт <= пДо )
      {
         Перем ДатНач, ДатКнц; # Что бы не портить внешние переменные
         ЗаМесяц( Дата( 1, Месяц( ДатаСобыт ) - пОт, Год( ДатаСобыт ) ) );
         Перем пСдвиг = пОт + Месяц('Дата начисления') - Месяц(ДатаСобыт)
                           + ( Год('Дата начисления') - Год(ДатаСобыт) ) * 12;
         # Этот расчет нужен потому что функция Среднее берет смещение
         # относительно 'Даты начисления'
         Среднее( пСдвиг, пСдвиг );
         Перем Н = пОт ? ( 3 - пОт ) : 1;
         Перем МесДатНач = Дата( 1, Месяц( ДатаСобыт ) - пОт, Год( ДатаСобыт ) );
         Перем пФакт = КоэфОтр = 0;
         Перем КоэфОтрСтр = "";
         ДляВсех( Табелей( МесДатНач ) ) # Если это табель по основной должности
         {  
            Если( Флаг( 'Расчеты>Расчет_.Признак', "Основная должность" ) )
            {
               Если( .срПоДням ) # Расчет по дням
               {
                  # Коэффициент отраб. времени для учета премий
                  КоэфОтр += ПланДни ? ФактДни / ПланДни : 0;
                  КоэфОтрСтр = ФактДни + "/" + ПланДни + ( !КоэфОтрСтр ? "" : "+" ) + КоэфОтрСтр;
                  пФакт += ФактДни;
               }
               Иначе
               {
                  КоэфОтр += ПланЧасы ? ФактЧасы / ПланЧасы : 0;
                  КоэфОтрСтр = ФактЧасы + "/" + ПланЧасы + ( !КоэфОтрСтр ? "" : "+" ) + КоэфОтрСтр;
                  пФакт += ФактЧасы;
               }
               пКолТаб++;
            }
         }
         [".срМес"  + Н] = МесДатНач;
         [".срКоэфОтр" + Н] = КоэфОтр;
         [".срКоэфОтрСтр" + Н] = КоэфОтрСтр;
         пИтСредПрем   += пСреднПрем * КоэфОтр;
         пИтФакт       += пФакт;
         пИтОбщаяСумма += ОбщаяСумма;
         пОт += 1;
      }
      Попытка++;
   }
   Если( !пКолТаб ) Сообщить("У " + ФИО(ФИО) + " (" + ТабНомер + ") нет табеля по основной должности за " + МесДатНач);
   # Если в указанные 2 месяца и текущий не имел заработка
   Если( пИтОбщаяСумма == 0 )
      Сообщить( "У " + ФИО(ФИО) + " нет заработка за 2 пред. месяца и за месяц нетрудоспособности!\n"
              + "В этом случае пособие нужно исчислять от оклада,\n"
              + "для этого укажите другой вид Н/У, как для повременки.");
   .Среднее = Деньги( пИтФакт ? ( пИтОбщаяСумма + пИтСредПрем ) / пИтФакт : 0 );
   Вернуть .Среднее;
}

Функция СредБолТекМес( ДниЧасы, ДатаСобыт )
# !!! Больше не используется, оставлена для совместимости
# Расчет среднедневного заработка при ПОВРЕМЕННОЙ форме оплаты труда
# исходя из заработка за фактически отработ. дни в месяце нетрудоспособности
# Этот расчет применяется также при сдельной форме оплаты труда
# если в 2 предшествующих месяцах рабочий не имел заработка
# Параметр:
#    ДниЧасы - определяет в чем вести расчет, в днях или часах, 
#              может принимать два значения "Дни" или "Часы".
#    ДатаСобыт - дата начала нетрудоспособности
# Определяет глобальные переменные, которые используются в справке по расчету:
#    Среднее    - среднедневной/часовой заработок
#    срМес1   - дата 1 месяц
#    срМес2   - дата 2 месяц, всегда 0
#    срКоэфОтр1 - Коэффициент отработанного времени для учета премий за 1 месяц
#    срКоэфОтр2 - всегда 0
#    срКоэфОтрСтр1 - то же но в виде строки расшифроки расчета
#    срКоэфОтрСтр2 - всегда 0
#    срПоДням - "1" - расчет по дням, "0" - расчет по часам
#    срПоТекОкл - "1" - среднее определено по текущему окладу (тарифу)
#                 "0" - среднее определено по фактически отработанному времени
#    срТекОклТар - Оклад (тариф) за текущий месяц
#    срТекПлан   - План дни (часы) за текущий месяц
{
   Перем пИтОбщаяСумма = пИтСредПрем = пИтФакт = 0;
   # Определяем в чем вести расчет (по дням или по часам)
   .срПоДням = ДниЧасы == "Дни";
   .срКоэфОтр1 = 0;
   .срКоэфОтрСтр1 = "";
   .срМес1 = ДатаСобыт;
   # Расчет среднемесячной премии за год
   Перем пСреднПрем = СредБолПремия( ДатаСобыт );
   Перем пСдвиг = Месяц('Дата начисления') - Месяц( ДатаСобыт )
                + ( Год('Дата начисления') - Год( ДатаСобыт ) ) * 12;
   # Этот расчет нужен потому что функция Среднее берет смещение
   # относительно 'Даты начисления'
   Среднее( пСдвиг, пСдвиг );
   Перем пФакт = пКолТаб = 0;
   # Оклад и план на текущий месяц, нужны будут только если расчет по текущему окладу
   .срТекОклТар = .срТекПлан = 0;
   ДляВсех( Табелей( ДатаСобыт ) ) # Если это табель по основной должности
   {  
      Если( Флаг( 'Расчеты>Расчет_.Признак', "Основная должность" ) )
      {
         Если( .срПоДням ) # Расчет по дням
         {
            # Коэффициент отраб. времени для учета премий
            .срКоэфОтр1 += ПланДни ? ФактДни / ПланДни : 0;
            .срКоэфОтрСтр1 = ФактДни + "/" + ПланДни + ( !.срКоэфОтрСтр1 ? "" : "+" ) + .срКоэфОтрСтр1;
            пФакт += ФактДни;
            .срТекПлан = ПланДни;
         }
         Иначе
         {
            .срКоэфОтр1 += ПланЧасы ? ФактЧасы / ПланЧасы : 0;
            .срКоэфОтрСтр1 = ФактЧасы + "/" + ПланЧасы + ( !.срКоэфОтрСтр1 ? "" : "+" ) + .срКоэфОтрСтр1;
            пФакт += ФактЧасы;
            .срТекПлан = ПланЧасы;
         }
         .срТекОклТар = ОкладТариф; # Текущий оклад(тариф) из табеля
         пКолТаб++;
      }
   }
   Если( !пКолТаб ) Сообщить("У " + ФИО(ФИО) + " (" + ТабНомер + ") нет табеля по основной должности за " + ДатаСобыт);
   Если( пФакт )
   {  # Среднее считаем по заработку за текущий месяц
      .срПоТекОкл   = 0;
      пИтФакт       = пФакт;
      пИтОбщаяСумма = ОбщаяСумма;
   }
   Иначе # Весь месяц болел
   {  # Среднее считаем по текущему окладу
      .срПоТекОкл = 1;
      .срКоэфОтр1 = 1; # премии берем полностью
      .срКоэфОтрСтр1 = "";
      пИтФакт       = .срТекПлан;
      пИтОбщаяСумма = .срПоДням ? .срТекОклТар : ( .срТекОклТар * .срТекПлан );
   }
   пИтСредПрем = пСреднПрем * .срКоэфОтр1;
   # Следующие переменные требуются для справки по среднему
   .срМес2  = 00.00.00;
   .срКоэфОтр2 = 0;
   .срКоэфОтрСтр2 = "";
   .Среднее = Деньги( пИтФакт ? ( пИтОбщаяСумма + пИтСредПрем ) / пИтФакт : 0 );
   Вернуть .Среднее;
}

Функция ПроцентБольничного()
# Определяет размер пособия в процентах от заработка в зависимости от
# непрерывного трудового стажа (п.30 Положения N13-6)
# Вызывается из больничного листа
{ 
   # Инвалидам ВОВ и другим, пособие выдается в размере 100 процентов
   Если ( Инвалид('Расчет_>ДатНач') == 1 ) Вернуть 100;
   Перем  Лет = 0;
   Разбить( НепрерывныйСтаж('Расчет_>ДатНач'), "-", Лет );
   Если      ( Лет < 5 ) Вернуть  60;
   Иначе Если( Лет < 8 ) Вернуть  80;
   Иначе                 Вернуть 100;
}

Функция РаспределениеБольничногоПоШПЗ( ДниЧасы, ... )
# РаспределениеБольничногоПоШПЗ( ДниЧасы [, ПропДниЧасы] )
# Разбивает сумму начисленного больничного по ШПЗ
# Используется при применении спец. налоговых режимов (ЕВН и УСН)
# Вызывается из больничного листа
# Допустимые значения параметра ДниЧасы: "Дни"  - часть ФСС рассчитывается от рабочих дней
#                                        "Часы" - часть ФСС рассчитывается от рабочих часов       
# Для больничных по травме в быту может указываться дополнительный параметр
# ПропДниЧасы - оплачиваемые дни или часы (так как первые 5 календарных дней не оплачиваются)
{
   перем ДатНач, ДатКнц, План;

   ПроверитьКонстанту( "ФСС_ЕВН",   "Оплата больничных за счет ФСС для ЕВН и УСН (1-да, 0-нет)", "0", "ОТЧЕТЫ.СОЦСТРАХ", "ПОДГОТОВКА ОТЧЕТНОСТИ.ВЕДОМОСТЬ ПО ФОНДУ СОЦИАЛЬНОГО СТРАХОВАНИЯ");
   # Больничный начисляется при ЕВН (УСН) и не оплачивается ФСС в полном объеме
   Если(Найти( "," + Константа( МесРасчета, "СЧ_ВМЕН" ) + ",", "," + ШПЗ + "," ) и
        !Число(Константа( МесРасчета, "ФСС_ЕВН" )) ) 
   {
      # ФСС оплачивает часть пособия, не превышающий за полный календарный месяц одного МРОТ (ст.2 закона 190-ФЗ)
      ЗаМесяц('Отпуск/Больн.ДатНач');
      пМРОТ = Число( Константа( 'Отпуск/Больн.ДатНач', "МРОТ" ));
      Если( ДниЧасы == "Дни" ) # расчет по дням
      {
         Перем пПропДни = Есть( Параметры.1 ) ? Параметры.1 : ПропДни;
         СуммаФСС = Деньги( пМРОТ * пПропДни / ПланДни(ДатНач, ДатКнц));
      }
      иначе # расчет по часам
      {
         Перем пПропЧасы = Есть( Параметры.1 ) ? Параметры.1 : ПропЧасы;
         СуммаФСС = Деньги( пМРОТ * пПропЧасы / ПланЧасы(ДатНач, ДатКнц));
      }
      МаксСумма = Мин( Сумма, СуммаФСС );
      Сохранить(РАСЧЕТ);
      Сумма -= МаксСумма;
      СохранитьНУ( МаксСумма, 69СОЦЕВН );
   }
}

Функция Резидент( Дата )
# Определяет является ли сотрудник резидентом (1-да, 0-нет)
# на указанную дату. Анализируется ДатаПрибытия
# ДатаПрибытия для резидентов должна быть пустая
{
   Если( !ДатаПрибытия ) Вернуть 1;
   Если( ДатаПрибытия + 180 <= КнцМес( Дата ) )
      Вернуть 1;
   Иначе
      Вернуть 0;
}

Функция СреднееДниЧасы( ДниЧасы, График, ДатаСобыт, РасчетПериод )
# Возвращает среднедневной(часовой) заработок
# Используется для всех случев оплаты по среднему, кроме больничных
# Параметры: 
#   ДниЧасы - определяет в чем вести расчет, в днях или часах, 
#             может принимать два значения "Дни" или "Часы" для суммированного учета.
#   График - (7 или 5) 7 - для отпусков, 5 - для гособязанностей и т.д.
#   ДатаСобыт - дата начала события (отпуска), относительно которой определяется расчетный период
#   РасчетПериод - количество месяцев расчетного периода 3, 12 или любое другое
# Определяет глобальные переменные, которые используются в отчете "Справка по среднему отпуска":
#   .Среднее        - среднедневной заработок
#   .ПР3,.ПР6,.ПР12 - суммы квартальной, полугодовой и годовой премий (в размере месячной части)
#   .ПРЕД - суммы премий за прошлые месяца за расчетный период
#   .мФакт - календарные дни для отпусков
#          - рабочие дни без среднего для гособязанностей и т.д.
#   .ПоДням - 1
#   .КолМес - количество месяцев, учтенных в расчетном периоде (нужно для определения доли премий)
#   .СреднееМесПрем - среднемесячная премия, для форм Т-60,61
#   .КоэфОтр - Коэффициент отработанного времени для учета премий
#   .КоэфОтрСтр - то же но в виде строки расшифроки расчета
#
{
   ПроверитьКонстанту( "МЕТКИ_СРЕДНЕЕ", "Метки табеля, исключаемые из расчета среднего для отпуска", "К+Г+Л+З+И+М", "УЧПОЛИТИКА", "УЧЕТНАЯ ПОЛИТИКА ОРГАНИЗАЦИИ");
   Перем пИсклМетки = МЕТКИ_СРЕДНЕЕ; # Время, которое может быть отмечено в табеле с ненулевыми часами, но исключаемое из расчета среднего
   # Определяем в чем вести расчет (по дням или по часам)
   .ПоДням = (ДниЧасы == "Дни");
   Если( График != 5 и График != 7 )
      Ошибка( "Не допустимое значение параметра График при вызове функции СреднееДниЧасы!" );
   Если( !ПоДням и График == 7 )
      Ошибка( "Недопустимое сочетание параметров ДниЧасы=Часы и График=7!" );

   # Определяется сумма годовой премии за прошлый год
   # К премиям за прошлый год относятся премии, начисленные за период
   # с декабря прошлого года по текущий месяц расчета включая,
   # за исключением декабря текущего года.
   Перем ДатНач = Дата(1, 12, Год( ДатаСобыт ) - 1);
   Перем ДатКнц = Мин( МесРасчета(), Дата( 30, 11, Год( ДатаСобыт ) ) );
   .ПР12 = ЗаПериодРасчета("ПР12") / 12;
   Перем ФактЗаПериод = СуммаЗаПериод = 0;
   Перем Попытка = 1, пОт, пДо;
   Пока( Попытка <= 3 и ( !ФактЗаПериод или !СуммаЗаПериод ) )
   {
      ВыборПо( Попытка )
      {
         # Расчетный период, предшествующий началу события (3 или 12 мес) п.3 положения
         Выбор 1: пОт = 1;
                  пДо = РасчетПериод;
         # Предшествующий период, равный расчетному п.5 положения
         Выбор 2: пОт = 1 + РасчетПериод;
                  пДо = РасчетПериод + РасчетПериод;
         # месяц начала события п.6 положения
         Выбор 3: пОт = 0;
                  пДо = 0;
      }
      # Инициализация переменных
      .ПР3 = .ПР6 = .КолМес = 0;
      .КоэфОтр = 0;
      .КоэфОтрСтр = "";
      Очистить(.мФакт);
      # Начало расчета за установленный период
      Пока( пОт <= пДо )
      {
         ЗаМесяц( Дата( 1, Месяц( ДатаСобыт ) - пОт, Год( ДатаСобыт ) ) );
         Если( Принят <= ДатКнц )
         {
            Перем Сдвиг = пОт + Месяц('Дата начисления') - Месяц(ДатаСобыт)
                              + ( Год('Дата начисления') - Год(ДатаСобыт) ) * 12;
            # Среднее берет смещение относительно 'Даты начисления'
            Среднее( Сдвиг, Сдвиг ); # Определяет переменную ОбщаяСумма
            # Премии за предыдущий месяц, учитываются все, но пропорционально отработанному времени
            .ПРЕД += ЗаПериодРасчета("ПРЕД");
            # Премии за периоды работы, превышающие один месяц, берутся не более одной.
            Если(!.ПР3) .ПР3 = ЗаПериодРасчета("ПР3") / 3;
            Если(!.ПР6) .ПР6 = ЗаПериодРасчета("ПР6") / 6;
            Перем пПланМес = пФактМес = 0;
            Перем пКолТабМес = 0;
            ДляВсех( Табелей( ДатНач ) )
            {  # Если это табель по основной должности
               Если( Флаг( 'Расчеты>Расчет_.Признак', "Основная должность" ) )
               {
                  Если( ПоДням )
                  {
                     Перем пФакт = ФактДни;
                     Перем пПлан = ПланДни;
                     Перем пДата = ДатНач;
                     Пока( пДата <= ДатКнц )
                     {  # Этот день отмечен в табеле часами с меткой, оплаченное по среднему
                        Если( ФактЧасы( пДата, пДата, пИсклМетки ) )
                           пФакт -= 1;
                        пДата += 1;
                     }
                  }
                  Иначе
                  {
                     Перем пФакт = ФактЧасы - ФактЧасы( ДатНач, ДатКнц, пИсклМетки ); # Отработанное время, оплаченное по среднему
                     Перем пПлан = ПланЧасы;
                  }
                  пФактМес += пФакт;
                  пПланМес = Макс( пПланМес, пПлан ); # Если несколько табелей, то берем максимальный план
                  # Коэффициент отраб. времени для учета премий
                  .КоэфОтр   += пПлан ? пФакт / пПлан : 0;
                  .КоэфОтрСтр = пФакт + "/" + пПлан + ( !КоэфОтрСтр ? " )" : " + " ) + .КоэфОтрСтр;
                  пКолТабМес++;
               }
            }
            Если( ОбщаяСумма и !пКолТабМес ) Сообщить("У " + ФИО(ФИО) + " (" + ТабНомер + ") нет табеля по основной должности за " + МесяцПрописью( ДатНач ) + " " + Год( ДатНач ) );
            Если( ОбщаяСумма или пКолТабМес )
              .КолМес++;
            Если( График == 7 и пФактМес != 0 ) # Для отпусков
            {  # Если месяц отработан полностью или переработан
               Если( пФактМес >= пПланМес и пПланМес != 0 )
                  пФактМес = 29.6;
               # Если месяц отработан не полностью
               Иначе
               {  # Определяем график работника в месяце расчета
                  Объект оДолжн = ТекДолжность( ДатКнц );
                  Если( Есть( оДолжн ) == 1 )
                  {
                     Перем пГрафик = Есть( 'оДолжн.ФРВ-Отпуск' ) ? Вверх('оДолжн.ФРВ-Отпуск.Название') : "";
                     Если( Найти( пГрафик, "ПЯТИДНЕВКА" ) или Найти( пГрафик, "(5)" ) )
                        пФактМес *= 7 / 5;  # 1.4
                     Иначе Если( Найти( пГрафик, "ШЕСТИДНЕВКА" ) или Найти( пГрафик, "(6)" ) )
                        пФактМес *= 7 / 6;
                     Иначе Ошибка( "У должности " + оДолжн.Название + " на " + ДатКнц + " график работы '" + пГрафик + "'"
                                 + "\n не содержит слов 'Пятидневка' или '(5)' или 'Шестидневка' или '(6)'."
                                 + "\nУкажите одно из них в названии графика или используйте расчет для суммированного учета." );
                  }
                  Иначе
                     Ошибка( "Не найдена основная должность на " + ДатКнц  + "."
                           + "\nУкажите ее в карточке сотрудника." );
               }
            }
            мФакт[ДатНач]  = пФактМес;
            ФактЗаПериод  += пФактМес;
            СуммаЗаПериод += ОбщаяСумма;
         }
         пОт += 1;
      }
      Попытка++;
   }
   .КоэфОтр        = .КолМес ? .КоэфОтр / .КолМес : 0;
   .КоэфОтрСтр     = .КоэфОтрСтр ? ( "( " + .КоэфОтрСтр + " / " + .КолМес ) : "";
   .СреднееМесПрем = (.ПР3 + .ПР6 + .ПР12) * .КоэфОтр;
   .СреднееМесПрем += .КолМес ? ( .ПРЕД * .КоэфОтр / .КолМес ) : 0;
   СуммаЗаПериод += .СреднееМесПрем * .КолМес;
   .Среднее = Деньги( ФактЗаПериод > 0 ? СуммаЗаПериод / ФактЗаПериод : 0 );
   Вернуть .Среднее;
}

Функция БолМесЗаработок( ДатаСобыт )
# Расчет месячного заработка при ПОВРЕМЕННОЙ форме оплаты труда,
# Параметр:
#    ДатаСобыт - дата начала нетрудоспособности
# Возвращает сумму месячного заработка, включая месячный оклад
# и сумма постоянных НУ, действующих на начало нетрудоспособности
# определяет глобальный массив:
#  мЕжемесНач
# └──Дата начала (начало больничного)
#    └──Нпп (номер начисления по порядку)
#       ├── Название (название вида начисления)
#       └── Сумма    (сумма начисления)
{
   # Расчет среднемесячной премии за год
   Деньги пСреднПрем = СредБолПремия( ДатаСобыт );
   Объект оДолж = ТекДолжность( ДатаСобыт );
   Если( Есть( оДолж ) != 1 )
      Ошибка("В карточке сотрудника не найдена основная должность на " + ДатаСобыт);
   Деньги пОклад = пМесЗар = 0;
   Объект мНач;
   Перем Нпп = 1;
   мНач[Нпп, "Название"] = 'оДолж.ВНУ-Расчет.Название';
   мНач[Нпп, "Сумма"]    = пОклад = оДолж.Сумма;
   пМесЗар += пОклад;
   Нпп++;
   # Ищем постоянные доплаты из карточки
   Деньги пПостНач = 0;
   ДляВсех( ПостоянныхСотр( ДатаСобыт, ДатаСобыт ) )
   {
      Если( 'ВНУ-Расчет.Тип' == "Начисление" )
      {
         Если( Сумма ) # Постоянные доплаты суммой
         {
            мНач[Нпп, "Название"] = 'ВНУ-Расчет.Название';
            мНач[Нпп, "Сумма"] = Сумма;
         }
         Иначе если( Процент ) # Доплата процентом (считаем, что процент от оклада)
         {
            мНач[Нпп, "Название"] += 'ВНУ-Расчет.Название' + " (" + Процент + "%)";
            мНач[Нпп, "Сумма"] = пОклад * Процент / 100;
         }
         пМесЗар += мНач[Нпп, "Сумма"];
         Нпп++;
      }
   }
   .мЕжемесНач[ДатаСобыт] = мНач;
   Вернуть пМесЗар;
}

Функция БолМесПланДни( Дата )
# Параметр:
#    Дата - месяц больничного
# Возвращает количество плановых дней за указанный месяц
# по графику больничного листа
{
   Перем пПланДни;
   Перем ДатНач, ДатКнц;
   ЗаМесяц( Дата );
   Если( Есть('ФРВ-Отпуск' ) != 1 ) Ошибка("Укажите график больничного!");
   пПланДни = ПланДни( ДатНач, ДатКнц );
   Если( !пПланДни ) Сообщить("Заполните график " +'ФРВ-Отпуск.Название' +" на " + МесяцПрописью( Дата ) + " " + Год( Дата ) );
   Вернуть пПланДни;
}

Функция БолРасчетЧастей( ДниЧасы, ДатНач, ДатКнц )
# Рассчитывает суммы больничного
# применяется для больничных по уходу за ребенком до 14 лет,
# а также по травме в быту. Вызывается как в расчете вида НУ,
# так и в справке по расчету среднего
# Параметр:
#    ДниЧасы - определяет в чем вести расчет, в днях или часах, 
#              может принимать два значения "Дни" или "Часы".
#    ДатНач, ДатКнц - начало и конец рассчитываемого больничного
# Определяет глобальные переменные:
#  ДатНач1(2), ДатКнц1(2) - начало и конец первого и второго оплачиваемого периода
#  ПропДни1(2) или ПропЧасы1(2) - оплачиваемые дни первого и второго периода
#  Сумма1(2) - сумма оплаты первого и второго периода
# Для работы функции используются внешние переменные:
#  Среднее - среднедневной(часовой) заработок
#  мПроцент1(2)['Дата начала'] - проценты оплаты первого и второго периодов
#  мПервДни1(2)['Дата начала'] - продолжительность в календарных днях периодов (от начала больничного)
# для второго периода может быть указано -1, значит не ограничен (травма в быту)
{
   Перем ПервДни1 = мПервДни1['Дата начала'];
   Перем ПервДни2 = мПервДни2['Дата начала'];
   Перем Процент1 = мПроцент1['Дата начала'];
   Перем Процент2 = мПроцент2['Дата начала'];
   # Первый период
   .ДатНач1 = Макс( ДатНач, 'Дата начала');
   .ДатКнц1 = Мин( ДатКнц, 'Дата начала' + ПервДни1 - 1 );
   # Второй период
   .ДатНач2 = Макс( ДатНач, 'Дата начала' + ПервДни1 );
   .ДатКнц2 = ( ПервДни2 !=-1 ) ? Мин( ДатКнц, 'Дата начала' + ПервДни2 - 1) : ДатКнц;
   Если( ДниЧасы == "Дни" )
   {
      .ПропДни1 = ПланДни( ДатНач1, ДатКнц1 );
      .Сумма1   = Мин( Среднее * Процент1 / 100, СреднееМаксДни( ДатНач ) ) * ПропДни1;
      .ПропДни2 = ПланДни( ДатНач2, ДатКнц2 );
      .Сумма2   = Мин( Среднее * Процент2 / 100, СреднееМаксДни( ДатНач ) ) * ПропДни2;
   }
   Иначе
   {
      .ПропЧасы1 = ПланЧасы( ДатНач1, ДатКнц1 );
      .Сумма1    = Мин( Среднее * Процент1 / 100, СреднееМаксЧасы( ДатНач ) ) * ПропЧасы1;
      .ПропЧасы2 = ПланЧасы( ДатНач2, ДатКнц2 );
      .Сумма2    = Мин( Среднее * Процент2 / 100, СреднееМаксЧасы( ДатНач ) ) * ПропЧасы2;
   }
}
