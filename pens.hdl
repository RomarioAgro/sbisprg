# Обработчики, обеспечивающие частичную проверку вводимых данных
# в карточку сотрудника

Функция 'Персонифицированный учет'(Событие, Поле)
# Проверяет правильность введения регистрационного номера ПФ
{
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         Выбор "Регистрационный номер":
            Сообщение = ПроверитьРегистрационныйНомер( 'Регистрационный номер' );
            Если( Сообщение != "" )
            {
               Сообщить( Сообщение );
               Вернуть "Регистрационный номер"
            }
            Вернуть "";
      }
   }
   Вернуть "";
}

Функция Сотрудник(Событие, Поле)
# Проверяет правильность заполнения реквизитов в карточке сотрудника
{
   Вернуть ПроверитьСотрудника(Событие, Поле);
}

Функция 'Сотрудник ПФ'(Событие, Поле)
# Проверяет правильность заполнения реквизитов в карточке сотрудника
{
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         Выбор "Регистрационный номер":
            Сообщение = ПроверитьРегистрационныйНомер( 'Регистрационный номер' );
            Если( Сообщение != "" )
            {
               Сообщить( Сообщение );
               Вернуть "Регистрационный номер"
            }
            Вернуть "";
      }
   }
   Вернуть ПроверитьСотрудника(Событие, Поле);
}

Функция 'Дополнительные данные'(Событие, Поле)
# Проверяет правильность заполнения реквизитов в карточке сотрудника
{
   Вернуть ПроверитьСотрудника(Событие, Поле);
}

Функция 'АДВ--2 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФИЗМ_ДАННЫЕ ) ) Вернуть 0;
      _ИзмДанные = ЧислоВСтрокуФлагов( ПФИЗМ_ДАННЫЕ, "ФИОПДМГчержл" );
      _ПФФИО_Старое = ПФФИО_СТАРОЕ;
   }
   Вернуть "";
}

Функция 'АДВ--3 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФИЗМ_ДАННЫЕ ) ) Вернуть 0;
      _ИзмДанные = ЧислоВСтрокуФлагов( ПФИЗМ_ДАННЫЕ, "ФИОПДМГчержл" );
      _ПФМР_Старое = ПФМР_Старое;
      Разбить( ПФМР_Старое, ",", @МРГород, @МРРайон, @МРОбласть, @МРСтрана );
   }
   Вернуть "";
}

Функция 'АДВ--8 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФСМЕРТЬ_ДАТА ) ) Вернуть 0;
      _Смерть_Дата = ПФСМЕРТЬ_ДАТА;
      _Смерть_Работа = ПФСМЕРТЬ_РАБОТА;
   }
   Вернуть "";
}

Функция 'АДВ--3 строка'( Событие, Поле )
{
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         выбор "@МРСтрана", "@МРРайон", "@МРОбласть", "@МРГород":
            ПФМР_Старое = @МРГород + "," + @МРРайон + "," + @МРОбласть + "," + @МРСтрана;
            Сохранить( '.' );
      }
   }
   Вернуть( "" );
}

Функция 'Список стажей'( Событие )
# Обработчик выборки списка стажей в ведомостях для ПФ
{
   Если( Событие == "Расчет" )
   {
      Разбить( Специальность, ";", _Стаж1П1, _Стаж1П2, _Стаж1П3, _Стаж1П4 );
      Если( _Стаж1П1 == "0" ) _Стаж1П1 = "";
      Если( _Стаж1П2 == "0" ) _Стаж1П2 = "";
      Если( _Стаж1П4 == "0" ) _Стаж1П4 = "";
      Разбить( Факультет,     ";", _Стаж2П1, _Стаж2П2, _Стаж2П3 );
      Если( _Стаж2П1 == "0" ) _Стаж2П1 = "";
      Если( _Стаж2П2 == "0" ) _Стаж2П2 = "";
   }
   Вернуть "";
}

Функция 'Запись стажа'( Событие, Поле )
{
   Перем пПоле = ПроверкаВводаСтажа( Событие, Поле );
   Если( пПоле ) Вернуть пПоле;
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         выбор "_Стаж1П1", "_Стаж1П2", "_Стаж1П3":
            Специальность = _Стаж1П1 + ";" + _Стаж1П2 + ";" + _Стаж1П3;
         выбор "_Стаж2П1", "_Стаж2П2", "_Стаж2П3":
            Факультет     = _Стаж2П1 + ";" + _Стаж2П2 + ";" + _Стаж2П3;
         выбор "@Условия":
            # _УслТруда, _ИсчТрудСтаж, _ВыслугаЛет, _ТеррУсл
            Разбить( @Условия.Код, ",", Стаж0, Стаж1, Стаж2, ОКПДТР );
            'N диплома' = @Условия.Примечание;
      }
   }
   Вернуть( "" );
}

Функция 'Запись предыдущего стажа'( Событие, Поле )
# Обработчик диалога записи о стаже в СЗВ-К
{
   Перем пПоле = ПроверкаВводаСтажа( Событие, Поле );
   Если( пПоле ) Вернуть пПоле;
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         выбор "_Стаж1П1", "_Стаж1П2", "_Стаж1П3", "_Стаж1П4":
            Специальность = _Стаж1П1 + ";" + _Стаж1П2 + ";" + _Стаж1П3 + ";" + _Стаж1П4;
         выбор "_Стаж2П1", "_Стаж2П2", "_Стаж2П3":
            Факультет     = _Стаж2П1 + ";" + _Стаж2П2 + ";" + _Стаж2П3;
         выбор "@Условия":
            Разбить( @Условия.Код, ",", Стаж0, Стаж1, Стаж2, ОКПДТР );
            'N диплома' = @Условия.Примечание;
         выбор "Учебное заведение":
            Организация = 'Учебное заведение>Наименование' ? 'Учебное заведение>Наименование' : 'Учебное заведение>Название';
      }
   }
   Если( Событие == "Сохранение" )
   {
      Перем Пересечение = 0;
      ДляВсех(Записей("Список предыдущих стажей", 'Образование-Список'))
         Если( Запись != '.' )
         {
            Перем ДНач, ДКнц;
            ДНач = Макс( 'Запись.Дата начала',    '.Дата начала');
            ДКнц = Мин(  'Запись.Дата окончания', '.Дата окончания');
            Если( ДНач <= ДКнц ) 
               Если( 'Запись.Дата начала'    != '.Дата начала' или 
                     'Запись.Дата окончания' != '.Дата окончания' или
                     'Запись.Организация' != '.Организация' )
                  Пересечение++;
         }
      Если( Пересечение )
         Сообщить( "Этот стаж пересекается с другими, это не допустимо!"
                 + "\nЧтобы ввести дополнительную запись о льготном стаже,"
                 + "\nукажите у нее в точности такой же период и организацию" );
   }
   Вернуть "";
}

Функция 'СЗВ--1 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФДОХОДЫ_ПЕРИОД ) ) Вернуть 0;
      _ПФДоходы_Период = ПФДОХОДЫ_ПЕРИОД;
      _ПФДоходыБол_Период = ПФДОХОДЫБОЛ_ПЕРИОД;
   }
   Вернуть( 0 );
}

Функция 'СЗВ--3 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФДОХОДЫ_ИТОГ ) ) Вернуть 0;
      _ПФДоходы_Итог = ПФДОХОДЫ_ИТОГ;
      _ПФВзносы_С_Итог = ПФВЗНОСЫ_С_ИТОГ;
      _ПФДоходы_Период = ПФДОХОДЫ_ПЕРИОД;
      _ПФДоходыБол_Период = ПФДОХОДЫБОЛ_ПЕРИОД;
   }
   Вернуть( 0 );
}

Функция 'СЗВ--К наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть(ПФКОД_ТЕР_УСЛОВИЙ) ) Вернуть 0;
      Разбить( ПФКОД_ТЕР_УСЛОВИЙ, " ", _Код_Тер_Условий );
      _РайонКоэф = ПФРАЙОНКОЭФ;
   }
   Вернуть "";
}

Функция 'СЗВ--1 строка'( Событие, Поле )
{
   # Полностью аналогично СЗВ-3
   Если( Событие == "Изменение" )
   {
      перем пНпп = 1;

      Если( Найти( Поле, "ПФДОХОДЫ_" ) )
      {
         ПФДОХОДЫ_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФДОХОДЫ_ПЕРИОД += [ "ПФДОХОДЫ_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
      }

      Если( Найти( Поле, "ПФДОХОДЫБОЛ_" ) )
      {
         ПФДОХОДЫБОЛ_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФДОХОДЫБОЛ_ПЕРИОД += [ "ПФДОХОДЫБОЛ_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
      }
   }
   Вернуть( "" );
}

Функция 'СЗВ--3 строка'( Событие, Поле )
{
   Если( Событие == "Изменение" )
   {
      перем пНпп = 1;

      Если( Найти( Поле, "ПФДОХОДЫ_" ) )
      {
         ПФДОХОДЫ_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФДОХОДЫ_ПЕРИОД += [ "ПФДОХОДЫ_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
      }

      Если( Найти( Поле, "ПФДОХОДЫБОЛ_" ) )
      {
         ПФДОХОДЫБОЛ_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФДОХОДЫБОЛ_ПЕРИОД += [ "ПФДОХОДЫБОЛ_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
      }
   }
   Вернуть( "" );
}           

Функция 'АДВ-10 строка'( Событие, Поле )
{
   Если( Событие == "Изменение" )
   {
      перем пНпп = 1;

      Если( Найти( Поле, "ПФДОХОДЫ_" ) )
      {
         ПФДОХОДЫ_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФДОХОДЫ_ПЕРИОД += [ "ПФДОХОДЫ_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
         Вернуть( "" );
      }

      Если( Найти( Поле, "ПФДОХОДЫБОЛ_" ) )
      {
         ПФДОХОДЫБОЛ_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФДОХОДЫБОЛ_ПЕРИОД += [ "ПФДОХОДЫБОЛ_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
         Вернуть( "" );
      }

      Если( Найти( Поле, "ПФВЗНОСЫ_С_" ) )
      {
         ПФВЗНОСЫ_С_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФВЗНОСЫ_С_ПЕРИОД += [ "ПФВЗНОСЫ_С_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
         Вернуть( "" );
      }

      Если( Найти( Поле, "ПФУПЛАЧЕНО_С_" ) )
      {
         ПФУПЛАЧЕНО_С_ПЕРИОД = 0;
         Пока( пНпп <= 12 )
         {
            перем тНпп = Текст( пНпп, "ТЕКСТ 2п" ); тНпп = Заменить( тНпп, " ", "0" );
            ПФУПЛАЧЕНО_С_ПЕРИОД += [ "ПФУПЛАЧЕНО_С_" + тНпп ];
            пНпп++;
         }
         Сохранить( '.' );
         Вернуть( "" );
      }
   }
   Вернуть( "" );
}           

Функция 'Список страховых взносов'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Разбить( Специальность, ";", _ЗадолжНачС, _ЗадолжНачН, _ЗадолжНачД );
      Разбить( 'N диплома', ";", _УплаченоС,  _УплаченоН,  _УплаченоД );

      _Год = Год( 'Дата начала' );
      _ЗадолжНачС = Окр( _ЗадолжНачС, 1 );
      _ЗадолжНачН = Окр( _ЗадолжНачН, 1 );
      _ЗадолжНачД = Окр( _ЗадолжНачД, 1 );

      _УплаченоС = Окр( _УплаченоС, 1 );
      _УплаченоН = Окр( _УплаченоН, 1 );
      _УплаченоД = Окр( _УплаченоД, 1 );

      _ЗадолжКнцС = _ЗадолжНачС - _УплаченоС;
      _ЗадолжКнцН = _ЗадолжНачН - _УплаченоН;
      _ЗадолжКнцД = _ЗадолжНачД - _УплаченоД;
   }
   Вернуть "";
}

Функция 'Запись о страховых взносах'( Событие, Поле )
{
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         выбор "_ЗадолжНачС", "_ЗадолжНачН", "_ЗадолжНачД":
            Специальность = _ЗадолжНачС + ";" + _ЗадолжНачН + ";" + _ЗадолжНачД;
         выбор "_УплаченоС", "_УплаченоН", "_УплаченоД":
            'N диплома' = _УплаченоС + ";" + _УплаченоН + ";" + _УплаченоД;
      }
   }
   Вернуть( "" );
}

Функция 'АДВ-11 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФУПЛАЧЕНО_С_ПЕРИОД ) ) Вернуть 0;
      
      _ПФТариф_Итог  = ПФТАРИФ_ИТОГ;
      _ПФКолПачекСЗВ = ПФКОЛПАЧЕКСЗВ;
      _ПФКолДокСЗВ   = ПФКОЛДОКСЗВ;

      ПФВЗНОСЫ_С_ПЕРИОД = Окр( ПФВЗНОСЫ_С_ПЕРИОД, 1 );
      ПФВЗНОСЫ_Н_ПЕРИОД = Окр( ПФВЗНОСЫ_Н_ПЕРИОД, 1 );
      ПФВЗНОСЫ_Д_ПЕРИОД = Окр( ПФВЗНОСЫ_Д_ПЕРИОД, 1 );
   
      ПФУПЛАЧЕНО_С_ПЕРИОД = Окр( ПФУПЛАЧЕНО_С_ПЕРИОД, 1 );
      ПФУПЛАЧЕНО_Н_ПЕРИОД = Окр( ПФУПЛАЧЕНО_Н_ПЕРИОД, 1 );
      ПФУПЛАЧЕНО_Д_ПЕРИОД = Окр( ПФУПЛАЧЕНО_Д_ПЕРИОД, 1 );

      _ЗадолжКнцС_Период = ПФВЗНОСЫ_С_ПЕРИОД - ПФУПЛАЧЕНО_С_ПЕРИОД;
      _ЗадолжКнцН_Период = ПФВЗНОСЫ_Н_ПЕРИОД - ПФУПЛАЧЕНО_Н_ПЕРИОД;
      _ЗадолжКнцД_Период = ПФВЗНОСЫ_Д_ПЕРИОД - ПФУПЛАЧЕНО_Д_ПЕРИОД;
   
      _ЗадолжНачС_Итог = _ЗадолжНачН_Итог = _ЗадолжНачД_Итог =
      _УплаченоС_Итог  = _УплаченоН_Итог  = _УплаченоД_Итог  = 0;
      Если( Есть( '.' ) == 1 ) 
         ДляВсех( Записей( "Список страховых взносов", '.' ) )
         {
            _ЗадолжНачС_Итог += _ЗадолжНачС;
            _ЗадолжНачН_Итог += _ЗадолжНачН;
            _ЗадолжНачД_Итог += _ЗадолжНачД;
      
            _УплаченоС_Итог += _УплаченоС;
            _УплаченоН_Итог += _УплаченоН;
            _УплаченоД_Итог += _УплаченоД;
         }
   
      _ВзносыС_Итог = ПФВЗНОСЫ_С_ПЕРИОД;
      _ВзносыН_Итог = ПФВЗНОСЫ_Н_ПЕРИОД;
      _ВзносыД_Итог = ПФВЗНОСЫ_Д_ПЕРИОД;
   
      _УплаченоС_Итог += ПФУПЛАЧЕНО_С_ПЕРИОД;
      _УплаченоН_Итог += ПФУПЛАЧЕНО_Н_ПЕРИОД;
      _УплаченоД_Итог += ПФУПЛАЧЕНО_Д_ПЕРИОД;
   
      _ЗадолжКнцС_Итог = _ЗадолжНачС_Итог + _ВзносыС_Итог - _УплаченоС_Итог;
      _ЗадолжКнцН_Итог = _ЗадолжНачН_Итог + _ВзносыН_Итог - _УплаченоН_Итог;
      _ЗадолжКнцД_Итог = _ЗадолжНачД_Итог + _ВзносыД_Итог - _УплаченоД_Итог;
   }
   Вернуть "";
}

Функция 'АДВ-10 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФКОД_КАТЕГОРИИОСН ) ) Вернуть 0;
      Разбить( ПФКОД_КАТЕГОРИИОСН, " ", _ПФКод_КатегорииОсн );
      Разбить( ПФКОД_КАТЕГОРИИДОП, " ", _ПФКод_КатегорииДоп );
      _ПФКолПачекСЗВ = ПФКОЛПАЧЕКСЗВ;
      _ПФКолДокСЗВ = ПФКОЛДОКСЗВ;
      _ПФТариф_Итог = ПФТАРИФ_ИТОГ;
      _ПФДоходы_Период = ПФДОХОДЫ_ПЕРИОД
      _ПФДоходыБол_Период = ПФДОХОДЫБОЛ_ПЕРИОД;
      _ПФВзносы_С_Период = ПФВЗНОСЫ_С_ПЕРИОД;
      _ПФУплачено_С_Период = ПФУПЛАЧЕНО_С_ПЕРИОД;
      _ПФЗадолжКнц_С = ПФЗАДОЛЖКНЦ_С;
   }
   Вернуть( 0 );
}

Функция 'ПФ оплата'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Перем пКодДоп = "";
      Разбить( ПФКОД_КАТЕГОРИИОСН,  " ", _ПФКод_Категории );
      Разбить( ПФКОД_КАТЕГОРИИДОП,  " ", пКодДоп );
      _ПФКод_Категории += пКодДоп;
      Разбить( ПФКОД_ДОП_ТАРИФА,    " ", _ПФКод_Доп_Тарифа );
      Разбить( ПФКОД_ТЕР_УСЛОВИЙ,   " ", _ПФКод_Тер_Условий );
      Разбить( ПФТИП_СВЕДЕНИЙ,      " ", _ПФТип_Сведений );
      Разбить( ПФВИД_КОРРЕКТИРОВКИ, " ", _ПФВид_Корректировки );
   }
   Вернуть( 0 );
}

Функция 'СЗВ--4-1 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть( ПФДОХОДЫ_ИТОГ ) ) Вернуть 0;
      _ПФДоходы_Итог    = ПФДОХОДЫ_ИТОГ;
      _ПФДоходыБол_Итог = ПФДОХОДЫБОЛ_ИТОГ;
      _ПФВзносы_С_Итог  = ПФВЗНОСЫ_С_ИТОГ;
      _ПФВзносы_Н_Итог  = ПФВЗНОСЫ_Н_ИТОГ;
      _ПФВзносы_Д_Итог  = ПФВЗНОСЫ_Д_ИТОГ;
   }
   Вернуть( 0 );
}

Функция 'СЗВ--4-2 наименования'( Событие )
{
   Если( Событие == "Расчет" )
   {
      Если( !Есть(ПФВЗНОСЫ_С_ИТОГ) ) Вернуть 0;
      _ПФВзносы_С_Итог  = ПФВЗНОСЫ_С_ИТОГ;
      _ПФВзносы_Н_Итог  = ПФВЗНОСЫ_Н_ИТОГ;
      _ПФВзносы_Д_Итог  = ПФВЗНОСЫ_Д_ИТОГ;
   }
   Вернуть( 0 );
}

Функция 'Расшифровка ошибок записи'( Событие, Поле )
{
   Если( Событие == "Инициализация" )
   {
      Установить( 'Ведомость-Список>Документ_' );
      объект мРасчетПФ = РасчетПФ( "ТИПД" );

      объект мПроверкаПФ = ПроверкаПФ( РасчетПФ( мРасчетПФ.тТипДокумента ) );

      перем пОшибок = Есть( мПроверкаПФ.Ошибка ) ? Размер( мПроверкаПФ.Ошибка ) : 0;
      перем пПредупреждений = Есть( мПроверкаПФ.Предупреждение ) ? Размер( мПроверкаПФ.Предупреждение ) : 0;
      .Примечание = ( пОшибок ? "Ошибок " + пОшибок + " " : "" ) +
                   ( пПредупреждений ? "Предупреждений " + пПредупреждений : "" );
      Сохранить( '.' );

      СтрокаОшибокПФ( мПроверкаПФ );
   }
   Вернуть( "" );
}

Функция 'Расшифровка ошибок пачки'( Событие, Поле )
{
   Если( Событие == "Инициализация" )
   {
      объект мПроверкаПФ = ПроверкаПФ( РасчетПФ( "ЗГЛВ" ) );
      мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "РБТД" ) ) );
      мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "ПАЧК" ) ) );
      мПроверкаПФ = СложитьМассивы( мПроверкаПФ, ПроверкаПФ( РасчетПФ( "ТИПД" ) ) );

      перем пОшибок = Есть( мПроверкаПФ.Ошибка ) ? Размер( мПроверкаПФ.Ошибка ) : 0;
      перем пПредупреждений = Есть( мПроверкаПФ.Предупреждение ) ? Размер( мПроверкаПФ.Предупреждение ) : 0;
      .Примечание = ( пОшибок ? "Ошибок " + пОшибок + " " : "" ) +
                   ( пПредупреждений ? "Предупреждений " + пПредупреждений : "" );
      Сохранить( '.' );

      СтрокаОшибокПФ( мПроверкаПФ );
   }
   Вернуть( "" );
}

Функция 'Условия труда'( Событие )
{
   Если( Событие == "Расчет" )
      Разбить( Код, ",", _УслТруда, _ИсчТрудСтаж, _ВыслугаЛет, _ТеррУсл );
   Вернуть 0;
}

# обработчик диалога 'Условия труда'
Функция 'Условия труда'( Событие, Поле )
{
   Если( Событие == "Изменение" )
      ВыборПо( Поле )
      {
         выбор "_УслТруда", "_ИсчТрудСтаж", "_ВыслугаЛет", "_ТеррУсл":
            Код = _УслТруда + "," + _ИсчТрудСтаж + "," + _ВыслугаЛет + "," + _ТеррУсл;
      }
   Вернуть "";
}

Функция 'ПредРабот'( Событие )
# Обработчик выборки для Трудовой деятельности в карточке сотрудника
{
   Если( Событие == "Расчет" )
   {
      Разбить( Профессия, ";", _Стаж1П1, _Стаж1П2, _Стаж1П3, _Стаж1П4 );
      Разбить( Факультет, ";", _Стаж2П1, _Стаж2П2, _Стаж2П3, _РайонК  );
   }
   Вернуть "";
}

Функция 'Трудовая деятельность(запись)'( Событие, Поле )
# Обработчик диалога записи о предыдущем стаже 
{
   Перем пПоле = ПроверкаВводаСтажа( Событие, Поле );
   Если( пПоле ) Вернуть пПоле;
   Если( Событие == "Изменение" )
   {
      ВыборПо( Поле )
      {
         выбор "_Стаж1П1", "_Стаж1П2", "_Стаж1П3", "_Стаж1П4":
            Профессия     = _Стаж1П1 + ";" + _Стаж1П2 + ";" + _Стаж1П3 + ";" + _Стаж1П4;
         выбор "_Стаж2П1", "_Стаж2П2", "_Стаж2П3", "_РайонК":
            Факультет     = _Стаж2П1 + ";" + _Стаж2П2 + ";" + _Стаж2П3 + ";" + _РайонК;
         выбор "@Условия":
            Разбить( @Условия.Код, ",", Стаж0, Стаж1, Стаж2, Комментарий );
            'N диплома' = @Условия.Примечание;
         выбор "Учебное заведение":
            Организация = 'Учебное заведение>Наименование' ? 'Учебное заведение>Наименование' : 'Учебное заведение>Название';
      }
   }
   Если( Событие == "Сохранение" )
   {
      Перем Пересечение = 0;
      ДляВсех(Записей("ПредРабот", 'Образования'))
         Если( Запись != '.' )
         {
            Перем ДНач, ДКнц;
            ДНач = Макс( 'Запись.Дата начала',    '.Дата начала');
            ДКнц = Мин(  'Запись.Дата окончания', '.Дата окончания');
            Если( ДНач <= ДКнц ) 
               Если( 'Запись.Дата начала'    != '.Дата начала' или 
                     'Запись.Дата окончания' != '.Дата окончания' или
                     'Запись.Организация' != '.Организация' )
                  Пересечение++;
         }
      Если( Пересечение )
         Сообщить( "Этот стаж пересекается с другими, это не допустимо!"
                 + "\nЧтобы ввести дополнительную запись о льготном стаже,"
                 + "\nукажите у нее в точности такой же период и организацию" );
   }
   Вернуть "";
}

# Обработчик выборки списка стажей в ведомостях для ПФ
функция 'Список предыдущих стажей'(Событие)
{
   ВыборПо(Событие)
   {
      выбор "Инициализация":
         'Дата начала' = 'Дата окончания' = 00.00.00;
         Вернуть 0;
      выбор "Расчет":
         Разбить( Специальность, ";", _Стаж1П1, _Стаж1П2, _Стаж1П3, _Стаж1П4 );
         Если( _Стаж1П1 == "0" ) _Стаж1П1 = "";
         Если( _Стаж1П2 == "0" ) _Стаж1П2 = "";
         Если( _Стаж1П4 == "0" ) _Стаж1П4 = "";
         Разбить( Факультет,     ";", _Стаж2П1, _Стаж2П2, _Стаж2П3 );
         Если( _Стаж2П1 == "0" ) _Стаж2П1 = "";
         Если( _Стаж2П2 == "0" ) _Стаж2П2 = "";
         Вернуть 0;
      выбор "Создание":
         Вернуть 0;
      выбор "Замена":
         Вернуть 0;
      выбор "Удаление":
         Вернуть 0;
   }
   Вернуть 0;
}
