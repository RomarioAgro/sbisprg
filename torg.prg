# Функции, используемые для учета торговли

Функция ПроверитьСостояние()
# Проверяет флаги состояния документа: НДС, НСП, Включая НДС, Включая НСП
# при необходимости приводит их в непротиворечивое состояние
# Определяет глобальные переменные:
# ЕстьНДС  0 - нет НДС, 1 - НДС включая, (-1) - НДС сверху
# ЕстьНСП  0 - нет НСП, 1 - НСП включая, (-1) - НСП сверху
{
   Перем ВключаяНДС, ВключаяНСП;
   # Приобретение через подотчетных лиц по товарному чеку
   Если( Есть( 'Тип документа' ) )
   {
      Если( 'Тип документа' != "НаклРасх" )
         Если( Лицо1.Название == "Наличный расчет")
            Состояние = "-НДС-НСП";
   }
   # Применяется УСН
   Если( Найти(Константа(Дата, "ВИД_НАЛОГ"), "Упрощенка") )
      Состояние = "-НДС-НСП";
   Если( ОсвобождНДС() )
      Состояние = "-НДС";
   .ЕстьНДС = Флаг(Состояние, "НДС");
   .ЕстьНСП = Флаг(Состояние, "НСП");
   Если( !.ЕстьНДС )
      Состояние = "-Включая НДС";
   Если( !.ЕстьНСП )
      Состояние = "-Включая НСП";
   ВключаяНДС = Флаг( Состояние, "Включая НДС" );
   Если( ЕстьНДС и !ВключаяНДС )
      Состояние = "-Включая НСП";  # НСП в цене, НДС сверху - невозможно
   ВключаяНСП = Флаг(Состояние, "Включая НСП");
   Если(.ЕстьНДС)
      .ЕстьНДС = ВключаяНДС ? 1 : -1;
   Если(.ЕстьНСП)
      .ЕстьНСП = ВключаяНСП ? 1 : -1;
}

Функция РасчетПараметров( База, ЕстьНДС, СтавкаНДС, ЕстьНСП, СтавкаНСП )
# Определяет глобальные переменные для наименования накладной, фактуры или счета
# СумНДС - сумма НДС
# СумНСП - сумма НДС
# Всего  - сумма со всеми налогами
# И на основании их рассчитывает параметры документа:
# СУММА20, СУММА10, СУММА0, СУММАОСВ, НДС20, НДС10, НСП5
# Сумма2 - Сумма документа со всеми налогами (К Оплате)
# Параметры:
# База      - сумма, от которой рассчитываются налоги
# ЕстьНДС   - 0 - нет НДС, 1 - НДС включая, (-1) - НДС сверху
# СтавкаНДС - ставка НДС
# ЕстьНСП   - 0 - нет НСП, 1 - НСП включая, (-1) - НСП сверху
# СтавкаНСП - ставка НСП
{ 
   Перем пЕстьНДС, пЕстьНСП;
   # Если НДС или НСП нет, то устанавливаем любое отличное от 0 значение
   пЕстьНДС = ЕстьНДС ? ЕстьНДС :  1;
   пЕстьНСП = ЕстьНСП ? ЕстьНСП : -1;
   Перем пЭтоНСП = 0;
   Если( Есть(Товар.Название) )
      Если( ВВЕРХ(Товар.Название) == "НАЛОГ С ПРОДАЖ" )
         пЭтоНСП = 1;
   Если( пЭтоНСП )
   {
      .Всего  = .СумНСП = База;
      .СумНДС = 0;
   }
   Иначе Если( пЕстьНДС == -1 и пЕстьНСП == -1 )
   { 
      .СумНДС = НалогСвх( База, СтавкаНДС);
      .СумНСП = НалогСвх( База + СумНДС, СтавкаНСП);
      .Всего  = База + СумНДС + СумНСП; 
   }
   Иначе Если( пЕстьНДС == 1 и пЕстьНСП == -1 )
   { 
      .СумНДС = НалогВкл( База, СтавкаНДС);
      .СумНСП = НалогСвх( База, СтавкаНСП);
      .Всего  = База + СумНСП; 
   }
   Иначе Если( пЕстьНДС == 1 и пЕстьНСП == 1 )
   { 
      .СумНСП = НалогВкл( База, СтавкаНСП);
      .СумНДС = НалогВкл( База - СумНСП, СтавкаНДС);
      .Всего  = База;
   }
   Иначе Ошибка("Указание цены без НДС, но с НСП невозможно!");
   # Расчет параметров документа
   Если( Всего - СумНДС - СумНСП )
      .["СУММА" + (ЕстьНДС ? СтавкаНДС : "ОСВ")] += Всего - СумНДС - СумНСП;
   перем пСтавкаНДС = СтавкаНДС == 18 ? 20 : СтавкаНДС;
   .["НДС" + пСтавкаНДС] += СумНДС;
   Если(СумНСП)
      .НСП5 += СумНСП;
   .Сумма2 += Всего;
}

Функция РегистрацияВЖурнал( НомерЖурнала, ... )
# Вызывается внутри цикла для всех оснований
# РегистрацияВЖурнал( НомерЖурнала[, СвязьЛицо ])
# Параметры:
# НомерЖурнала - Номер журнала, в который нужно заносить связь (1,2,Нет).
#                Если связь не нужно заносить в журнал, то указывается - Нет.
# СвязьЛицо    - Лицо, которое будет указано в журнале.
#                Если не указано, то берется лицо (контрагент) из документа основания.
# Если тип связи Оплата или Регистрация, но не по счету,
#    то связь заносится в журнал и ставится флаг "Регистрация"
#    дата связи устанавливается максимальной из дат основания и следствия
#    для платежки берется дата выписки
#    для фактуры берется дата получения
# Возвращает 1, если установлен флаг "Регистрация", иначе 0
{
   Перем ДатаД;
   # Сторнировочную фактуру нужно оформлять на основании другой с флагом Оплата, Сторно
   Если( ( Флаг( Флаги, "Оплата" ) или Флаг( Флаги, "Регистрация" ) ) и !Флаг( Флаги, "Сторно" )
         и 'Тип документа' != "СчетВход" и 'Тип документа' != "СчетИсхд" )
   { 
      ДатаОсн = Связь.Документ.Дата;
      # Если в основании указана платежка то берем дату ее выписки (если она есть)
      Если( Подстрока( 'Связь.Документ.Тип документа' ,1 ,4 ) == "Плат" )
         ДляВсех( Следствий("Выписка") )
            ДатаОсн = Связь.Дата;
      # Если в основании указана фактура то берем дату ее получения
      Если( 'Связь.Документ.Тип документа' == "СчетФактуры" )
         Если( Связь.Документ.Получение ) # Если заполнена дата получения
            ДатаОсн = Связь.Документ.Получение;
      # Если проводится платежка, то берем дату ее выписки
      ДатаД = Есть( ВЫПИСКА ) ? ВЫПИСКА.Дата : .Дата;
      # Если проводится фактура, то берем дату ее получения
      Если( '.Тип документа' == "СчетФактуры" ) ДатаД = .Получение;
      Связь.Дата = Макс( ДатаОсн, ДатаД );
      Флаги      = "+Регистрация";
      Сохранить(Связь);
      Если( !'Связи>Комментарий' и Число(НомерЖурнала) ) # Если еще не в журнале, но надо
      {
         Перем СвязьЛицо = Есть(Параметры[1]) ? (Параметры[1]) : Связь.Документ.Контрагент();
         ВЖурнал( Связь.Дата, НомерЖурнала, Связь.Сумма, СвязьЛицо );
      }
      Вернуть 1;
   }
   Иначе Если( Флаг( Флаги, "Регистрация" ) )
      Вернуть 1;
   Иначе
      Вернуть 0;
}

Функция ПроверитьСвязь()
# Вызывается из документов оплаты внутри цикла по основаниям
# Проверяет, закрыт ли документ основание
# Если не закрыт, то выдается сообщение об ошибке
# с указанием номеров связанных документов
{
   Объект Осн, Слд;
   Осн = Связь.Связка1;
   Слд = Связь.Связка2;
   Если( !Флаг(Осн.Состояние,"Закрыт") )
   {
      Если('Связь.N п/п' != 65534) # Ручная связь
         Ошибка( "Нельзя указывать в основании не закрытые документы:\nзакройте "
                 + СтрокаДок(Осн) + ", в основании " + СтрокаДок(Слд) );
      Иначе                        # Связь созданная функцией СвязатьОплату
         Ошибка( "По сделке имеется не закрытый документ\nзакройте "
                 + СтрокаДок(Осн) + ", связанный с " + СтрокаДок(Слд) );
   }
}

Функция ПроверитьСледствия()
# Используется только при использовании функции СвязатьОплату() (оплата по счетам)
# Необходима для корректной работы функции СвязатьОплату(),
# когда документы вводятся или изменяется их дата задним числом.
# Проверяется наличие программных связей, созданных функцией СвязатьОплату(),
# с более ранними следствиями.
# Если таковые обнаруживаются, то выдается сообщение об ошибке и предложение
# перепровести документ следствие
{
   Перем ДатаОсн, ДатаСлд, Рекомендация;
   Объект Осн, Слд;
   Если( ЗакрытиеДокумента() )
   ДляВсех( Записей( "Связи1", Документ ) )
   # Программная связь, созданная функцией СвязатьОплату(), ссылающаяся на документ
   Если( Флаг( Флаги, "Регистрация" ) и 'Связь.N п/п' == 65534 и Связь.Связка2.Дата)
   { 
      Осн = Связь.Связка1;
      Слд = Связь.Связка2;
      ДатаОсн = Осн.Дата;
      Если( Найти( 'Осн.Тип документа', "Плат" ) == 1)
         ДляВсех( Осн.Следствий("Выписка") )
            ДатаОсн = Связь.Дата; # Дата выписки (если она есть)
      Если('Осн.Тип документа' == "СчетФактуры")
         ДатаОсн = Осн.Получение;
      ДатаСлд = Слд.Дата;
      Если( Найти( 'Слд.Тип документа', "Плат" ) == 1)
         ДляВсех( Слд.Следствий("Выписка") )
            ДатаСлд = Связь.Дата; # Дата выписки (если она есть)
      Если('Слд.Тип документа' == "СчетФактуры")
         ДатаСлд = Слд.Получение;
      Если( ДатаОсн > ДатаСлд )
         Ошибка( "На проводящийся документ ссылаются более ранние документы:\n"
                 + СтрокаДок(Слд) + " ссылается на " + СтрокаДок(Осн) + "\n"
                 + "Перепроведите документ следствие" );
   }
}

Функция СчетНДС( ... )
# Возвращает полный номер субсчета 19 счета
# СчетНДС([СчетТМЦ])
# СчетТМЦ - счет учета ТМЦ для которого требуется определить счет НДС
#           если не указан, то используется параметр СЧ_СКЛАДА (РАЗДЕЛ для 2001 года)текущего наименования
{
   Перем Счет;
   Если( Дата >= ДАТА_НОВ_ПЛАН ) # Новый план счетов
   {
      Счет = Есть(Параметры[1]) ? (Параметры[1]) : Наим.СЧ_СКЛАДА;
      ВыборПо( Подстрока( Счет, 1, 2 ) )
      { 
         Выбор "41":    Вернуть "19_ОПТ_" + Н1;
         Выбор "10":    Вернуть "19_МАТ_" + Н1;
         Выбор "26":    Вернуть "19_ОБЩ";
         Выбор "97":    Вернуть "19_УСЛ_" + Н1;
         Иначе          Вернуть "19_УСЛ_" + Н1;
      }              
   }
   Иначе                      # Старый план счетов
   {
      Счет = Есть(Параметры[1]) ? (Параметры[1]) : Наим.РАЗДЕЛ;
      ВыборПо( Подстрока( Счет, 1, 2 ) )
      { 
         Выбор "41":    Вернуть "19_ОПТ_" + Н1;
         Выбор "12":    Вернуть "19_МБП_" + Н1;
         Выбор "10":    Вернуть "19_МАТ_" + Н1;
         Выбор "31":    Вернуть "19_УСЛ";
         Иначе          Вернуть "19_УСЛ";
      }
   }
}

Функция ЗачетНДС( Документ, Копл, ДатаП )
# Формирует проводки по зачету НДС по указанному документу
# Документ - документ, по которому зачитывается НДС
# Копл     - коэффициент оплаты (зачета НДС)
#            если Копл < 0 то формирует обратные проводки
#            (сторно возмещения НДС при возврате)
# ДатаП    - дата для формирования проводок
# Использует константу 68НДС - номер счета НДС
# Просматривает проводки документа и ищет среди них проводки в 
# дебет 19 счета. Из каждой найденой проводки, берется номер субсчета 19 счета,
# ее аналитики и формируется проводка в кредит найденного 19 счета с найденными аналитиками.
{
   Перем пСчетНДС;
   Если( Копл и !ОсвобождНДС(Документ.Дата) )
      ДляВсех( Записей( "Проводки по документу", Документ ) )
         Если( Подстрока( 'Дебет>Номер счета', 1, 2 ) == "19" )
         {
            пСчетНДС = 'Дебет>Номер счета';
            Если( Запись.Дата < ДАТА_НОВ_ПЛАН ) # Оплачивается пршлогодний документ
            {
               ВыборПо( пСчетНДС )
               {
                  Выбор "19-МБП-10" : пСчетНДС = "19-МАТ-10";
                  Выбор "19-МБП-20" : пСчетНДС = "19-МАТ-20";
               }
            }
            Если( Копл > 0 )
               Проводка( ДатаП, 68НДС, Сумма * Копл,
                                пСчетНДС, 'Лица-Дебет', '2Лица-Дебет', '3Лица-Дебет' );
            Иначе
               Проводка( ДатаП, пСчетНДС, 'Лица-Дебет', '2Лица-Дебет', '3Лица-Дебет', Сумма * -Копл,
                                68НДС );
         }
}

Функция ЗачетПродажи( Документ, Копл, ДатаП )
# Формирует проводки по оплате (балансовые и забалансовые)
# на основании проводок оплачиваемого документа (расходной накладной)
# Формируем проводки по упрощенному плану счетов 
# Документ - документ, оплачиваемая расходная накладная
# Копл  - коэффициент оплаты по указанному документу
# ДатаП - дата для формирования проводок
{
   Перем Дт, Кт, 1Дт, 1Кт, пСумма, п1СчПродаж, пСчРеал, пСчРеал2, пВидДеят, пВидНалог;
   Если( Копл )
   Если( Найти( Константа( Документ.Дата, "ВИД_НАЛОГ" ), "Упрощенка" ) ) # формируем проводки по упрощенному плану счетов
   {
   }
   иначе # балансовые и забалансовые проводки по обычному плану счетов
   {
      ДляВсех( Записей( "Проводки по документу", Документ ) )
      {
         Дт = 'Дебет>Номер счета';  1Дт = "1" + Дт;
         Кт = 'Кредит>Номер счета'; 1Кт = "1" + Кт;
         пСумма = Сумма * Копл;
         Если( Дт и Кт и Дт != "0" и Кт != "0" ) # Если это не сторнировочная проводка по нач. остаткам
         {
               Если( Найти( ",90-1,91-1,", ("," + Кт + ",") ) )                   # Д62     К90-1
                  Проводка( ДатаП, Д162, 'Лица-Дебет',  пСумма,                   # Д162    К190-1
                                   1Кт,  'Лица-Кредит', '2Лица-Кредит'); 
               Иначе Если( Кт == "76-НДС" )                                       # Д90-3   К76-НДС
               {                                                      
                  Проводка( ДатаП, Кт,  'Лица-Кредит', пСумма, К68_НДС);          # Д76-НДС К68
                  Проводка( ДатаП, 1Дт, 'Лица-Дебет', '2Лица-Дебет', пСумма,
                                   К168_НДС, 'Лица-Кредит' );                     # Д190-3  К168-НДС
               }
               Иначе Если( Кт == "76-НСП" )                                       # Д90-5   К76-НСП
               {
                  Проводка( ДатаП, Кт,  'Лица-Кредит', пСумма, К68_НСП);          # Д76-НСП К68
                  Если( Дт != "76-КОМИТ" )
                     Проводка( ДатаП, 1Дт, 'Лица-Дебет', '2Лица-Дебет', пСумма,
                                   К168_НСП, 'Лица-Кредит' );                     # Д190-5  К168-НСП
               }
               Иначе Если( Найти(",90-2,91-2,", ("," + Дт + ",") ) )              # Д90-2   К41
                  Проводка( ДатаП, 1Дт, 'Лица-Дебет', '2Лица-Дебет', пСумма,
                                 Подстрока( 1Кт, 1, 3 ) );                      # Д190-2  К141
         }
      }
   }
}

Функция ВидСтавокНалогов( ЕстьНДС, СтавкаНДС, СтавкаНСП )
# Возвращает аналитику вида ставок налогов для наименования документа
# Виды ставок перечислены в разделе "ВИДЫ СТАВОК НАЛОГОВ" справочника аналитик
# Параметры:
# ЕстьНДС   - 0 - освобожден от НДС, иначе не освобожден
# СтавкаНДС - ставка НДС
# СтавкаНСП - ставка НСП
{
   Перем пЭтоНСП = 0;
   Перем пСтавкаНДС = СтавкаНДС == 18 ? 20 : СтавкаНДС;
   Если( Есть(Товар.Название) )
      Если( ВВЕРХ(Товар.Название) == "НАЛОГ С ПРОДАЖ" )
         пЭтоНСП = 1;
   Если( пЭтоНСП )
      Вернуть Лицо( "НСП", "Аналитики" );
   Иначе
      Вернуть Лицо( ( ЕстьНДС ? пСтавкаНДС : "ОСВ" ) + Текст( СтавкаНСП, "ЧИСЛО *" ), "Аналитики" );
}

Функция ЗачетПредоплатыПокупок()
# Вызывается из приходных накладных, полученных услуг
# Зачитывает авансы, ранее выданные поставщику по основаниям (Д60_1 К60_2),
# формирует проводки по зачету НДС с этих авансов (Д68_НДС К19),
# записи в книгу покупок, если не освобождены от НДС.
# Текущий документ регистрируется в журнал учета полученных счетов фактур, 
# если эта покупка по счету фактуре, а не по чекам за наличный расчет.
# Возвращает сумму предоплаты
{
   Если( !Есть( Закрытие ) или Сумма2 == 0 ) Вернуть 0;

   # Операции для упрощенки. Для упрощенки 60-1 по 2 аналитике ведется по документам
   оДокумент60 = Константа( .Дата, "ВИД_НАЛОГ" ) == "Упрощенка (доходы - расходы)" ? .Документ : Нет;
   
   # Запись в книгу покупок не делается при упрощенной системе налогообложения,
   # в остальных случаях делается (налог на прибыль, освобожден от НДС, ЧП,
   # налоговый учет не ведется).
   НомерЖурнала = Найти( Константа( .Дата, "ВИД_НАЛОГ"), "Упрощенка" ) ? 0 : 1;

   Если( ПоСчетам )
   {  # Для случая оплаты по счетам связываем накладную с документами оплаты по данной сделке
      СвязатьОплату( Документ, Дата-1, НомерЖурнала);
      # Проверка отсутствия программных связей с более ранними следствиями
      ПроверитьСледствия();
   }

   # Зачет авансов, ранее выданных поставщику
   Провести();
   Деньги СуммаПредОплаты = 0;
   
   # Перебор связей с документами оплаты (оснований)
   Перем пПоставщик = Контрагент();
   ДляВсех( Записей( "Связи2", Документ ) )
   {
      Если( РегистрацияВЖурнал( НомерЖурнала, пПоставщик ) )
      { 
         УстановитьПланСчетов( "НОВЫЙ" );
   
         СуммаПредОплаты += Связь.Сумма;
         Проводка( Связь.Дата, Д60_1, пПоставщик, оДокумент60, Связь.Сумма, К60_2, пПоставщик);
         # Проводки по зачету НДС с предоплаты
         перем Копл = Число( Связь.Сумма / .Сумма2 );

         Перем пЗачестьНДС = 1;
         Если( '.Документ.Тип документа' == "АктПриемкиОС")
         {
            Если( !'.Документ.Ввод в экспл-цию' )
            {  # Если не введено в эксплуатацию, то убираем из Журнала№1
               Связать( Связь.Связи, Нет );
               Связь.Флаги = "-Регистрация";
               Сообщить( "Зачет НДС сделайте после ввода ОС в эксплуатацию, во взаимозачетах." );
               пЗачестьНДС = 0;
            }
            Иначе
            {  # Зачет НДС делается 1ым числом месяца после ввода в эксплуатацию
               Связь.Дата = Макс( Связь.Дата, Дата( 1, Месяц( '.Документ.Ввод в экспл-цию' ) + 1, Год( 'Ввод в экспл-цию' ) ) );
            }
            Сохранить( Связь );
         }
         
         Если( пЗачестьНДС ) # Проводки по зачету НДС
            ЗачетНДС( .Документ, Копл, Связь.Дата );

         # Операции по упрощенке
         Если( Константа( .Дата, "ВИД_НАЛОГ") == "Упрощенка (доходы - расходы)" и Копл )
         {
            УстановитьПланСчетов( "УПРОЩЕННЫЙ" );
         
            объект мРасходы = РасходыУпрощенка( '.Документ.Лицо_' );
         
            перем пТема;
            ДляВсех( Элементов( мРасходы, пТема ) )
            {
               объект оЛицо = Лицо( пТема, "Аналитики" );
         
               Если( Есть( 'оЛицо.УСН_ЗАТРАТА' ) )
                  ВыборПо( 'оЛицо.УСН_ЗАТРАТА' )
                  {
                     выбор 1:
                        Проводка( Связь.Дата, "У90", "У20", оЛицо, .Документ.Лицо1, .Документ, мРасходы[ пТема ] * Копл );
         
                     выбор 2:
                        Проводка( Связь.Дата, "У41", оЛицо, .Документ.Лицо1, .Документ, мРасходы[ пТема ] * Копл );
                  }
            }

            # В Журнал упрощенки заносятся все затраты, даже которые не являются расходами упрощенки
            ВЖурнал( Связь.Дата, 7, Связь.Сумма );
         }
      }
   }
   
   # Операции по налоговому учету
   Если( Константа( .Дата, "ВИД_НАЛОГ") == "Налог на прибыль" )
   {  # Формирование налоговых проводок по расходам на страхование грузов в части предоплаты
      # а также временных разниц на остальную сумму
      Если( Есть( СуммаСТРА ) ? СуммаСТРА : 0 ) # Проверяем параметр документа
      {
         Перем пКоэфОплаты = СуммаПредоплаты / Сумма2;
         ДляВсех( Записей( "Проводки по документу", Документ ) )
         {  # Страхование грузов признается расходом в нал учете в момент оплаты
            Если( Есть( 'Лица-Дебет.Лицо_.Тема' ) ? 'Лица-Дебет.Лицо_.Тема' == "СТРА" : 0 )
            {
               Перем ВидРасх = ВидРасходаПоШПЗ( 'Дебет.Номер счета' );
               Перем НСумма = НалПроводка( ВидРасх, 'Лица-Дебет', Сумма * пКоэфОплаты );
               ВремРазница( Сумма - НСумма, ВидРасх, 'Лица-Дебет', Документ );
            }
         }
      }
   }
   
   Если( ( СуммаПредОплаты > Сумма2 и Сумма2 > 0 ) или
         ( СуммаПредОплаты < Сумма2 и Сумма2 < 0 ) )
      Ошибка("Сумма предоплаты больше суммы документа!");
   Если( !Есть(ДЕЯТ_НЕОБЛ_НДС) ) ДЕЯТ_НЕОБЛ_НДС = 1; # по умолчанию деятельность НДС облагается 
   Если( Лицо1.Название != "Наличный расчет" и !ДЕЯТ_НЕОБЛ_НДС )
      ВЖурнал( "0-1", Сумма2 ); # Регистрация в Журнал учета полученных счетов фактур
   Иначе Если( Лицо1.Название == "Наличный расчет" и Лицо2.ТипЛица != "Сотрудники" ) 
      Ошибка("В Лицо2 укажите сотрудника, через которого приобретены ТМЦ!");
   Вернуть СуммаПредоплаты;
}

Функция Контрагент()
# Вызывается из документов оплаты в виде: Связь.Документ.Контрагент()
# Возвращает для всех документов кроме документов по основным средствам Лицо1.
# Для документов по ОС возвращает Лицо1.
{
   ВыборПо('Тип документа')
   {
      Выбор "АктПриемкиОС", "АктСписанияОС", "СменаСтоимОС" :
         Вернуть Лицо2;
      Иначе
         Вернуть Лицо1;
   }
}

Функция ЗачетРасходовУпрощенка( Документ, Копл, ДатаП )
{
   # Вызывается внутри цикла по документам

   # Документ - документ поставщика из таблицы "Документ", по которому надо зачесть расходы
   # Копл - коэффициент оплаты по указанному документу
   # ДатаП - дата для формирования проводок

   # В результате проводки по упрощенному плану счетов

   # Операции по упрощенке
   УстановитьПланСчетов( "УПРОЩЕННЫЙ" );

   объект мРасходы = РасходыУпрощенка( 'Документ.Лицо_' );

   перем пТема;
   ДляВсех( Элементов( мРасходы, пТема ) )
   {
      объект оЛицо = Лицо( пТема, "Аналитики" );

      перем пСумма = мРасходы[ пТема ] * Копл;

      Если( Есть( 'оЛицо.УСН_ЗАТРАТА' ) )
         ВыборПо( 'оЛицо.УСН_ЗАТРАТА' )
         {
            выбор 1:
               Проводка( ДатаП, "У90", "У20", оЛицо, Документ.Лицо1, Документ, пСумма );

            выбор 2:
               Проводка( ДатаП, "У41", оЛицо, Документ.Лицо1, Документ, ( пСумма > 0 ? "" : "Возврат" ), пСумма );
         }
   }

   # В Журнал упрощенки заносятся все затраты, даже которые не являются расходами упрощенки
   Если( Есть( Связь.Сумма ) ) Если( Связь.Сумма )
      ВЖурнал( ДатаП, 7, Связь.Сумма );

   УстановитьПланСчетов("");
}

Функция РасходыУпрощенка( ДокументЛицо )
{
   # Рассчитывает суммы расходов по документу-основанию
   
   # ДокументЛицо - документ из таблицы "Лицо", по которому рассчитываем расходы

   # В результате массив с индексом "Тема" из справочника аналитик и суммы расходов
   
   Объект мРасходы;
   
   Объект оПроводки = Объект( "Проводки" );
   Связать( 'оПроводки.3Лица-Дебет', ДокументЛицо );
   Найти( оПроводки, "3Лица-Дебет" );
   Если( Есть( 'ДокументЛицо.Тип документа' ) == 1 )
      Пока( 1 )
      {
         Если( 'оПроводки.3Лица-Дебет' == ДокументЛицо )
         {
            Если( 'оПроводки.Дебет.Номер счета' == "У20" и 'оПроводки.Лица-Дебет.ТипЛица' == "Аналитики" )
               мРасходы[ 'оПроводки.Лица-Дебет>Лицо_.Тема' ] += Макс( оПроводки.Сумма, 0 );
            
            Следующий( оПроводки, "3Лица-Дебет" );
         }
         иначе
            Вернуть мРасходы;
      }
   Вернуть Нет;
}

Функция СуммаДокУСН( ДокументУСН )
{ 
   # Сумма документа как сумма параметров упрощенки, если параметра РАСХОД_УСН нет,
   # то расход берется по проводкам на дебет У20

   # ДокументУСН - документ-основание из таблицы "Документ"

   # В результате сумма документа

   перем пРезультат = Есть( ДокументУСН.ДОХОД_УСН ) ? ДокументУСН.ДОХОД_УСН : 0;
   Если( Есть( ДокументУСН.РАСХОД_УСН ) )
      пРезультат += ДокументУСН.РАСХОД_УСН;
   иначе
      Если( Есть( 'ДокументУСН.Лицо_' ) > 0 )
      {
         перем мРасходыУпрощенка = РасходыУпрощенка( ДокументУСН.Лицо_ );

         перем пИндекс;
         ДляВсех( Элементов( мРасходыУпрощенка, пИндекс ) )
            пРезультат += мРасходыУпрощенка[ пИндекс ];
      }
   Вернуть( пРезультат );
}

Функция ЗачетРасходов( Документ, Копл, ДатаП )
# Формирует проводки по зачету расходов по указанному документу
# Эта функция вызывается в правилах по оплате поставщику 
# внутри цикла для всех оснований.
# В ней следует описывать все операции, которые необходимо выполнять по зачету расходов
# Параметры:
# Документ - документ, по которому зачитываются расходы
# Копл     - коэффициент оплаты
# ДатаП    - дата для формирования проводок
{
   # Операции по налоговому учету
   Если( Константа( ДатаП, "ВИД_НАЛОГ") == "Налог на прибыль" и Копл )
   {  # Формирование налоговых проводок по расходам на страхование грузов в части оплаты
      # а также уменьшения временных разниц на эту сумму
      Если( Есть( СуммаСТРА ) ? СуммаСТРА : 0 )
      {
         ДляВсех( Записей( "Проводки по документу", Документ ) )
         {  # Страхование грузов признается в нал учете в момент оплаты
            Если( Есть( 'Лица-Дебет.Лицо_.Тема' ) ? 'Лица-Дебет.Лицо_.Тема' == "СТРА" : 0 )
            {
               Перем ВидРасх = ВидРасходаПоШПЗ( 'Дебет.Номер счета' );
               Перем НСумма = НалПроводка( ВидРасх, 'Лица-Дебет', Сумма * пКоэфОплаты, "", ДатаП );
               ВремРазница( -НСумма, ВидРасх, 'Лица-Дебет', Документ, ДатаП, "уменьш" );
            }
         }
      }
   }
}

# Возвращает цену последней партии прихода
# Используется в розничной торговле при учете по себестоимости
# Параметр - дата расхода
Функция ЦенаИзПослПартииПрих(тДата)
{
   объект оПрх = Объект("Приход");
   пЦена = 0;
   Пока(Предыдущий('Склад-Расход',оПрх,"Склад-Приход") )
      Если( оПрх.дата <= тДата и оПрх.Кол_во )
      {
          пЦена = оПрх.СуммаЦен /оПрх.Кол_во;
          Вернуть(пЦена);
      }
   Вернуть(пЦена);
}
