
Функция 'Перечисление налога'(Событие, Поле)
# Обработчик диалога 'Перечисление налога' в платежном поручениии
# Производит заполнение <назначения платежа> для платежек на уплату налогов
{
   Перем пПерид, пДлина, пСтрОКАТО, пСтрНомер, пСтрДата, пСтрДМГ, пСтрПрим, пПримечание, пКод, пСтатусСост;
   ПроверитьКонстанту( "ОКАТО", "Код ОКАТО административно территориального деления", "12345678901", "ОТЧЕТЫ" );
   Если( ОКАТО == "" )
      СпроситьКонстанты("ОКАТО");
   ВыборПо( Событие )
   {
      Выбор "Инициализация":
         Разбить( Примечание, ";", @ОКАТО, '@Основание платежа', пПериод, '@НомерОсн',
                                   '@ДатаОсн', '@Вид платежа', '@Примечание');
         Если( !@ОКАТО )
         {
           Если( Есть( Лицо1.ОКАТО ) )
              @ОКАТО = Лицо1.ОКАТО; # Берем из параметра Лица1
           Иначе
              @ОКАТО = ОКАТО; # Из константы берем, так как обычно он один и тот же
         }
         Если( '@НомерОсн' == "0" )
            '@НомерОсн' = "";
         Разбить( пПериод, ".", '@День', '@Месяц', '@Год');
         # Убираем лидирующий и закрывающий символ ' " ' в Примечании
         Если( ПодСтрока( '@Примечание', 1, 1 ) == "\"" )
            '@Примечание' = ПодСтрока( '@Примечание', 2, -1 );
         пДлина = Размер( '@Примечание' );
         Если( ПодСтрока('@Примечание', пДлина, 1 ) == "\"")
            '@Примечание' = ПодСтрока( '@Примечание', 1, пДлина - 1);
         # Если примечание не заполнено, то берем его из правила операции, после "@"
         Если( '@Примечание' == "" )
         {
            Разбить( 'Ключевая фраза', "@", пКод, пПримечание );
            # Убираем лидирующий пробел, если есть
            Если( ПодСтрока( пПримечание, 1, 1 ) == " " )
               пПримечание = ПодСтрока( пПримечание, 2, -1 );
            '@Примечание' = пПримечание;
            Разбить( пКод, ";", пКод, пСтатусСост );
            ВыборПо( пКод )
            {
               Выбор "1010510","1010610","1010620":
                  ПроверитьКонстанту("ПФРЕГНОМ", "Регистрационный номер в ПФР", "", "ПФУЧЕТ");
                  '@Примечание' += "(рег.№" + ПФРЕГНОМ + ")";
               Выбор "1010520":
                  ПроверитьКонстанту("СОЦСТРРЕГНОМ", "Регистрационный номер в ФСС", "", "СОЦСТРАХ");
                  '@Примечание' += "(рег.№" + СОЦСТРРЕГНОМ + ")";
               Выбор "1010530","1010540":
                  ПроверитьКонстанту("ФОМСРЕГНОМ", "Регистрационный номер в Фонде ОМС", "", "ОТЧЕТЫ");
                  '@Примечание' += "(рег.№" + ФОМСРЕГНОМ + ")";
            }
         }
         Вернуть "";

      Выбор "Сохранение":
         Если( '@НомерОсн' == "0" )
            '@НомерОсн' = "";
         # Проверка Налогового периода в зависимости от Основания платежа
         пДень = ПодСтрока( '@День', 1, 2 );
         пМес  = Число( '@Месяц' );
         пОП   = "";
         Разбить( '@Основание платежа', " ", пОП );
         пУказанДень = пДень != "00";
         Если( Найти( "АП,АР", пОП ) и ( пУказанДень или пМес или '@Год' ) )
            Сообщить( "Для платежа " + '@Основание платежа' + "\nНалоговый период не заполняется (00)!" );
         Если( Найти( "ТП,ЗД,ТР,РС,ОТ,РТ,ВУ,ПР", пОП )
               и пДень != "ГД" и ( !пУказанДень или пМес == 0 или '@Год' == 0 ) )
            Сообщить( "Для платежа " + '@Основание платежа' + "\nНалоговый период должен быть заполнен!" );
         Если( Найти( "ТР,РС,ОТ,РТ,ВУ,ПР", пОП ) и !пУказанДень )
            Сообщить( "Для платежа " + '@Основание платежа' + "\nНалоговый период кодируется конкретной датой!" );
         Если( пОП == "ТП" и ( '@НомерОсн' != "" или '@ДатаОсн' == "" ) )
            Сообщить( "Для платежа " + '@Основание платежа' + "\nНомер документа основания не нужно заполнять.\n"
                      + "В дате основания нужно указать дату утверждения декларации,\n"
                      + "или если декларации (расчета) еще нет, то дату платежа!" );
         Если( пОП == "ЗД" и ( '@НомерОсн' != "" или '@ДатаОсн' != "" ) )
            Сообщить( "Для платежа " + '@Основание платежа' + "\nНомер и дату документа основания не нужно заполнять!" );
         Если( !Найти( "ТП,ЗД,0", пОП ) и ( '@НомерОсн' == "" или '@ДатаОсн' == "" ) )
            Сообщить( "Для платежа " + '@Основание платежа' + "\nНомер и дата документа основания должны быть заполнены!" );

         # Проверка непротиворечивости Налогового периода
         Если( пДень == "КВ" и пМес  > 4 )
            Сообщить("Для квартального платежа номер квартала\nможет принимать значения от 01 до 04");
         Если( пДень == "ПЛ" и пМес  > 2 )
            Сообщить("Для полугодового платежа номер полугодия\nможет принимать значения от 01 до 02");
         Если( пДень == "ГД" и пМес != 0 )
            Сообщить("Для годового платежа 4-й и 5-й знаки налогового периода заполняются нулями (00)");
        
         # Формирование результирующей строки с кодами
         Если( Найти( "АП,АР", пОП ) )
            пСтрДМГ = "0";
         Иначе
            пСтрДМГ = пДень + "." + ПодСтрока( @Месяц, 1, 2 ) + "." + @Год;
         Если( пСтрДМГ == "00.00.0" )
            пСтрДМГ = "0";
         пСтрПрим   = "\"" + Текст( '@Примечание' ) + "\""; # Заключаем в кавычки
         пСтрНомер  = '@НомерОсн' == "" ? "0" : Текст( '@НомерОсн' );
         пСтрДата   = '@ДатаОсн'  == "" ? "0" : Текст( '@ДатаОсн', "ДАТА (дд.мм.гггг)" );
         пСтрОКАТО  = @ОКАТО ? @ОКАТО : "0";
         пВидПлатежа = "";
         Разбить('@Вид платежа', " ", пВидПлатежа );
         Примечание = пСтрОКАТО + ";" + пОП + ";" + пСтрДМГ + ";"
                    + пСтрНомер + ";" + пСтрДата + ";"
                    + пВидПлатежа + ";" + пСтрПрим;
         # Очередность платежа для налогов - 3
         Очередность = 3;
         Вернуть "";
   }
   Вернуть "";
}

# обработчик выборки 'Исходящие платежи'
функция 'Исходящие платежи'(Событие)
{
   ВыборПо(Событие)
   {
      выбор "Инициализация":
         # Очередность платежа по умолчанию 6
         Если( !Очередность ) Очередность = 6;
         Вернуть 0;
   }
   Вернуть 0;
}
