# Функции для отчетов по налогу на доходы физических лиц

Функция ДоходЧастногоЛица()
# Для отчетов за 2001 год
# Рассчитывает сумму дохода по частному лицу за период
# Доход = Выплаты на руки + Удержанный налог
{
   ПроверитьКонстанту( "51БАНК",  "Расчетный счет", "51", "СЧЕТА.51", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(51) РАСЧЕТНЫЙ СЧЕТ");
   ПроверитьКонстанту( "50КАССА", "Касса", "50", "СЧЕТА.50", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(50) КАССА");
   ПроверитьКонстанту( "68ПОДН",  "Расчеты по подоходному налогу", "68-ПН", "СЧЕТА.68", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) (68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ");
   ПроверитьКонстанту( "ПН_НОМЕРА_СЧЕТОВ", "Номера счетов для доходов частных лиц, через запятую","60,62,71,76", "ПНАЛОГ", "ПОДОХОДНЫЙ НАЛОГ");
   Перем пНомераСчетов, пСчет, пСчет2, пДоход;
   пДоход = 0;
   пНомераСчетов = ПН_НОМЕРА_СЧЕТОВ;
   Пока( пНомераСчетов ) # Перебираем все счета, перечисленные через запятую
   {
      Разбить( пНомераСчетов, ",", пСчет, пСчет2 );
      пНомераСчетов = Подстрока( пНомераСчетов, Размер( пСчет ) + 2, -1 );
      пСчет  = Текст( пСчет, ""); # Отбросить начальные и конечные пробелы
      Если( Есть( ВерсияПрограммы ) ) # Версия 1.9
      {
         # Сумма, полученная на руки
         Если( 50КАССА )
            пДоход += Оборот( пСчет, Лицо, 50КАССА, Нет ) - Оборот( 50КАССА, Нет , пСчет, Лицо );
         Если( 51БАНК )
            пДоход += Оборот( пСчет, Лицо, 51БАНК, Нет )  - Оборот( 51БАНК, Нет , пСчет, Лицо );
         # Сумма удержанного налога
         пДоход += Оборот( пСчет, Лицо, 68ПОДН, Нет )  - Оборот( 68ПОДН, Нет , пСчет, Лицо );
      }
      Иначе # Версия 1.8
      {
         # Сумма, полученная на руки
         Если( 50КАССА )
            пДоход += Оборот( пСчет, 50КАССА, Лицо ) - Оборот( "К" + пСчет, "Д" + 50КАССА, Лицо );
         Если( 51БАНК )
            пДоход += Оборот( пСчет, 51БАНК, Лицо  ) - Оборот( "К" + пСчет, "Д" + 51БАНК,  Лицо );
         # Сумма удержанного налога
         пДоход    += Оборот( пСчет, 68ПОДН, Лицо  ) - Оборот( "К" + пСчет, "Д" + 68ПОДН,  Лицо );
      }
   }
   Вернуть Макс( пДоход, 0 );
}

Функция НалогЧастногоЛица()
# Для отчетов за 2001 год
# Рассчитывает сумму удержанного подоходного налога по частному лицу за период
{
   ПроверитьКонстанту( "51БАНК",  "Расчетный счет", "51", "СЧЕТА.51", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(51) РАСЧЕТНЫЙ СЧЕТ");
   ПроверитьКонстанту( "50КАССА", "Касса", "50", "СЧЕТА.50", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(50) КАССА");
   ПроверитьКонстанту( "68ПОДН",  "Расчеты по подоходному налогу", "68-ПН", "СЧЕТА.68", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) (68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ");
   ПроверитьКонстанту( "ПН_НОМЕРА_СЧЕТОВ", "Номера счетов для доходов частных лиц, через запятую","60,62,71,76", "ПНАЛОГ", "ПОДОХОДНЫЙ НАЛОГ");

   Перем пНомераСчетов, пСчет, пСчет2, пНалог;
   пНалог = 0;
   пНомераСчетов = ПН_НОМЕРА_СЧЕТОВ;
   Пока( пНомераСчетов ) # Перебираем все счета, перечисленные через запятую
   {
      Разбить( пНомераСчетов, ",", пСчет, пСчет2 );
      пНомераСчетов = Подстрока( пНомераСчетов, Размер( пСчет ) + 2, -1 );
      пСчет  = Текст( пСчет, ""); # Отбросить начальные и конечные пробелы
      Если( Есть( ВерсияПрограммы ) ) # Версия 1.9
         пНалог += Оборот( пСчет, Лицо, 68ПОДН, Нет )  - Оборот( 68ПОДН, Нет , пСчет, Лицо );
      Иначе # Версия 1.8
         пНалог += Оборот( пСчет, 68ПОДН, Лицо ) - Оборот( "К" + пСчет, "Д" + 68ПОДН, Лицо );
   }
   Вернуть пНалог;
}

Функция РазделДохНДФЛ( КодДохода )
# Для отчетов за 2001 год
# Определяет раздел доходов для справки 2-НДФЛ для указанного дохода
# Параметр:   КодДохода - код дохода в соответствии с классификатором
# Возвращает: "13" - для доходов, облагаемых по ставке 13%
#             "30" - для доходов, облагаемых по ставке 30%
#             "35" - для доходов, облагаемых по ставке 35%
#             "ИМУЩ" - для доходов по выплатам физическим лицам
#                      от продажи их собственного имущества
{
   ВыборПо( КодДохода ) 
   {
      Выбор "1010" : Вернуть "30";
      # Дивиденды, определяемые с учетом ст. 214 НК РФ
      Выбор "3010",
      # Стоимость выигрышей, выплачиваемых организаторами лотерей,
      # тотализаторов и других основанных  на  риске  игр  (в  том
      # числе с использованием игровых автоматов)
            "2740", # вычет 505
      # Стоимость выигрышей  и  призов,  получаемых  в  проводимых
      # конкурсах, играх  и  других  мероприятиях  в целях рекламы
      # товаров (работ,  услуг),  определяемая согласно п.  28 ст.
      # 217 НК                                                    
            "1200",
      # страховые выплаты  по  договорам  добровольного  страхования  в
      # части превышения размеров, указанных в пункте 2 статьи 213
            "3020",
      # Сумма процентного  дохода  по  вкладам  в  банках  в части
      # превышения суммы,  освобождаемой  от   налогообложения   в
      # соответствии с п. 27 ст. 217 НК РФ
            "2610" : Вернуть "35";
      # Сумма материальной  выгоды,  полученная  от  экономии   на
      # процентах за   пользование   налогоплательщиком   заемными
      # средствами, определяемая в соответствии с п.  2 ст. 212 НК
      Выбор "1510",
      # Доходы, полученные   налогоплательщиком    от   реализации
      # недвижимого имущества                                     
            "1520",
      # Доходы, полученные  налогоплательщиком от реализации иного
      # имущества (кроме ценных бумаг)                            
            "1530",
      # Доходы, полученные налогоплательщиком от реализации  акций
      # или иных ценных бумаг                                     
            "1540" : Вернуть "ИМУЩ";
      # Доходы, полученные  налогоплательщиком от реализации долей
      # участия в уставном капитале организаций; прав требования к
      # организации                                               
      Иначе          Вернуть "13";
      # Налоговая ставка устанавливается 13%, для всех остальных
      # видов дохода ст. 224 НК
   }
}

Функция КодВычетаНДФЛ( КодДохода )
# Определяет код вычета, установленного НК для указанного кода дохода
# Если для данного дохода нет вычета, возвращает "0"
# Параметр:   КодДохода - код дохода в соответствии с классификатором
{
   ВыборПо( КодДохода ) 
   {
      # Вычет из стоимости подарков, полученных от организаций и индивиду-
      # альных предпринимателей, не подлежащих обложению налогом на
      # наследование или дарение
      Выбор "2720" : Вернуть "501";
      
      # Вычет из стоимости призов в денежной и натуральной формах, получен-
      # ных на конкурсах и соревнованиях, проводимых в соответствии с
      # решениями Правительства Российской Федерации, законодательных
      # (представительных) органов государственной власти или представитель-
      # ных органов местного самоуправления
      Выбор "2730" : Вернуть "502";

      # Вычет из стоимости (суммы) материальной помощи, оказываемой работо-
      # дателями своим работникам, а также бывшим своим работникам,
      # уволившимся в связи с выходом на пенсию по инвалидности или по
      # возрасту
      Выбор "2760" : Вернуть "503";

      # Вычет из суммы возмещения (оплаты) работодателями своим работникам,
      # их супругам, родителям и детям, бывшим своим работникам (пенсионерам
      # по возрасту), а также инвалидам стоимости приобретенных ими (для
      # них) медикаментов, назначенных им лечащим врачом
      Выбор "2770" : Вернуть "504";

      # Вычет из стоимости любых выигрышей и призов, полученных на конкурсах
      # играх и других мероприятиях в целях рекламы товаров (работ, услуг)
      Выбор "2740" : Вернуть "505";

      # На остальные виды доходов нет вычетов
      Иначе Вернуть "0";
   }
}

Функция ВидыДоходов()
# Возвращат массив следующей структуры:
# Индекс - код дохода
# Поля: Доход     - сумма дохода с данным кодом
#       КодВычета - год льготы по данному доходу
#       Вычет     - сумма льготы по данному доходу
{ 
# Вознаграждение (заработная плата и другие выплаты во исполнение трудового 
# договора, денежное содержание и иные налогооблагаемые выплаты военнослужащим и 
# приравненным к ним категориям физических лиц, произведенные в денежной форме) за 
# выполнение трудовых или иных обязанностей (включая выплаты по договорам 
# гражданско-правового характера), кроме авторских вознаграждений, выполненную 
# работу, оказанную услугу, совершение действия (бездействия) в Российской Федерации 
# или за ее пределами; вознаграждение директоров и иные аналогичные выплаты, 
# получаемые членами органа управления организации (совета директоров или иного 
# подобного органа)
      МассивДоходов["2000","Доход"] = ЗаПериодРасчета("НАЧ+ПРЕМ+ДОГТ+ОТП+БОЛ");
# Пенсии, пособия, стипендии и иные аналогичные выплаты, кроме сумм государственных
# пособий, государственных пенсий, сумм стипендий, выплат по договорам добровольного
# пенсионного обеспечения, заключенным с негосударственными пенсионными фондами, не
# подлежащих налогообложению в соответствии с пунктами 1, 2, 11 ст. 217 и п. 1 ст. 213 НК РФ 
#      МассивДоходов["2300","Доход"] = 0;

# Суммы оплаты (полностью или частично) за налогоплательщика организациями или 
# индивидуальными предпринимателями товаров (работ, услуг) или имущественных прав,
# в том числе коммунальных услуг, питания, отдыха, обучения в интересах налогоплательщика
      МассивДоходов["2510","Доход"] = ЗаПериодРасчета("ДОТ+ТРАН+ТЛФ+ПОДП+АРЕН+ПУТ+ОБУЧ+АРЕМ");
# Стоимость полученных налогоплательщиком товаров, выполненных в интересах 
# налогоплательщика работ, оказанных в интересах налогоплательщика услуг на 
# безвозмездной основе
      МассивДоходов["2520","Доход"] = ЗаПериодРасчета("ПРИБ")
# Суммы оплаты труда в натуральной форме в виде товаров (работ, услуг)
      Перем пНАТВ;
      пНАТВ = ЗаПериодРасчета("НАТВ");
      МассивДоходов["2530","Доход"] = пНАТВ;
      МассивДоходов["2000","Доход"]-= пНАТВ;
# Суммы материальной помощи, оказываемой налогоплательщиком в иных случаях, 
# не подпадающих под действие п. 8 и п. 28 ст. 217 НК, подлежащие налогообложению
      МассивДоходов["2710","Доход"] = ЗаПериодРасчета("МТП4");
# Стоимость подарков, полученных от организаций или индивидуальных предпринимателей
# и не подлежащих обложению налогом на наследование или дарение в соответствии
# с действующим законодательством, определяемая согласно п. 28 ст. 217   
      МассивДоходов["2720","Доход"] = ЗаПериодРасчета("ПОДР");
      МассивДоходов["2720","КодВычета"] = "501"
      МассивДоходов["2720","Вычет"] = ЗаПериод("ЛПОД");
# Стоимость призов в денежной и натуральной формах, полученных на конкурсах и
# соревнованиях, проводимых в соответствии с решениями Правительства Российской 
# Федерации, законодательных (представительных) органов государственной власти или
# представительных органов местного самоуправления, определяемая согласно п. 28 ст. 217 НК
      МассивДоходов["2730","Доход"] = ЗаПериодРасчета("ППРВ");
      МассивДоходов["2730","КодВычета"] = "502";
      МассивДоходов["2730","Вычет"] = ЗаПериод("ЛПРЗ");
# Стоимость призов   в   денежной   и   натуральной  формах, полученных на конкурсах и
# соревнованиях,  проводимых не  в соответствии с    решениями    Правительства
# Российской Федерации, законодательных   (представительных)    органов государственной
# власти    или   представительных   органов местного самоуправления и не целях рекламы
# товаров  (работ и услуг)
      МассивДоходов["2750","Доход"] = ЗаПериодРасчета("ППРЧ");
# Суммы материальной помощи, оказываемой работодателями своим работникам, а 
# также бывшим своим работникам, уволившимся в связи с выходом на пенсию по 
# инвалидности или по возрасту, определяемые согласно п. 28 ст. 217 НК
      МассивДоходов["2760","Доход"] = ЗаПериодРасчета("МТП1");
      МассивДоходов["2760","КодВычета"] = "503";
      МассивДоходов["2760","Вычет"] = ЗаПериод("ЛМТП");
# Иные доходы, включаемые в налоговую базу источником выплаты дохода
      МассивДоходов["3100","Доход"] = ЗаПериодРасчета("КОМ");
   Вернуть МассивДоходов;
}

Функция ВидыДоходов06()
# для отчетов за 2002 год
# Возвращат массив с доходами, облагаемыми ПН по ставке 30%
# Индекс - код дохода
# Поля:  Доход     - сумма дохода с данным кодом
#        КодЛьготы - год льготы по данному доходу
#        Льгота    - сумма льготы по данному доходу
{
   # Дивиденды, определяемые с учетом ст. 214 НК РФ  
   МассивДоходов["1010","Доход"] = ЗаПериодРасчета("ДИВ");
   Вернуть МассивДоходов;
}

Функция ВидыДоходов30()
# для отчетов за 2001 год
# Возвращат массив с доходами, облагаемыми ПН по ставке 30%
# Индекс - код дохода
# Поля:  Доход     - сумма дохода с данным кодом
#        КодЛьготы - год льготы по данному доходу
#        Льгота    - сумма льготы по данному доходу
{
   # Дивиденды, определяемые с учетом ст. 214 НК РФ  
   МассивДоходов["1010","Доход"] = ЗаПериодРасчета("ДИВ");
   Вернуть МассивДоходов;
}

Функция ВидыДоходов35()
# Возвращат массив с доходами, облагаемыми ПН по ставке 35%
# Индекс - код дохода
# Поля:  Доход     - сумма дохода с данным кодом
#        КодЛьготы - год льготы по данному доходу
#        Льгота    - сумма льготы по данному доходу
{
   # Сумма материальной выгоды, полученная от экономии на процентах за
   # пользование налогоплательщиком заемными средствами, определяемая
   # в соответствии с п. 2 ст. 212 НК РФ 
   МассивДоходов["2610","Доход"]     = ЗаПериодРасчета("МВЫГ");
   # Стоимость выигрышей  и  призов,  получаемых  в  проводимых конкурсах, играх  и  других
   # мероприятиях  в целях рекламы товаров (работ,  услуг),  определяемая согласно п.28 ст.
   # 217 НК
   МассивДоходов["2740","Доход"]     = ЗаПериодРасчета("ПРЕК");
   МассивДоходов["2740","КодВычета"] = "505";
   МассивДоходов["2740","Вычет"]     = ЗаПериод("ЛПРР");
   Вернуть МассивДоходов;
}

Функция ВидыВычетов()
# Возвращает массив стандартных налоговых вычетов:
# Индексный элемент - код вычета в соответствии с инструкцией по 
#                     подоходному налогу;
# Значение элемента - сумма вычета с данным кодом 
# например А = ВидыВычетов();
#          Сообщить(А["21"]); # сообщит однократную льготу на сотрудника
{  # Используется функция ЗаПериод(), а не ЗаПериодРасчета() для возможности
   # корректировки льгот за нужный период и правильного отражения их в налоговой катрочке
   # в том периоде, к которому они относятся, а не в том, в котором они рассчитаны.
      # 300 руб. на каждого ребенка, пп. 4 п. 1 ст. 218 НК
      МассивВычетов["101"] = ЗаПериод("ЛИЖД");
      # 600 руб. на ребенка вдове (вдовцу), одинокому родителю, опекуну, попечителю,
      # пп. 4 п. 1 ст. 218 НК
      МассивВычетов["102"] = ЗаПериод("ЛОР");
      # 400 руб. на налогоплательщика, пп. 3 п. 1 ст. 218 НК
      МассивВычетов["103"] = ЗаПериод("ЛСОТ");
      # 500 рублей на налогоплательщика, пп. 2 п. 1 ст. 218 НК
      МассивВычетов["104"] = ЗаПериод("Л104");
      # 3000 рублей на налогоплательщика, пп. 1 п. 1 ст. 218 НК
      МассивВычетов["105"] = ЗаПериод("Л105");
   Вернуть МассивВычетов;
}

Функция ВидыДоходовИмущ()
# Возвращат массив с доходами от продажи имущества
# Индекс - код дохода
# Поля:  Доход - сумма дохода с данным кодом
{
   # Нет таких в инсталляции, пока
   Объект МассивДоходов;
   # Доходы от реализации недвижимого имущества
   МассивДоходов["1520","Доход"] = ЗаПериодРасчета("ИМУЩ");
   Вернуть МассивДоходов;
}

Функция ВРамке(Код,МаксРазмер,Раздел)
#Помещает текст в рамочку
# Например:
#        ┌─┬─┬─┬─┬─┬─┬─┬─┬─┬─┐ ┌─┬─┬─┬─┬─┬─┬─┬─┬─┐       
#ИНН/КПП │7│6│0│5│0│1│5│3│3│3│/│ │ │ │ │ │ │ │ │ │       
#        └─┴─┴─┴─┴─┴─┴─┴─┴─┴─┘ └─┴─┴─┴─┴─┴─┴─┴─┴─┘
# Код - то, что нужно поместить в рамочку
# МаксРазмер - длина поля
# Раздел - "В"  - верх
#          "Ц"  - центр
#          "Н"  - низ
#          "ВЧ" - верх(подчеркиванием)
#          "ЦЧ" -центр (подчеркиванием)
{      
   РазмерКода = Макс( Размер( Код ), МаксРазмер );
   ТекСимвол  = 1;
   Символ = "";
   РамкаМассив["В"]  = "┌";
   РамкаМассив["Ц"]  = "│";
   РамкаМассив["Н"]  = "└";
   РамкаМассив["ВЧ"] = "ЎЧ";
   РамкаМассив["ЦЧ"] = "│Ч";
   Пока( РазмерКода != 0 )
   {
      РамкаМассив["В" ] += "─┬";      
      РамкаМассив["Н" ] += "─┴";
      РамкаМассив["ВЧ"] += "__";
      Символ = Подстрока( Код, ТекСимвол, 1 );
      Если( Символ == "" )    Символ = " ";
         РамкаМассив["Ц" ] += Символ + "│";     
         РамкаМассив["ЦЧ"] += Символ + "│";     
         ТекСимвол  += 1;
         РазмерКода -= 1;    # Уменьшить значение счетчика
   }
   #Заменяем последний элемент на конец рамки
   РамкаМассив["В"]  = Подстрока( РамкаМассив["В" ], 1, Размер( РамкаМассив["В"]  ) - 1 ) + "┐";
   РамкаМассив["Н"]  = Подстрока( РамкаМассив["Н" ], 1, Размер( РамкаМассив["Н"]  ) - 1 ) + "┘";      
   РамкаМассив["ЦЧ"] = Подстрока( РамкаМассив["ЦЧ"], 1, Размер( РамкаМассив["ЦЧ"] ) - 1 ) + "ч│";      
   Вернуть(РамкаМассив[Вверх(Раздел)]);
}

Функция ДоходЧЛ( НомераСчетов )
# Рассчитывает сумму дохода и удержанного налога по частному лицу за период
# Доход = Выплаты на руки + Удержанный налог
# Возврашает сумму дохода и определяет глобальную переменную .НалогЧЛ - сумма удержанного налога
# Параметры: НомераСчетов - (строка) номера счетов, через запятую, по которым определять доход
{
   ПроверитьКонстанту( "51БАНК",  "Расчетный счет", "51", "СЧЕТА.51", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(51) РАСЧЕТНЫЙ СЧЕТ");
   ПроверитьКонстанту( "50КАССА", "Касса", "50", "СЧЕТА.50", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(50) КАССА");
   ПроверитьКонстанту( "71ПОДОТЧ","Расчеты с подотчетными лицами", "71", "СЧЕТА.71", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(71) РАСЧЕТЫ С ПОДОТЧЕТНЫМИ ЛИЦАМИ");
   ПроверитьКонстанту( "68ПОДН",  "Расчеты по подоходному налогу", "68-ПН", "СЧЕТА.68", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(68) (68) СЧЕТА ПО РАСЧЕТАМ С БЮДЖЕТОМ");
   Перем пДоход = 0;
   .НалогЧЛ = 0;
   Пока( НомераСчетов ) # Перебираем все счета, перечисленные через запятую
   {
      Перем пСчет, пСчет2;
      Разбить( НомераСчетов, ",", пСчет, пСчет2 );
      НомераСчетов = Подстрока( НомераСчетов, Размер( пСчет ) + 2, -1 );
      пСчет  = Текст( пСчет, ""); # Отбросить начальные и конечные пробелы
      # Сумма, полученная на руки
      Если( 50КАССА )
         пДоход += Оборот( пСчет, Лицо, 50КАССА ) - Оборот( 50КАССА, пСчет, Лицо );
      Если( 51БАНК )
         пДоход += Оборот( пСчет, Лицо, 51БАНК )  - Оборот( 51БАНК, пСчет, Лицо );
      Если( 71ПОДОТЧ )
         пДоход += Оборот( пСчет, Лицо, 71ПОДОТЧ )  - Оборот( 71ПОДОТЧ, пСчет, Лицо );
      # Сумма удержанного налога
      .НалогЧЛ += Оборот( пСчет, Лицо, 68ПОДН )  - Оборот( 68ПОДН, пСчет, Лицо );
   }
   пДоход += .НалогЧЛ;
   Вернуть Макс( пДоход, 0 );
}

Функция РазделДохНДФЛ2002( КодДохода )
# Определяет раздел доходов (ставку) для справки 2-НДФЛ для указанного дохода
# Параметр:   КодДохода - код дохода в соответствии с классификатором
# Возвращает: "13" - для доходов, облагаемых по ставке 13%
#             "06" - для доходов, облагаемых по ставке 06%
#             "35" - для доходов, облагаемых по ставке 35%
#             "ИМ" - для доходов от продажи имущества
{
   ВыборПо( КодДохода ) 
   {
      Выбор "1010": # Дивиденды, определяемые с учетом ст. 214 НК РФ
         Вернуть "06";
      Выбор "1210", # Разница между страховой выплатой и взносом
            "2610", # Сумма материальной выгоды за пользование заемными средствами
            "2740", # Стоимость выигрышей и призов от рекламы согласно п. 28 ст. 217 НК
            "3020": # Сумма процентного дохода в банках (п. 27 ст. 217 НК РФ) 
         Вернуть "35";
      Выбор "1510", # Доходы от реализации недвижимого имущества
            "1520", # Доходы от реализации итого имущества (кроме ЦБ)
            "1530", # Доходы от реализации акций и других ЦБ
            "2800", # Суммы погашения вексельных обязательств
            "3010", # Стоимость выигрышей в основанных на риске играх
            "4600": # Доходы лиц, занимающихся частной практикой
         Вернуть "ИМ";
      Иначе         # Все остальные доходы облагаются по ставке 13%
         Вернуть "13";
   }
}

Функция ВидыДоходовЧЛ( СтавкаНалога )
# Возвращат массив с доходами, облагаемыми по указанной ставке
# Индекс - код дохода
# Поля:  Доход     - сумма дохода с данным кодом
#        КодВычета - год льготы по данному доходу
#        Вычет    - сумма льготы по данному доходу
#        Налог    - сумма налога удержанного по данному доходу
{
   ПроверитьКонстанту( "КОД_4800", "Счета доходов лиц, занимающихся частной практикой", "60,62,71,76", "ПНАЛОГ.СЧЕТА_ДОХОДОВ_ЧЛ", "ПОДОХОДНЫЙ НАЛОГ.СЧЕТА ДОХОДОВ ЧЛ" );
   Объект МассивДоходов, мКоды;
   Очистить( МассивДоходов );
   Очистить( мКоды );
   # Если код дохода указан в параметре на частном лице
   Если( Есть( КОД_ДОХОДА_ЧЛ ) и Есть( КОД_ДОХОДА_ЧЛ ) ? КОД_ДОХОДА_ЧЛ : "" )
   {
      Если( РазделДохНДФЛ2002( КОД_ДОХОДА_ЧЛ ) == СтавкаНалога или !СтавкаНалога )
         мКоды[КОД_ДОХОДА_ЧЛ] = КОД_4800;
   }
   Иначе # Перебираем все коды из констант
      ДляВсех( Констант("СЧЕТА_ДОХОДОВ_ЧЛ") )
      {
         Перем пКодДохода = Подстрока( Запись.Имя, 5, -1 );
         Если( РазделДохНДФЛ2002( пКодДохода ) == СтавкаНалога или !СтавкаНалога )
            мКоды[пКодДохода] = Запись.Значение; # Номера счетов
      }   
   ВывестиСтатус("Рассчитывается " + Лицо.Название + "...");
   ДляВсех( Элементов( мКоды, пКодДохода ) )
   {
      Перем пДоход = пНалог = пВычет = 0;
      пДоход = ДоходЧЛ( мКоды[ пКодДохода ] );
      пНалог = .НалогЧЛ; # Эта глоб. переменная определяется в функции ДоходЧЛ
      Если( пДоход )
      {
         МассивДоходов[пКодДохода,"Доход"]     = пДоход;
         МассивДоходов[пКодДохода,"Налог"]     = пНалог;
         Перем пКодВычета = КодВычетаНДФЛ( пКодДохода );
         Если( пКодВычета != "0" )
         {  # Сумма вычета рассчитывается автоматически, но не более 2000 с начала года
            Если( !Есть([".ВычетСНачГода" + пКодВычета]) или Месяц( ДатНач ) == 1 )
               [".ВычетСНачГода" + пКодВычета] = 0;
            пВычет = Мин( пДоход, 2000 - [".ВычетСНачГода" + пКодВычета] );
            [".ВычетСНачГода" + пКодВычета] += пВычет;
         }
         Если( пВычет )
         {
            МассивДоходов[пКодДохода,"КодВычета"] = пКодВычета;
            МассивДоходов[пКодДохода,"Вычет"]     = пВычет;
         }
      }
   }
   Вернуть МассивДоходов;
}

Функция Обработчик2НДФЛ()
# Обрабатывает диалог и поддиалоги диалога 2-НДФЛ
# Расчитывает параметры, функционально зависящие от других (итоги и тд.)
{
   # обработчик диалога '2-НДФЛ Дивиденды,35%'
   # Итого доходы по видам
   ПН_СУМ35ДИТОГ = ПН_СУМ35Д1 + ПН_СУМ35Д2;
   # Итого вычетов (скидок)
   ПН_СУМ35СИТОГ = ПН_СУМ35С1 + ПН_СУМ35С2;
   # Общая сумма дохода (п. 5.2)
   ПН_ДОХСУММДР = ПН_СУМ35ДИТОГ;
   # Облагаемая сумма дохода (п. 5.3)                   
   ПН_ОБЛДОХДР  = Макс( ПН_СУМ35ДИТОГ - ПН_СУМ35СИТОГ, 0 );

   # Сумма налога исчисленная (п. 4.2)
   ПН_НИДИВ = Окр( ПН_ДИВСУММ * 0.06, 1);
   # Сумма налога удержанная (п. 4.3)
   ПН_НУДИВ = Окр( ПН_НУДИВ, 1 );

   # Сумма налога исчисленная (п. 5.4)       
   ПН_НИОБЛДОХДР = Окр( ПН_ОБЛДОХДР * 0.35, 1 );
   # Сумма налога удержанная (п. 5.5)
   ПН_НУОБЛДОХДР = Окр( ПН_НУОБЛДОХДР, 1 );

   # обработчик диалога '2-НДФЛ Продажа имущества'
   # Итого доходы по видам
   ПН_СУМИМДИТОГ = ПН_СУМИМД1 + ПН_СУМИМД2 + ПН_СУМИМД3;

   # обработчик диалога '2-НДФЛ'
   @ФИО = Есть('Лицо1>Лицо_.ФИО') ? 'Лицо1>Лицо_.ФИО' : 'Лицо1>Название';
   # Итого доходы по месяцам
   ПН_ДОХОДМЕСИТОГ = ПН_ДОХОДМЕС01 + ПН_ДОХОДМЕС02 + ПН_ДОХОДМЕС03 + ПН_ДОХОДМЕС04
                    + ПН_ДОХОДМЕС05 + ПН_ДОХОДМЕС06 + ПН_ДОХОДМЕС07 + ПН_ДОХОДМЕС08
                    + ПН_ДОХОДМЕС09 + ПН_ДОХОДМЕС10 + ПН_ДОХОДМЕС11 + ПН_ДОХОДМЕС12;
   # Итого доходы по видам
   ПН_СУМ13ДИТОГ = ПН_СУМ13Д1 + ПН_СУМ13Д2 + ПН_СУМ13Д3 + ПН_СУМ13Д4 + ПН_СУМ13Д5 + ПН_СУМ13Д6;
   # Итого вычетов (скидок)
   ПН_СУМ13СИТОГ = ПН_СУМ13С1 + ПН_СУМ13С2 + ПН_СУМ13С3 + ПН_СУМ13С4 + ПН_СУМ13С5 + ПН_СУМ13С6;
   # Итого стандартных вычетов
   ПН_СУММАВИТОГ = ПН_СУММАВ1 + ПН_СУММАВ2 + ПН_СУММАВ3 + ПН_СУММАВ4 + ПН_СУММАВ5;
   # Общая сумма дохода (п. 3.4)
   ПН_СГДСУММ = ПН_СУМ13ДИТОГ;
   # Облагаемая сумма дохода (п. 3.5)
   ПН_ОБЛСУММ = МАКС( ПН_СУМ13ДИТОГ - ПН_СУМ13СИТОГ - ПН_СУММАВИТОГ, 0);
   Перем пСтавка = Найти( ПН_СТАТУСФЛ, "2" ) ? 30 : 13;
   # С доходов ЧП по коду 4800 налог не исчисляется, а только подаются сведения
   Перем пСум4800 = Н = 0;
   Если( Лицо1.ТипЛица == "Частные лица" )
      Пока( Н < 6 )
      {
         Н++;
         Если( ["ПН_К13Д" + Н] == "4800" или ["ПН_К13Д" + Н] == "4900" )
            пСум4800 += ["ПН_СУМ13Д" + Н];
      }
   # Сумма налога исчисленная (п. 3.6)
   ПН_НИОБЛСУММ = Окр( ( ПН_ОБЛСУММ - пСум4800 ) * пСтавка / 100, 1);
   # Сумма налога удержанная (п. 3.7)
   ПН_НУОБЛСУММ = Окр( ПН_НУОБЛСУММ, 1 );
   # Общие суммы (реестр)
   Сумма2 = ПН_ДОХОБЩСУММ = ПН_СГДСУММ + ПН_ДИВСУММ + ПН_ДОХСУММДР + ПН_СУМИМДИТОГ;
   # Общая сумма налога исчисленная (п. 6.1)
   ПН_НИОБЩСУММ = ПН_НИОБЛСУММ + ПН_НИДИВ + ПН_НИОБЛДОХДР;
   # Общая сумма налога удержанная (п. 6.2)
   Сумма = ПН_НУОБЩСУММ = ПН_НУОБЛСУММ + ПН_НУДИВ + ПН_НУОБЛДОХДР;

   # обработчик диалога '2-НДФЛ Итого налога'
   # Долг по налогу
   ПН_ДОЛГНП = ПН_ДОЛГНА = 0;
   Если( ПН_НИОБЩСУММ > ПН_НУОБЩСУММ )
      ПН_ДОЛГНП = ПН_НИОБЩСУММ - ПН_НУОБЩСУММ;
   Иначе
      ПН_ДОЛГНА = ПН_НУОБЩСУММ - ПН_НИОБЩСУММ;
}

Функция Проверка2НДФЛ()
# Проверяет текущий документ 2-НДФЛ и возвращает массив с ошибками и предупреждениями
{
   Объект мОшибки;

   Если( ПН_СУМ13ДИТОГ - ПН_СУМ13СИТОГ != ПН_ДОХОДМЕСИТОГ и !Найти( ПН_СТАТУСФЛ, "2" ) )
      мОшибки.Ошибка.ДоходМес = "Сумма доходов по видам минус вычеты =" + ( ПН_СУМ13ДИТОГ - ПН_СУМ13СИТОГ )
                              + " не равна сумме доходов по месяцам =" + ПН_ДОХОДМЕСИТОГ;

   Если( ПН_НУОБЩСУММ != ПН_НИОБЩСУММ )
      мОшибки.Предупреждение.НУОбщСумм = "Сумма удержанного налога =" + ПН_НУОБЩСУММ
                                     + " не равна сумме исчисленного налога =" + ПН_НИОБЩСУММ;

   перем пОшибок         = Есть( мОшибки.Ошибка ) ? Размер( мОшибки.Ошибка ) : 0;
   перем пПредупреждений = Есть( мОшибки.Предупреждение ) ? Размер( мОшибки.Предупреждение ) : 0;
   Примечание  = пОшибок ? "Ошиб. " + пОшибок + " " : "";
   Примечание += пПредупреждений ? "Пред. " + пПредупреждений : "";
   Вернуть мОшибки;
}

Функция Ошибки2НДФЛ()
# Вызывается по кнопке Ошибки и выводит окно со спискои ошибок
{
   объект мОшибки = Проверка2НДФЛ();
   перем пТип, пПоле;
   ДляВсех( Элементов( мОшибки, пТип ) )
      ДляВсех( Элементов( мОшибки[ пТип ], пПоле ) )
      {
         оОшибки = Выборка( "Ошибки" );
         оОшибки._Тип = пТип;
         оОшибки._Поле = пПоле;
         перем пЗначение = мОшибки[ пТип, пПоле ];
         Пока( пЗначение )
         {
            оОшибки._Комментарий += ПодСтрока( пЗначение, 1, 70 ) + "\n";
            пЗначение = ПодСтрока( пЗначение, 71, -1 );
         }
         Добавить( оОшибки );
      }

   объект оРасшифровкаОшибок = СоздатьДиалог( "Расшифровка ошибок" );
   ВыполнитьДиалог( оРасшифровкаОшибок );
}

Функция Расчет2НДФЛ( оДок, ... )
# Рассчитывает форму 2-НДФЛ, с начала года по указанную дату
# Параметры: оДок (объект) документ, у которого рассчитываются параметры
{
   Если( оДок.ШПЗ != "2-НДФЛ" ) Вернуть 0;
   ВывестиСтатус("Рассчитывается " + оДок.Номер + " " + оДок.Лицо1.Название + "...");
   Если( Флаг( оДок.Состояние, "Закрыт" ) )
   {
      Сообщить("Документ закрыт, изменения не возможны!");
      Вернуть 0;
   }
   # Для того что бы после расчета параметров программа не ругалась: "Значение параметра менялось вручную, сохранить?"
   Очистить( оДок.Параметры );
   # Начальная инициализация и обнуление всех параметров
   Перем Н = 1;
   Пока( Н <= 12 )
   {
      Перем тН = ( Н < 10 ? "0" : "" ) + Н;
      оДок["ПН_К35Д"   + Н] = "";
      оДок["ПН_СУМ35Д" + Н] = 0;
      оДок["ПН_К35С"   + Н] = "";
      оДок["ПН_СУМ35С" + Н] = 0;
      оДок["ПН_КИМД"   + Н] = "";
      оДок["ПН_СУМИМД" + Н] = 0;
      оДок["ПН_ДОХОДМЕС"+тН] = 0;
      оДок["ПН_К13Д"   + Н] = "";
      оДок["ПН_СУМ13Д" + Н] = 0;
      оДок["ПН_К13С"   + Н] = "";
      оДок["ПН_СУМ13С" + Н] = 0;
      оДок["ПН_КОДВ"   + Н] = "";
      оДок["ПН_СУММАВ" + Н] = 0;
      Н++;
   }
   Если( !Есть( оДок.ПН_ОТЧГОД ) ) оДок.ПН_ОТЧГОД = 0;
   Перем пДата = Дата( 31, 12, оДок.ПН_ОТЧГОД ? оДок.ПН_ОТЧГОД : Год( оДок.Дата ) );
   пДата = Мин( пДата, оДок.Дата );
   Если( оДок.Лицо1.ТипЛица == "Сотрудники" )
      Расчет2НДФЛ_Сотр( оДок, пДата );
   Иначе
      Расчет2НДФЛ_ЧЛ( оДок, пДата );
   # Рассчитать итоговые значения и налоги и т.д. тоже в параметры
   оДок.Обработчик2НДФЛ();
   # Проверить ошибки и записать их количество в примечание
   оДок.Проверка2НДФЛ();
   # Сохраняем документ вместе с параметрами
   Сохранить( оДок );
   # Делаем все родные параметры ручными, чтобы они не удалялись при закрытии.
   Если( СделатьПараметрыРучными( оДок ) )
      Сохранить( оДок );
}

Функция Расчет2НДФЛ_Сотр( оДок, пДата )
{
   Перем Н;
   Перем пДатНач = ДатНач = Дата( 1,  1,              Год( пДата ) );
   Перем пДатКнц = ДатКнц = Дата( 31, Месяц( пДата ), Год( пДата ) );
   # СНачГода( пДата ); - не срабатывает
   Перем Г = Год( пДата );
   Перем пМесНач = Месяц( ДатНач );
   Перем пМесКнц = Месяц( ДатКнц );
   Установить( оДок.Лицо1.Лицо_ );
   оДок.ПН_СТАТУСФЛ = Резидент( ДатКнц ) ? "1-Резидент" : "2-Нерезидент" ; # резидентом
   # Доходы по месяцам 13%
   Перем пМес = 1;
   Пока( пМес <= пМесКнц )
   {
      ЗаМесяц( Дата( 1, пМес, Г ) );
      Перем тМес = ( пМес < 10 ? "0" : "" ) + пМес;
      Если( оДок.ПН_СТАТУСФЛ == "1-Резидент" )
         оДок["ПН_ДОХОДМЕС" + тМес] = ЗаПериодРасчета("СДОХ");
      Иначе
         # Для нерезидентов доход по месяцам не заполняется
         оДок["ПН_ДОХОДМЕС" + тМес] = 0;
      пМес++;
   }
   # Доходы по видам (мДоходыПоВид)
   ДатНач = пДатНач; ДатКнц = пДатКнц;
   Объект мДоходыПоВид;
   Очистить( мДоходыПоВид );
   Объект мВидыДоходов; # Временный массив, в нем есть нулевые суммы доходов
   мВидыДоходов.06 = ВидыДоходов06();
   мВидыДоходов.13 = ВидыДоходов();
   мВидыДоходов.35 = ВидыДоходов35();
   мВидыДоходов.ИМ = ВидыДоходовИмущ();
   # Переводим массив мВидыДоходов в мДоходыПоВид, в котором нет нулевых сумм доходов
   Перем пНалСт;
   ДляВсех( Элементов( мВидыДоходов, пНалСт ) )
   {
      # Для нерезидентов все доходы идут в раздел 13 (30%)
      Перем пНалСт1 = пНалСт;
      Если( оДок.ПН_СТАТУСФЛ == "2-Нерезидент" ) пНалСт1 = "13";
      Перем КодДохода;
      ДляВсех( Элементов( мВидыДоходов[ пНалСт ], КодДохода ) )
      {  
         Установить( мВидыДоходов[ пНалСт, КодДохода ] );
         Если( Доход или ( Есть( Вычет ) ? Вычет : 0 ) )
         {
            мДоходыПоВид[ пНалСт1, КодДохода ].Доход += Доход;
            Если( Есть( Вычет ) ? Вычет : 0 )
            {
               мДоходыПоВид[ пНалСт1, КодДохода].КодВычета = КодВычета;
               мДоходыПоВид[ пНалСт1, КодДохода].Вычет    += Вычет;
            }
         }
         Установить();
      }
   }
   # Доходы по видам 06,13,35,ИМ
   оДок.ПН_ДИВСУММ = 0;
   Перем пНалСт;
   ДляВсех( Элементов( мДоходыПоВид, пНалСт ) )
   {
      Н = 1;
      ДляВсех( Элементов( мДоходыПоВид[ пНалСт ], КодДохода ) )
      {
         Установить( мДоходыПоВид[ пНалСт, КодДохода ] )
         Если( пНалСт == "06" ) # Дивиденды не показываются по видам для резидентов
            оДок.ПН_ДИВСУММ += Доход;
         Иначе
         {
            Если( Доход или ( Есть( Вычет ) ? Вычет : 0 ) )
            {
               оДок["ПН_К"  +пНалСт+"Д" + Н] = КодДохода; 
               оДок["ПН_СУМ"+пНалСт+"Д" + Н] = Доход;
               Если( Есть( Вычет ) ? Вычет : 0 )
               {
                  оДок["ПН_К"  +пНалСт+"С" + Н] = КодВычета;
                  оДок["ПН_СУМ"+пНалСт+"С" + Н] = Вычет;
               }
               Н++; 
            }
         }
         Установить();
      }
   }
   Установить( оДок.Лицо1.Лицо_ );
   # Стандартные вычеты
   ДатНач = пДатНач; ДатКнц = пДатКнц;
   Объект мВычетыЗаГод = ВидыВычетов();
   Н = 1;
   ДляВсех( Элементов( мВычетыЗаГод, КодВычета ) )
      Если( мВычетыЗаГод[ КодВычета ]) 
      { 
         оДок["ПН_КОДВ"   + Н] = КодВычета; 
         оДок["ПН_СУММАВ" + Н] = мВычетыЗаГод[ КодВычета ]; 
         Н++; 
      }
   # Сумма налога удержанная
   оДок.ПН_НУОБЛСУММ = оДок.ПН_НУДИВ = оДок.ПН_НУОБЛДОХДР = 0;
   оДок.ПН_НУОБЛСУММ = ЗаПериодРасчета( "ПН+ПН30" );
   оДок.ПН_НУДИВ     = ЗаПериодРасчета( "ПН06" );
   оДок.ПН_НУОБЛДОХДР= ЗаПериодРасчета( "ПН35" );
   # 6.3.Сумма возврата по перерасчету с доходов прошлых лет
   оДок.ПН_ВОЗВРИМНС = -ЗаПериодРасчета( "ПП+ПП30+ПП35+ПП06" );
   # сумма с (-) возврат излишне удержанных сумм налога по заявлению налогоплательщика
   Установить();
}

Функция Расчет2НДФЛ_ЧЛ( оДок, пДата )
{
   Перем Н;
   Перем пДатНач = ДатНач = Дата( 1,  1,              Год( пДата ) );
   Перем пДатКнц = ДатКнц = Дата( 31, Месяц( пДата ), Год( пДата ) );
   # СНачГода( пДата ); - не срабатывает
   Перем Г = Год( пДата );
   Перем пМесНач = Месяц( ДатНач );
   Перем пМесКнц = Месяц( ДатКнц );
   Установить( оДок.Лицо1.Лицо_ );
   оДок.ПН_СТАТУСФЛ = "1-Резидент"; # резидент
   # Доходы по месяцам 13%
   Перем пМес = 1;
   Пока( пМес <= пМесКнц )
   {
      ЗаМесяц( Дата( 1, пМес, Г ) );
      Перем тМес = ( пМес < 10 ? "0" : "" ) + пМес;
      Объект мВидыДоходовМес = ВидыДоходовЧЛ("13");
      Перем КодДохода;
      ДляВсех( Элементов( мВидыДоходовМес, КодДохода ) )
      {  
         оДок["ПН_ДОХОДМЕС" + тМес] += мВидыДоходовМес[ КодДохода ].Доход;
         Если( Есть( мВидыДоходовМес[ КодДохода ].Вычет ) )
            оДок["ПН_ДОХОДМЕС" + тМес] -= мВидыДоходовМес[ КодДохода ].Вычет;
      }
      пМес++;
   }
   # Доходы по видам (мДоходыПоВид)
   ДатНач = пДатНач; ДатКнц = пДатКнц;
   Объект мДоходыПоВид;
   Очистить( мДоходыПоВид );
   мДоходыПоВид.06 = ВидыДоходовЧЛ( "06" );
   мДоходыПоВид.13 = ВидыДоходовЧЛ( "13" );
   мДоходыПоВид.35 = ВидыДоходовЧЛ( "35" );
   мДоходыПоВид.ИМ = ВидыДоходовЧЛ( "ИМ" );
   # Доходы по видам 06,13,35,ИМ
   оДок.ПН_ДИВСУММ = 0;
   оДок.ПН_НУОБЛСУММ = оДок.ПН_НУДИВ = оДок.ПН_НУОБЛДОХДР = 0;
   Перем пНалСт;
   ДляВсех( Элементов( мДоходыПоВид, пНалСт ) )
   {
      Н = 1;
      ДляВсех( Элементов( мДоходыПоВид[ пНалСт ], КодДохода ) )
      {
         Установить( мДоходыПоВид[ пНалСт, КодДохода ] )
         Если( пНалСт == "06" ) # Дивиденды не показываются по видам для резидентов
            оДок.ПН_ДИВСУММ += Доход;
         Иначе
         {
            Если( Доход или ( Есть( Вычет ) ? Вычет : 0 ) )
            {
               оДок["ПН_К"  +пНалСт+"Д" + Н] = КодДохода; 
               оДок["ПН_СУМ"+пНалСт+"Д" + Н] = Доход;
               Если( Есть( Вычет ) ? Вычет : 0 )
               {
                  оДок["ПН_К"  +пНалСт+"С" + Н] = КодВычета;
                  оДок["ПН_СУМ"+пНалСт+"С" + Н] = Вычет;
               }
               Н++; 
            }
         }
         # Сумма налога удержанная
         ВыборПо( пНалСт )
         {
            Выбор "06": оДок.ПН_НУДИВ     += Налог;
            Выбор "13": оДок.ПН_НУОБЛСУММ += Налог;
            Выбор "35": оДок.ПН_НУОБЛДОХДР+= Налог;
            Выбор "ИМ":;# С них налог не удерживается
         }
         Установить();
      }
   }
   Установить();
}

Функция ФормированиеСправок2НДФЛ()
# Вызывается из локального меню реестра ведомостей
# и формирует справки на сотрудников за год
{
   перем пДата = Дата( 01, Месяц( ТекДат ) - 6, Год( ТекДат ) );
   пДата = Дата( 31, 12, Год( пДата ) );
   ЗаГод( пДата );
   # Начальная инициализации корневой папки
   Объект оПапка = Объект("Документ");
   'оПапка.Тип документа' = "Кадры";
   Корень( оПапка, "Папки" );
   Узел( оПапка, "Папки" );
   Найти( оПапка, "Папки" );
   # Начальная инициализация отдела
   Объект оОтдел = Объект( "Сотрудники" );

   Объект оДиалог = СоздатьДиалог( "Выбор папки ведомостей" );
   Связать( оДиалог.Папка, оПапка );
   Если( !ВыполнитьДиалог( оДиалог ) )
      Вернуть 0;
   Если( Есть( оДиалог.Папка ) == 1 ) оПапка = оДиалог.Папка;
   Если( Есть( оДиалог.Отдел ) == 1 ) оОтдел = оДиалог.Отдел;
   
   Перем пКолПарам = 0;
   ДляВсех( Параметров( оПапка ) )
      Если( Подстрока( Запись.Имя, 1, 3 ) == "ПН_" )
         пКолПарам++;
   Если( пКолПарам < 88 )
   {
      Ошибка("На выбранной папке не указаны все параметры (88) из группы НДФЛ, занесите их." );
      Вернуть 0;
   }

   Перем пНовНомер = ДатьНомерДляНумерации( "Ведомость", 'оПапка.Группа нумерации' );
   Лицо = Объект("Сотрудники");
   Пока( Следующий( Лицо, "ФИО" ) )
      Если( СотрИзОтдела( Лицо, оОтдел ) )
      {
         Установить( Лицо );
         Если( ЗаПериодРасчета( "СКИД+Л35+ПН+ПН30+ПН06+ПН35+СДОХ+СД06+СД30+СД35+ИМУЩ" ) )
         {  
            Объект оВедомость;
            оВедомость = Выборка( "Ведомости" );
            оВедомость.Связать( "Папки", оПапка );
            'оВедомость.Группа нумерации' = 'оПапка.Группа нумерации';
            оВедомость.Номер = пНовНомер;
            пНовНомер++;
            оВедомость.Дата = Дата( 01, 01, Год( пДата ) + 1 );
            оВедомость.ПН_ОТЧГОД = Год( пДата );
            оВедомость.ШПЗ = "2-НДФЛ";
            оВедомость.Связать( "Лицо1", Лицо );
            Расчет2НДФЛ( оВедомость );
            Добавить( оВедомость );
         }
         Установить();
      }
}

Функция ФормированиеСправок2НДФЛ_ЧЛ()
# Вызывается из локального меню реестра ведомостей
# и формирует справки на частных лиц за год
{
   перем пДата = Дата( 01, Месяц( ТекДат ) - 6, Год( ТекДат ) );
   пДата = Дата( 31, 12, Год( пДата ) );
   ЗаГод( пДата );
   # Начальная инициализации корневой папки
   Объект оПапка = Объект("Документ");
   'оПапка.Тип документа' = "Кадры";
   Корень( оПапка, "Папки" );
   Узел( оПапка, "Папки" );
   Найти( оПапка, "Папки" );
   # Начальная инициализация отдела
   Объект оРаздел = Объект( "Частные лица" );

   Объект оДиалог = СоздатьДиалог( "Выбор папки ведомостей ЧЛ" );
   Связать( оДиалог.Папка, оПапка );
   Если( !ВыполнитьДиалог( оДиалог ) )
      Вернуть 0;
   Если( Есть( оДиалог.Папка  ) == 1 ) оПапка  = оДиалог.Папка;
   Если( Есть( оДиалог.Раздел ) == 1 ) оРаздел = оДиалог.Раздел;
   
   Перем пКолПарам = 0;
   ДляВсех( Параметров( оПапка ) )
      Если( Подстрока( Запись.Имя, 1, 3 ) == "ПН_" )
         пКолПарам++;
   Если( пКолПарам < 88 )
   {
      Ошибка("На выбранной папке не указаны все параметры (88) из группы НДФЛ, занесите их." );
      Вернуть 0;
   }

   Перем Н = 0;
   Перем пНовНомер = ДатьНомерДляНумерации( "Ведомость", 'оПапка.Группа нумерации' );
   Лицо = Объект("Частные лица");
   Пока( Следующий( Лицо, "ФИО" ) )
      # Все, кого видно в справочнике частных лиц, и не заполнено Свидетельство или ИНН
      Если( ЧастЛицоИзРаздела( Лицо, оРаздел ) и
            ( !ИНН_(Лицо.ИНН) или !Лицо.Свидетельство ) )
      {  
         Установить( Лицо );
         ЗаГод( пДата ); Н++;
         Объект мВидыДоходов = ВидыДоходовЧЛ(""); # По всем видам доходов
         Если( Размер( мВидыДоходов ) )
         {
            Объект оВедомость;
            оВедомость = Выборка( "Ведомости" );
            оВедомость.Связать( "Папки", оПапка );
            'оВедомость.Группа нумерации' = 'оПапка.Группа нумерации';
            оВедомость.Номер = пНовНомер;
            пНовНомер++;
            оВедомость.Дата = Дата( 01, 01, Год( пДата ) + 1 );
            оВедомость.ПН_ОТЧГОД = Год( пДата );
            оВедомость.ШПЗ = "2-НДФЛ";
            оВедомость.Связать( "Лицо1", Лицо );
            Расчет2НДФЛ( оВедомость );
            Добавить( оВедомость );
         }
         Установить();
      }
}
