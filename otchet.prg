# Функции для построения отчетов

Функция НачМес( Дата )
# Возвращает дату начала указанного месяца,
# для нулевой даты возвращает нулевую дату
{
   Если(Дата)
      Вернуть Дата( 1, Месяц( Дата ), Год( Дата ) );
   Иначе
      Вернуть 00.00.00;
}  

Функция КнцМес( Дата )
# Возвращает дату конца указанного месяца,
# для нулевой даты возвращает нулевую дату
{
   Если(Дата)
      Вернуть Дата( 31, Месяц( Дата ), Год( Дата ) );
   Иначе
      Вернуть 00.00.00;
}  

Функция СохранитьДаты()
# Сохраняет период ДатНач и ДатКнц
{
   .пДатНач = ДатНач;
   .пДатКнц = ДатКнц;
}

Функция ВосстановитьДаты()
# Восстанавливает период ДатНач и ДатКнц, ранее сохраненный функцией СохранитьДаты()
{  
   ДатНач = пДатНач;
   ДатКнц = пДатКнц;
}

Функция ПериодНарастающим(ДатаКнц)
# Предназначена для формирования названия периода для квартальных отчетов
# Параметры:  ДатаКнц - дата от которой просматривается период
# Возвращает: строку с названием периода отчета и устанавливает
# ДатНач, ДатКнц
{
   Перем Год, Месяц, Период;
   Год    = Год(ДатаКнц) + " г.";
   ДатНач = Дата("01.01." + Год);
   Месяц  = Месяц(ДатаКнц);
   Если(Месяц < 4)
   {
      Период = "за I квартал " + Год;
      ДатКнц = Дата("31.03." + Год);
   }
   Иначе
      Если(Месяц < 7)
      {
         Период = "за I полугодие " + Год;
         ДатКнц = Дата("31.06." + Год);
      }
      Иначе
         Если(Месяц < 10)
         {
            Период = "за 9 месяцев " + Год;
            ДатКнц = Дата("31.09." + Год);
         }
         Иначе
         {
            Период = "за год " + Год;
            ДатКнц = Дата("31.12." + Год);
         }
   Вернуть Период;
}

Функция ПериодОтчета(Период, НаростающийИтог, ДатаКнц)
# Предназначена для формирования названия периода в отчетах
# Параметры:  Период (тип: строка) - период отчета. Допустимые значения: 
#                                               месяц, квартал, полугодие, год
#             НаростающийИтог (тип: число) - "0" - ненаростающим итогом; 
#                                            "1" - наростающий итог. 
#             ДатКнц (тип: дата) - дата от которой просматривается период  
# Возвращает: строку с названием периода отчета и устанавливает
#             ДатНач и ДатКнц
{
   Перем ПериодОтчета;
   Период = Вверх(Период);
   ВыборПо( Период ) # установка ДатНач и ДатКнц 
   { 
      Выбор "МЕСЯЦ":
      { 
         Если( !НаростающийИтог )
         { 
            Замесяц(ДатаКнц);
            ПериодОтчета = "за " + МесяцПрописью(ДатКнц)+ " " + Год(ДатКнц) + " г.";
         }
         Иначе
            Ошибка("Отчет не может строиться наростающим итогом при периоде расчета МЕСЯЦ"); 
      } 
      Выбор "КВАРТАЛ":
      {
         ЗаКвартал(ДатаКнц);
         ПериодОтчета = "за " + Квартал(ДатКнц);
      }
      Выбор "ПОЛУГОДИЕ":
      {
         Если( Месяц(ДатаКнц) < 7 ) # первое полугодие
         {
            ДатНач = Дата( 1,  1, Год(ДатКнц) );
            ДатКнц = Дата( 30, 6, Год(ДатКнц) ); 
            ПериодОтчета = "за I полугодие " + Год(ДатКнц) + "г.";
         } 
         Иначе # второе полугодие
         {
            ДатНач = Дата(1,  7,  Год(ДатКнц));
            ДатКнц = Дата(31, 12, Год(ДатКнц)); 
            ПериодОтчета = "за II полугодие " + Год(ДатКнц) + "г.";
         }
      }
      Выбор "ГОД":
      {
         ЗаГод(ДатаКнц);
         ПериодОтчета = "за " + Год(ДатКнц) + "г.";
      }
      Иначе
         Ошибка( "Период отчета указан не верно" );
    }    
    Если( НаростающийИтог ) # период наростающим итогом с начала года
    {  
       ДатНач = Дата( 1, 1, Год(ДатКнц) );
       ПродолжительностьПериода = Месяц(ДатКнц) - Месяц(ДатНач) + 1;
       ВыборПо( ПродолжительностьПериода ) # в месяцах
       { 
          Выбор  6: ПериодОтчета = "за I полугодие " + Год(ДатКнц) + " г.";
          Выбор  9: ПериодОтчета = "за 9 месяцев " + Год(ДатКнц) + " г.";
          Выбор 12: ПериодОтчета = "за " + Год(ДатКнц) + " г.";
       }
    }
    Вернуть( ПериодОтчета );
}

Функция ПроверитьКонстанту( Имя, ПолноеИмя, Значение, ...)
# Проверяет существование константы с заданным именем,
# в случае отсутствия таковой создает ее, спрашивая значение
# у пользователя (предлагая при этом рекомендуемое значение)
# Возвращает :
#      0 - константа ранее не существовала
#      1 - константа ранее существовала
# ПроверитьКонстанту( Имя, ПолноеИмя, Значение[,ИмяРаздела[,ПолноеИмяРаздела]] )
# Параметры:
#    Имя              - краткое имя проверяемой константы
#    ПолноеИмя        - полное имя проверяемой константы (Название)
#    Значение         - значение константы, устанавливаемое по умолчанию
#    ИмяРаздела       - имя раздела констант, куда нужно поместить константу
#                       (содержит имена всех разделов, перечисленых через точку) 
#    ПолноеИмяРаздела - полное имя раздела констант, куда нужно поместить константу
#                       (содержит полные имена всех разделов, перечисленых через точку) 
#
# Если указано ИмяРаздела, то константа помещается в него
# если раздела с таким именем нет, то он создается
# если ИмяРаздела не указано, то константа помещается в корневой раздел.
{
   Перем ПроверитьКонстанту, ИмяРаздела, ПолноеИмяРаздела, ИмяПуть, ПолноеИмяПуть;
   Если( !Есть([Имя]) )
   {
      ИмяРаздела       = Есть(Параметры[1]) ? Параметры[1] : "";
      ПолноеИмяРаздела = Есть(Параметры[2]) ? Параметры[2] : ИмяРаздела;
      ИмяПуть          = (ИмяРаздела ? ИмяРаздела + "." : "") + Имя;
      ПолноеИмяПуть    = (ПолноеИмяРаздела ? ПолноеИмяРаздела + "." : "") + ПолноеИмя;
      [Имя]            = Значение;
      Спросить( "" + ПолноеИмя, [Имя] );
      СохранитьКонстанту(ИмяПуть, [Имя], ПолноеИмяПуть);
      ПроверитьКонстанту = 0;
   }
   Иначе
      ПроверитьКонстанту = 1;
   Вернуть ПроверитьКонстанту;
}

Функция СокращениеАдреса(Реквизит)
# Возвращает краткое сокращение реквизита адреса, указанного до разделителя ".",
# если разделителя нет возвращает ""
{
   Если( Найти(Реквизит, ".") )
      Вернуть( ПодСтрока(Реквизит, 1, Найти(Реквизит, ".") - 1) );
   Иначе
      Вернуть("");
}

Функция НазваниеАдреса(Реквизит)
# Возвращает название реквизита адреса, указанное значение после разделителя ".",
# если разделителя нет возвращает
{
   Если( Найти(Реквизит, ".") )
      Вернуть(ПодСтрока(Реквизит, Найти(Реквизит, ".") + 1, -1));
   Иначе
      Вернуть(Реквизит);
}

Функция ПроверитьСокращение(Адрес)
# Проверка сокращения адреса на допустимое значение
{
   Перем Сокращения, Результат, сокр, пОшибка;
   пОшибка = "";
   Результат = 1;
#  #Закомментировано для персучета 4.0
#   Сокр = СокращениеАдреса(Адрес);
#   Если(Сокр)
#   {
#      Сокращения1 = ",А/П,АЛ,АО,АОБЛ,АУЛ,Б/О,Б-Р,БРИГАДА,БУГОР,БУДКА,БУХТА,ВАГОН,ВАЛ,ВЛД,ВОЛ,ВЪЕЗД,ВЫСЕЛ,Г,ГАРАЖ,ГК,ГОРОДОК,Д,Д/И,ТЕР,Д/О,ДВОР,ДД,ДЕПО,ДОР,ДП,ДСК,ЕРИК,Ж/Д БУДКА,Ж/Д КАЗАРМ,Ж/Д ОБП,Ж/Д ОП,Ж/Д РЗД,Ж/Д СТ,ЖТ,ЗАЕЗД,ЗАИМ,ЗАСТ,ЗАУЛОК,З-Д,ЗО,И/З,"
#      Сокращения2 = ",КАЗАРМА,КАНАЛ,КАРЬЕР,КВ-Л,КИШЛАК,КЛХ,КМ,КОЛЬЦО,КОРДОН,КОШАРА,КП,КРАЙ,ЛЕСН-ВО,ЛЕСХОЗ,ЛИНИЯ,ЛОГ,М,М/С,МАССИВ,МАЯК,МКР,МО,МОСТ,МЫС,НАБ,НП,ОБЛ,ОБЩ,ОВРАГ,ОЗЕ,О,ОСТРОВ,ОТАРА,ОТД,П,П/Л,П/О,П/Р,П/СВХ,П/СТ,П/СТАНОК,ПАДЬ,ПАНС,ПАРК,ПГТ,ПЕР,";
#      Сокращения3 = ",ПЕРЕЕЗД,ПЗ,ПИКЕТ,ПИТ,ПЛ,ПЛАТФ,ПЛ-КА,П-ОВ,ПОДСТ,ПОДЪЕМ,ПОЙМА,ПОЛЕ,ПОРТ,ПОСТ,ПОЧИНОК,ПР,ПРИИСК,ПР-КТ,ПРОСЕК,ПРОСЕЛОК,ПРОУЛОК,ПРОФ,ПУТЬ,ПХ,РАЗРЕЗ,РЕКА,РЕМБАЗА,РЕСП,РЕЧКА,РЗД,Р-Н,РОВ,РП,РУДНИК,РЫНОК,РЯД,РЯДЫ,С,САД,САН,САН-ПРОФ,СВХ,СДТ,";
#      Сокращения4 = ",СКВЕР,СЛ,СООРУЖ,СПУСК,СТ,СТАДИОН,СТОРОЖКА,СТР,СТ-ЦА,СЪЕЗД,Т/Б,ТЕР,ТРАКТ,ТУП,У,УЛ,УР-ЩЕ,УСАДЬБА,УЧ-К,УЧХОЗ,ФАКТОРИЯ,ФЕРМА,Х,Х-ВО,ЦО,ЦУ,ЦУ ПХ,ЦУ СВХ,ЦУ ТОО,Ш,ШАХТА,";
#      Если( !Найти(Сокращения1,   "," + Сокр + ",")
#            и !Найти(Сокращения2, "," + Сокр + ",")
#            и !Найти(Сокращения3, "," + Сокр + ",")
#            и !Найти(Сокращения4, "," + Сокр + ",") )
#      {
#         Результат = 0;
#         пОшибка = "Для " + Название + " используется недопустимое сокращение адреса " + Сокр + ".";
#      }
#   }
#   Иначе
#   {
#      Результат = 0;
#      пОшибка = "Для " + Название + " не указаны сокращения адреса";
#   }
#   Если( пОшибка )
#   {
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе          
#         Сообщить( пОшибка );
#   }
   Вернуть(Результат);
}

# Следующие функции для получения адресных данных
Функция рГород(...)
# рГород( [Адрес] )
# Возвращает название города из поля "Место рождения" или из указанного Адреса
# Данные о месте рождения указываются в порядке Город,Район,Область,Страна
{
   перем фРождение, рГород, рРайон, рОбласть, рСтрана, пОшибка;
   фРождение = Есть(Параметры[1]) ? Параметры[1] : 'Место рождения';
   Разбить(Вверх(фРождение), ",", рГород, рРайон, рОбласть, рСтрана);
#   ПроверитьСокращение(рГород);
#   Если( !рГород )
#   {
#      пОшибка = "Для " + Название + " не заполнено название населенного пункта места рождения";
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе 
#         Сообщить( пОшибка );
#   }
   рГород = НазваниеАдреса(рГород);
   Вернуть( Текст(рГород) );
}

Функция рРайон(...)
# рРайон( [Адрес] )
# Возвращает название района из поля "Место рождения" или из указанного Адреса
# Данные о месте рождения указываются в порядке Город,Район,Область,Страна
{
   перем фРождение, рГород, рРайон, рОбласть, рСтрана;
   фРождение = Есть(Параметры[1]) ? Параметры[1] : 'Место рождения';
   Разбить( Вверх(фРождение), ",", рГород, рРайон, рОбласть, рСтрана );
   Вернуть( Текст(рРайон) );
}

Функция рОбласть(...)
# рОбласть( [Адрес] )
# Возвращает название области из поля "Место рождения" или из указанного Адреса
# Если сокращение области не указано, то добавляет к
# названию области строку " ОБЛАСТЬ"
# Используется для персонифицированного учета в ПФ 3.0
{
   перем фРождение, рГород, рРайон, рОбласть, рСтрана, рНазвОбласти, рСокрОбласти;
   фРождение = Есть(Параметры[1]) ? Параметры[1] : 'Место рождения';
   Разбить( Вверх(фРождение), ",", рГород, рРайон, рОбласть, рСтрана );
   Разбить( рОбласть, " ", рНазвОбласти, рСокрОбласти );
   Если( рОбласть и ( !рСокрОбласти или рСокрОбласти == "ОБЛ" ) )
      рОбласть = рНазвОбласти + " ОБЛАСТЬ";
   Вернуть фРождение ? Текст( рОбласть ) : "";
}

Функция рСтрана(...)
# рСтрана( [Адрес] )
# Возвращает название страны из поля "Место рождения" или из указанного Адреса
# Если страна РОССИЯ, то возвращает пустое значение
# Используется для персонифицированного учета в ПФ 3.0
{
   перем фРождение, рГород, рРайон, рОбласть, рСтрана;
   фРождение = Есть(Параметры[1]) ? Параметры[1] : 'Место рождения';
   Разбить( Вверх(фРождение), ",", рГород, рРайон, рОбласть, рСтрана );
   Если( рСтрана == "РОССИЯ" )
      Вернуть "";
   Иначе 
      Вернуть Текст( рСтрана );
}

Функция Фамилия(...)
# Фамилия( [ФИО] )
# Возвращает фамилию из поля "ФИО" или из указанного параметра
{
   перем фФИО, Фамилия, ИмяСотр, Отчество, пОшибка;
   фФИО = Есть(Параметры[1]) ? Параметры[1] : ФИО;
   Если( Подстрока( фФИО, 1, 3 ) == "ЧП " )          фФИО = Подстрока( фФИО, 4, -1 );
   Иначе Если( Подстрока( фФИО, 1, 6 ) == "ПБОЮЛ " ) фФИО = Подстрока( фФИО, 7, -1 );
   Разбить( Вверх(фФИО), " ", Фамилия, ИмяСотр, Отчество );
   Вернуть(Текст(Фамилия));
}

Функция ИмяСотр(...)
# ИмяСотр( [ФИО] )
# Возвращает имя из поля "ФИО" или из указанного параметра
{
   перем фФИО, Фамилия, ИмяСотр, Отчество, пОшибка;
   фФИО = Есть(Параметры[1]) ? Параметры[1] : ФИО;
   Если( Подстрока( фФИО, 1, 3 ) == "ЧП " )          фФИО = Подстрока( фФИО, 4, -1 );
   Иначе Если( Подстрока( фФИО, 1, 6 ) == "ПБОЮЛ " ) фФИО = Подстрока( фФИО, 7, -1 );
   Разбить( Вверх(фФИО), " ", Фамилия, ИмяСотр, Отчество );
   Вернуть( Текст(ИмяСотр) );
}

Функция Отчество(...)
# Отчество( [ФИО] )
# Возвращает отчество из поля "ФИО" или из указанного параметра
{
   перем фФИО, Фамилия, ИмяСотр, Отчество, Отчество2, пОшибка;
   фФИО = Есть(Параметры[1]) ? Параметры[1] : ФИО;
   Если( Подстрока( фФИО, 1, 3 ) == "ЧП " )          фФИО = Подстрока( фФИО, 4, -1 );
   Иначе Если( Подстрока( фФИО, 1, 6 ) == "ПБОЮЛ " ) фФИО = Подстрока( фФИО, 7, -1 );
   Разбить( Вверх(фФИО), " ", Фамилия, ИмяСотр, Отчество, Отчество2 );
   # Отчество может быть из 2 слов, например, Таляд Оглы - это отчество
   Если( Отчество2 )
      Отчество += " " + Отчество2;
   Вернуть Текст( Отчество );
}              

Функция _Пол(...)
# _Пол( [Пол] )
# Возвращает первую букву пола из поля "Пол" или указанного параметра
{
   перем фПол;
   фПол = Есть( Параметры[1] ) ? Параметры[1] : Пол;
   Вернуть( Вверх( ПодСтрока(фПол, 1, 1) ) );
}

# Функции для подготовка данных по адресу прописки
Функция Индекс(...)
# Индекс( [Адрес] )
# Возвращает индекс из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Индекс = Число(Индекс);
   Вернуть( Текст(Индекс == 0 ? "" : Индекс) );
}

Функция чИндекс(...)
# чИндекс( [Адрес] )
# Возвращает индекса (строка) из поля "Адрес" или из указанного параметра
# если индекс не заполнен возвращает строку "0"
{
   перем Результат;
   Результат = Есть( Параметры[1] ) ? Индекс(Параметры[1]) : Индекс();
   Вернуть(Результат ? Результат : "0");
}

Функция Город(...)
# Город( [Адрес] )
# Возвращает город из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
# Преобразует город из формата сокращение + "." + название
# в формат название + " " + сокращение,
# если сокращение "Г" не указано, то добавляет его.
# Используется для формата в налоговую
{
   перем фАдрес, Сокращения, Сокращение, Индекс, Город, Улица, Дом, Квартира, Область, Район, пПункт;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Если( Найти( Город, "\\" ) )
      Разбить( Город, "\\", Город, пПункт );
   Перем НазвГорода = НазваниеАдреса(Город);
   Перем СокрГорода = СокращениеАдреса(Город);
   # Для Москвы и Питера, название города указывается в названии области (региона)
   Если( НазвГорода == "МОСКВА" или 
         НазвГорода == "САНКТ-ПЕТЕРБУРГ" )
      Вернуть "";
   Если( СокрГорода == "Г" )
      Вернуть НазвГорода + " " + СокрГорода;
   Иначе
   {
      Если( НазвГорода и !СокрГорода )
         Вернуть НазвГорода + " Г";
      Иначе
      {
         ПроверитьСокращение( Город );
         Вернуть( "" );
      }
   }
}

Функция ГородПФ(...)
# Город( [Адрес] )
# Возвращает город из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
# Реквизит город возвращается в том виде как есть, например "г.Ярославль"
# Используется для формата в ПФ
{
   перем фАдрес, Индекс, Город, Пункт , Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Город, "\\", Город, Пункт );
   Вернуть( Текст(Город) );
}

Функция Пункт(...)
# Пункт( [Адрес] )
# Возвращает пункт из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
# Преобразует пункт из формата сокращение + "." + название
# в формат название + " " + сокращение.
# Используется для формата в налоговую
{
   перем фАдрес, Сокращения, Сокращение, Индекс, Город, пПункт, Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить(Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район);
   Если( Найти(Город, "\\") )
      Разбить( Город, "\\", Город, пПункт );
   Иначе
      пПункт = Город;
   Если( (СокращениеАдреса(пПункт) == "Г") или (СокращениеАдреса(пПункт) == "") )
      Вернуть("");
   Иначе
   {
      ПроверитьСокращение(пПункт);
      Вернуть( НазваниеАдреса(пПункт) + " " + СокращениеАдреса(пПункт) );
   }
}

Функция ПунктПФ(...)
# ПунктПФ( [Адрес] )
# Возвращает пункт из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
# Реквизит пункт возвращается в том виде как есть, например "д.Гадюкино"
# Используется для формата в ПФ
{
   перем фАдрес, Индекс, Город, Пункт , Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Город, "\\", Город, Пункт );
   Вернуть( Текст(Пункт) );
}

Функция Улица(...)
# Улица( [Адрес] )
# Возвращает улицу из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
# Преобразует название улицы до разделителя "/" из формата
# сокращение + "." + название в формат название + " " + сокращение.
# Используется для формата в налоговую
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Улица, "/", Улица );
   Если( СокращениеАдреса(Улица) != "" )
   {
      ПроверитьСокращение(Улица);
      Вернуть( Текст(НазваниеАдреса(Улица) + " " + СокращениеАдреса(Улица)) );
   }
   Иначе
      Если (НазваниеАдреса(Улица) != "" )
         Вернуть( Текст(НазваниеАдреса(Улица) + " УЛ") );
      Иначе
         Вернуть("")
}

Функция УлицаПФ(...)
# УлицаПФ( [Адрес] )
# Возвращает улицу из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
# Возвращает название улицы после разделителя "/" или весь,
# при отсутствии разделителя
# Используется для формата в ПФ
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Если( Найти(Улица, "/")) Разбить( Улица, "/", Улица, Улица );
   Вернуть( Текст(Улица) );
}

Функция Дом(...)
# Дом( [Адрес] )
# Возвращает дом из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район, пОшибка;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Дом, "-", Дом);
#   Если(ПодСтрока(Дом, 1, 1) == "Д")
#   {
#      пОшибка = "Для " + Название + " не правильно указан номер дома";
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе 
#         Сообщить( пОшибка );
#   }
   Вернуть( Текст(Дом) );
}

Функция Корпус(...)
# Корпус( [Адрес] )
# Возвращает корпус дома из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район, пОшибка;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Дом, "-", Дом, Дом);
#   Если( Найти(Дом, "К") )
#   {
#      пОшибка = "Для " + Название + " не правильно указан корпус";
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе
#         Сообщить( пОшибка );
#   }
   Вернуть( Текст(Дом) );
}

Функция Квартира(...)
# Квартира( [Адрес] )
# Возвращает квартиру из поля "Адрес" или из указанного параметра
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],Квартира,Код района/Название области,Район
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район, пОшибка;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
#   Если( Найти(Квартира, "К") )
#   {
#      пОшибка = "Для " + Название + " не правильно указана квартира";
#      Если( Есть( мОшибки ) )  мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе                    Сообщить( пОшибка );
#   }
   Вернуть( Текст(Квартира) );
}

Функция Область(...)
# Область( [Адрес] )
# Возвращает название региона из адреса,
# например Ярославская обл, Коми Республика, и т.д.
# если название не содержит сокращенного названия, то добавляет в конец сокращение " ОБЛ"
{
   Текст фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район, Код, НазвОбласти, СокрОбласти;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   # Для Москвы и Питера, название города указывается в названии области (региона)
   Если( Найти( Город ,   "МОСКВА" ) )          Вернуть "МОСКВА Г"; 
   Если( Найти( Город ,   "САНКТ-ПЕТЕРБУРГ" ) ) Вернуть "САНКТ-ПЕТЕРБУРГ Г"; 
   Если( Найти( Область , "МОСКВА" ) )          Вернуть "МОСКВА Г"; 
   Если( Найти( Область , "САНКТ-ПЕТЕРБУРГ" ) ) Вернуть "САНКТ-ПЕТЕРБУРГ Г"; 
   Разбить( Область, "/", Область, Код );
   Разбить( Область, " ", НазвОбласти, СокрОбласти );
   Если( Область и !СокрОбласти )
      Область += " ОБЛ";
   Вернуть Область;
}

Функция ОбластьПФ(...)
# ОбластьПФ( [Адрес] )
# Возвращает название области после разделителя "/",
# если реквизит не заполнен возвращает значение константы пфОбласть
# Используется для формата в ПФ
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Если( Найти( Область, "/") )
      Разбить( Область, "/", Область, Область );
   ПроверитьКонстанту("пфОбласть", "Название области в отчетах ПФ, если не заполненно в адресе сотрудника", "ЯРОСЛАВСКАЯ");
   Область = Область ? Область : пфОбласть;
   Если( Область и !Найти(Область, "ОБЛ") )
      Область += " ОБЛ";
   Вернуть(фАдрес ? Текст(Область) : "");
}

#Функция КодРегиона(...)
## КодРегиона( [Адрес] )
## Возвращает код региона (76) после разделителя "/",
## если реквизит не заполнен возвращает значение константы пнКодРегиона
## Используется для формата в налоговую
#{
#   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Код, Район;
#   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
#   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
#   Разбить( Область, "/", Область, Код );
#   ПроверитьКонстанту("пнКодРегиона", "Код региона в отчетах ПН, если не заполнен в адресе сотрудника", "76");
#   Вернуть( фАдрес ? Текст(Код ? Код : пнКодРегиона) : "" );
#}

Функция Район(...)
# Район( [Адрес] )
# Возвращает название района, если параметр не содержит "Р-Н", добавляет сокращение
# Используется для формата в ПФ
{
   перем фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Район;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : Адрес;
   Разбить( Вверх(фАдрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Если( Найти( Город, "ЯРОСЛАВЛЬ" ) или
         Найти( Город, "МОСКВА" ) или 
         Найти( Город, "САНКТ-ПЕТЕРБУРГ" ) ) Вернуть ""; # Для районнных центров не нужно указывать район
   Если( Район и !Найти(Район, "Р-Н") )
      Район += " Р-Н";
   Вернуть Текст( Район );
}

Функция АдресПФ(...)
# Для формата ПЕРСА 4.0
# АдресПФ( [Адрес] )
# Возвращает строку: [регион,] [район,] город, [населенный пункт,] улица, Д.дом [, КОРП.корпус], КВ.квартира
# для региональных (районных) центров регион (район) может не указываться
# Используется для формата в ПФ
{
   перем фАдрес, пАдрес, пСтр;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   пАдрес = Область(фАдрес) + ","
          + Район(фАдрес) + ","
          + Город(фАдрес) + "," 
          + Пункт(фАдрес) + ","
          + Улица(фАдрес) + ",";
   пСтр = Дом( фАдрес );      пАдрес += ( пСтр ? "Д."    + пСтр : "" ) + ",";
   пСтр = Корпус( фАдрес );   пАдрес += ( пСтр ? "КОРП." + пСтр : "" ) + ",";
   пСтр = Квартира( фАдрес ); пАдрес += ( пСтр ? "КВ."   + пСтр : "" );
   Вернуть( пАдрес );
}

Функция АдресПФ3(...)
# Для формата ПЕРСА 3.0
# АдресПФ( [Адрес] )
# Возвращает строку: [регион,] [район,] город, [населенный пункт,] улица, Д.дом [, КОРП.корпус], КВ.квартира
# для региональных (районных) центров регион (район) может не указываться
# Используется для формата в ПФ
{
   перем фАдрес, пАдрес, пСтр;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   пАдрес = "";
   Если( пСтр = Область(фАдрес) )  пАдрес += ", " + пСтр;
   Если( пСтр = Район(фАдрес) )    пАдрес += ", " + пСтр;
   Если( пСтр = Город(фАдрес) )    пАдрес += ", " + пСтр;
   Если( пСтр = Пункт(фАдрес) )    пАдрес += ", " + пСтр;
   Если( пСтр = Улица(фАдрес) )    пАдрес += ", " + пСтр;
   Если( пСтр = Дом(фАдрес) )      пАдрес += ", Д." + пСтр;
   Если( пСтр = Корпус(фАдрес) )   пАдрес += ", КОРП." + пСтр;
   Если( пСтр = Квартира(фАдрес) ) пАдрес += ", КВ." + пСтр;
   Вернуть Подстрока( пАдрес, 3, -1 );
}

Функция КодСтраны(...)
# Возвращает 643
{
   Вернуть("643");
}

# Подготовка данных по фактическому адресу
# Данные указываются в порядке Индекс,Город\Пункт,Улица/УлицаПФ,Дом[-Корпус],
# Квартира,Код района/Название области,Район
# Функции возвращают значение реквизита из поля "Фактический адрес" или из параметра функции.
# Набор функций аналогичен адресу по прописке
# Используются для формата в ПФ
Функция фИндекс(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Индекс(фАдрес) );
}                         

Функция чфИндекс(...)
{
   перем Результат;
   Результат = Есть(Параметры[1]) ? фИндекс( Параметры[1] ) : фИндекс;
   Вернуть( Результат ? Результат : "0" );
}

Функция фГород(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Город(фАдрес) );
}

Функция фГородПФ(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( ГородПФ(фАдрес) );
}

Функция фПункт(...)
{
   перем фАдрес;
   фАдрес = Есть(Параметры[1]) ? Параметры[1] : 'Место жительства';
   Вернуть( Пункт(фАдрес) );
}

Функция фПунктПФ(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( ПунктПФ(фАдрес) );
}

Функция фУлица(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Улица(фАдрес) );
}

Функция фУлицаПФ(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( УлицаПФ(фАдрес) ); 
}

Функция фДом(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Дом(фАдрес) );
}

Функция фКорпус(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Корпус(фАдрес) );
}

Функция фКвартира(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Квартира(фАдрес) );  
}

Функция фОбласть(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Область(фАдрес) );
}                 

Функция фОбластьПФ(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( ОбластьПФ(фАдрес) );
}                               

Функция фРайон(...)
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( Район(фАдрес) );       
}

Функция фАдресПФ(...)
# Для версии ПЕРСА 4.0
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( АдресПФ(фАдрес) );
}

Функция фАдресПФ3(...)
# Для версии ПЕРСА 3.0
{
   перем фАдрес;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : 'Место жительства';
   Вернуть( АдресПФ3(фАдрес) );
}

# Функции для подготовки паспортных данных
# Данные указываются в порядке Серия,Номер,Кем выдан,Когда выдан, Вид документа
# Функции возвращают по умолчанию значения из поля "Паспорт" или
# из параметра функции.
Функция Серия(...)
# Возвращает серию документа, удостоверяющего личность
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокумента;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ВидДокумента );
   Вернуть( Текст(Серия) );
}

Функция Номер(...)
# Возвращает номер документа, удостоверяющего личность
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокумента;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ВидДокумента );
   Вернуть( Номер);
}

Функция Кем(...)
# Возвращает кем выдан документ, удостоверяющий личность
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокумента;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ВидДокумента );
   Вернуть(Кем);
}

Функция Когда(...)
# Возвращает дату выдачи документа, удостоверяющего личность
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокумента, пОшибка;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ВидДокумента );
   Когда = Дата( Текст(Когда,"л") );
#   Если( !Когда )
#   {
#      пОшибка = "Для " + ФИО + " не заполнена дата выдачи документа";
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе
#         Сообщить( пОшибка );
#   }
   Вернуть Дата( Когда );
}

Функция ВидДокумента(...)
# Возвращает код вида документа, удостоверяющего личность
# Если реквизит не заполнен возвращает "01"
# Используется для налоговой и др.
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокумента, Код, пТекст, пОшибка;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ВидДокумента );
   Очистить(мВидДокумента);
   пКод = "";
   мВидДокумента["02"] = "ЗАГРАНПАСПОРТ ГРАЖДАНИНА СССР"
   мВидДокумента["03"] = "СВИДЕТЕЛЬСТВО О РОЖДЕНИИ"
   мВидДокумента["04"] = "УДОСТОВЕРЕНИЕ ЛИЧНОСТИ"
   мВидДокумента["05"] = "СПРАВКА ОБ ОСВОБОЖДЕНИИ"
   мВидДокумента["06"] = "ПАСПОРТ МИНМОРФЛОТА"
   мВидДокумента["07"] = "ВОЕННЫЙ БИЛЕТ"
   мВидДокумента["09"] = "ДИПЛОМАТИЧЕСКИЙ ПАСПОРТ РФ"
   мВидДокумента["10"] = "ИНОСТРАННЫЙ ПАСПОРТ"
   мВидДокумента["11"] = "СВИДЕТЕЛЬСТВО О РЕГИСТРАЦИИ"
   мВидДокумента["12"] = "ВИД НА ЖИТЕЛЬСТВО"
   мВидДокумента["13"] = "УДОСТОВЕРЕНИЕ БЕЖЕНЦА В РФ"
   мВидДокумента["14"] = "ВРЕМЕННОЕ УДОСТОВЕРЕНИЕ ЛИЧНОСТИ РФ"
   мВидДокумента["21"] = "ПАСПОРТ ГРАЖДАНИНА РФ"
   мВидДокумента["22"] = "ЗАГРАНПАСПОРТ ГРАЖДАНИНА РФ"
   мВидДокумента["26"] = "ПАСПОРТ МОРЯКА"
   мВидДокумента["27"] = "ВОЕННЫЙ БИЛЕТ ОФИЦЕРА ЗАПАСА"
   мВидДокумента["91"] = "ИНЫЕ ДОКУМЕНТЫ"
   ДляВсех( Элементов(мВидДокумента, Код) )
      Если( Найти(ВидДокумента, мВидДокумента[Код]) )
         ВидДокумента = пКод = Код;
   Если(!пКод)
      ВидДокумента = пКод = "01";
#   Если(!пКод)
#   {
#      пОшибка = "Для лица " + ФИО + " не правильно заполнен реквизит ВидДокумента. Выберете правильное значение из предлагаемого списка клавишей стрелка вверх";
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе
#         Сообщить( пОшибка );
#      ВидДокумента = "";
#   }
   Вернуть(фПаспорт ? ВидДокумента : "");
}

Функция ВидДокументаНаим(...)
# Возвращает название вида документа, удостоверяющего личность
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокумента;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( фПаспорт, ",", Серия, Номер, Кем, Когда, ВидДокумента );
   Вернуть( фПаспорт ? ВидДокумента : "" );
}

Функция ВидДокПФ(...)
# Возвращает "ПАСПОРТ" или "ПРОЧЕЕ", в зависимости от вида документа, удостоверяющего личность
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ВидДокПФ;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ВидДокПФ );
   ВидДокПФ = (ВидДокПФ == "ПАСПОРТ"
               или ВидДокПФ == "ПАСПОРТ ГРАЖДАНИНА СССР"
               или ВидДокПФ == "ПАСПОРТ ГРАЖДАНИНА РФ"
               или !ВидДокПФ) ? "ПАСПОРТ" : "ПРОЧЕЕ";
   Вернуть( фПаспорт ? ВидДокПФ : "" );
}

Функция ТипДокПФ(...)
# Возвращает название вида документа, удостоверяющего личность
# если ВидДокПФ не "ПАСПОРТ", а если "ПАСПОРТ", возвращает ""
{
   перем фПаспорт,Серия, Номер, Кем, Когда, ТипДокПФ;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", Серия, Номер, Кем, Когда, ТипДокПФ );
   Если( ВидДокПФ(фПаспорт) == "ПАСПОРТ" )
      Вернуть("");
   Иначе
      Вернуть(фПаспорт ? ТипДокПФ : "");
}

Функция КодНИ(...)
# КодНИ( [ИНН] )
# Возвращает код налоговой инспекции по ИНН
{
   перем фИНН;
   фИНН = Есть( Параметры[1] ) ? Параметры[1] : ИНН;
   Вернуть( ПодСтрока(Вверх(фИНН), 1, 4) );
}

Функция ТекстЦВд
# возвращает строку "должность"
# Используется в конце отчетов
{
   Формат( ТекстЦВд,"Текст ц В" );
   Вернуть("должность");
}

Функция ТекстЦВп
# возвращает строку "подпись"
# Используется в конце отчетов
{
   Формат( ТекстЦВп,"Текст ц В" );
   Вернуть("подпись");
}

Функция ТекстЦВр
# возвращает строку "расшифровка"
# Используется в отчетах для печати строки расшифровки
{
   Формат( ТекстЦВр,"Текст ц В" );
   Вернуть("расшифровка");
}

Функция ПроверитьРегистрационныйНомер('Регистрационный номер')
# Проверка правильности ввода регистрационного номера
# возвращает сообщение об ошибке или пустую строку
{
   РНРазм = Размер('Регистрационный номер');
   Если( РНРазм > 0 и
         Найти("0123456789", ПодСтрока('Регистрационный номер', 1, 1)) ) # проверяем правильность заполнения
   {
      Если( РНРазм != 12 и РНРазм != 14 )
         Вернуть "Неверный формат страхового номера\nПравильный формат xxx-xxx-xxx xx";
      к  = 1;
      кс = 0;
      кч = "";
      Если( РНРазм == 12 ) # формат xxxxxxxxx_xx
      {
         Пока( к <= РНРазм )
         {
            Символ = ПодСтрока( 'Регистрационный номер', к, 1 );
            Если( к <= 9 ) # первая часть
            {
               Если( Найти("0123456789", Символ) > 0 )
                  кс += Число(Символ) * (10 - к);
               Иначе                         
                  Вернуть "Недопустимо применять нецифровые символы в страховом номере";
            }
            Иначе
               Если( к > 10 ) # вторая часть
                  кч += Символ
               Иначе # должен быть пробел
               {
                  Если(Символ != " " и Символ != "-")
                     Вернуть "Неверный формат страхового номера\nПравильный формат xxx-xxx-xxx xx";
               }
               к++;
         }
      }
      Иначе # формат xxx-xxx-xxx_xx или xxx-xxx-xxx-xx
      {
         Вычесть = 0;
         Пока( к <= РНРазм )
         {
            Символ = ПодСтрока('Регистрационный номер', к, 1);
            Если( к <= 11 ) # первая часть
            {
               Если( Найти("0123456789", Символ) > 0 )
                  кс += Число(Символ) * (10 - к + Вычесть);
               Иначе Если( Символ == "-" )
                  Вычесть++;
               Иначе
                  Вернуть "Недопустимо применять нецифровые символы в страховом номере";
            }
            Иначе Если( к > 12 ) # вторая часть
               кч += Символ
            Иначе # должен быть пробел или дефис
            {
               Если( Символ != " " и Символ != "-" )
                  Вернуть "Неверный формат страхового номера\nПравильный формат xxx-xxx-xxx xx";
            }
            к++;
         }
      }
      # Вычисляем контрольную сумму
      кс = кс - БезКоп( кс/101 ) * 101;
      ВыборПо( кс )
      {
         выбор 100:   кс = 0;
         выбор 101:   кс = 0;
      }
      Если( Число(кч) != кс )
         Вернуть "Не совпадает контрольное число у страхового номера\nНомер должен оканчиваться на " + кс;
   }
   Вернуть "";
}

Функция НедопустимыеСимволы(Строка, Символы)
# Проверяет наличие недопустимых символов в строке
#  Строка  - проверяемая строка
#  Символы - список недопустимых символов
# возвращает сообщение об ошибке или пустую строку если ошибки нет
{
   Перем н = Размер(Символы);
   Перем к = 1;
   Пока( к <= н )
   {
      Перем Символ = ПодСтрока( Символы, к, 1 );
      Если( Найти(Строка, Символ) > 0 )
         Вернуть "Недопустимый символ "+Символ+" в строке "+Строка;
      к++;
   }
   Вернуть "";
}

Функция ДопустимыеСимволы(Строка, Символы)
# Проверяет, являются ли все символы в строке допустимыми
#  Строка - проверяемая строка
#  Символы - допустимые символы
# возвращает сообщение об ошибке или пустую строку если ошибки нет
{
   Перем н = Размер(Строка);
   Перем к = 1;
   Пока(к<=н)
   {
      Перем Символ = Вверх(ПодСтрока(Строка, к, 1));
      Если(Найти(Символы, Символ) == 0)
         Вернуть "Недопустимый символ "+Символ+" в строке "+Строка;
      к++;
   }
   Вернуть "";
}

Функция ДобавитьОшибку(Ошибки, ЧислоОшибок, НазваниеОшибки)
# добавляет ошибку в массив
# Используется функцией ПроверитьСотрудника()
{
   Если( Размер(НазваниеОшибки) > 0 )
   {
      ЧислоОшибок++;
      Ошибки[ЧислоОшибок] = НазваниеОшибки;
   }
   Вернуть ЧислоОшибок
}

Функция ПроверитьСотрудника()
# Проверяет параметры сотрудника
# проверяются следуюшие параметры
# 1. Заполнена ли дата рождения
# 2. Заполнена ли дата выдачи паспорта
# 3. Разница между годом выдачи паспорта и годом рождения >= 14 лет
# 4. Правильность заполнения серии паспорта
# 5. Правильность заполнения номера паспорта
# 6. Заполнено ли поле "Кем выдан паспорт"
# 7. Правильность заполнения регистрационного номера
# 8. Правильность сокращения у улицы и города
# 9. Наличие недопустимых символов в ФИО
# возвращает массив сообщений об ошибках
{
   СимволыЧисла = "0123456789";
   АнглСимволы  = "ABCDEFGHIJKLMNOPRSTUVWXYZ";
   РуссСимволы  = "ЙЦУКЕНГШЩЗХЪФЫВАПРОЛДЖЭЯЧСМИТЬБЮ";
   Сокращения1  = ",А/П,АЛ,АО,АОБЛ,АУЛ,Б/О,Б-Р,БРИГАДА,БУГОР,БУДКА,БУХТА,ВАГОН,ВАЛ,ВЛД,ВОЛ,ВЪЕЗД,ВЫСЕЛ,Г,ГАРАЖ,ГК,ГОРОДОК,Д,Д/И,ТЕР,Д/О,ДВОР,ДД,ДЕПО,ДОР,ДП,ДСК,ЕРИК,Ж/Д БУДКА,Ж/Д КАЗАРМ,Ж/Д ОБП,Ж/Д ОП,Ж/Д РЗД,Ж/Д СТ,ЖТ,ЗАЕЗД,ЗАИМ,ЗАСТ,ЗАУЛОК,З-Д,ЗО,И/З,";
   Сокращения2  = ",КАЗАРМА,КАНАЛ,КАРЬЕР,КВ-Л,КИШЛАК,КЛХ,КМ,КОЛЬЦО,КОРДОН,КОШАРА,КП,КРАЙ,ЛЕСН-ВО,ЛЕСХОЗ,ЛИНИЯ,ЛОГ,М,М/С,МАССИВ,МАЯК,МКР,МО,МОСТ,МЫС,НАБ,НП,ОБЛ,ОБЩ,ОВРАГ,ОЗЕ,О,ОСТРОВ,ОТАРА,ОТД,П,П/Л,П/О,П/Р,П/СВХ,П/СТ,П/СТАНОК,ПАДЬ,ПАНС,ПАРК,ПГТ,ПЕР,";
   Сокращения3  = ",ПЕРЕЕЗД,ПЗ,ПИКЕТ,ПИТ,ПЛ,ПЛАТФ,ПЛ-КА,П-ОВ,ПОДСТ,ПОДЪЕМ,ПОЙМА,ПОЛЕ,ПОРТ,ПОСТ,ПОЧИНОК,ПР,ПРИИСК,ПР-КТ,ПРОСЕК,ПРОСЕЛОК,ПРОУЛОК,ПРОФ,ПУТЬ,ПХ,РАЗРЕЗ,РЕКА,РЕМБАЗА,РЕСП,РЕЧКА,РЗД,Р-Н,РОВ,РП,РУДНИК,РЫНОК,РЯД,РЯДЫ,С,САД,САН,САН-ПРОФ,СВХ,СДТ,";
   Сокращения4  = ",СКВЕР,СЛ,СООРУЖ,СПУСК,СТ,СТАДИОН,СТОРОЖКА,СТР,СТ-ЦА,СЪЕЗД,Т/Б,ТЕР,ТРАКТ,ТУП,У,УЛ,УР-ЩЕ,УСАДЬБА,УЧ-К,УЧХОЗ,ФАКТОРИЯ,ФЕРМА,Х,Х-ВО,ЦО,ЦУ,ЦУ ПХ,ЦУ СВХ,ЦУ ТОО,Ш,ШАХТА,";
   СимволыСерии = "IVXL";
   СимволыЧисла2 = "1234567890 "; # плюс пробел

   Очистить(Ошибки);
   ЧислоОшибок = 0;
   # все проверки
   Разбить( Вверх(Адрес), ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Вверх(Паспорт), ",", Серия, Номер, Кем, Когда, ВидДокумента );
   # заполнена ли дата рождения
   Если( 'Год рождения' == 00.00.00 )
      ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Не заполнена дата рождения" );
   Иначе
   {
      Если(Когда == 00.00.00)
         ЧислоОшибок = ДобавитьОшибку(Ошибки, ЧислоОшибок, "Не заполнена дата выдачи паспорта");
      Иначе Если( Год(Когда) - Год('Год рождения') < 14 )
         ЧислоОшибок = ДобавитьОшибку(Ошибки, ЧислоОшибок, "Паспорт не может быть выдан ранее 14 лет");
   }
   Если(Серия)
   {
      Серия1 = Серия2 = "";
      Разбить( Серия, "-", Серия1, Серия2 );
      Если( Серия2 != "" ) # старый паспорт
      {
         Если( Серия1 )
            ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, ДопустимыеСимволы(Серия1, СимволыСерии) );
         Если( Серия2 )
            ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, ДопустимыеСимволы(Серия2, РуссСимволы) );
      }
      Иначе              # новый паспорт
         ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, ДопустимыеСимволы(Серия1, СимволыЧисла2) );
   }
   Иначе
      ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Не заполнена серия паспорта" );
   Если(Номер)
      ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, ДопустимыеСимволы(Номер, СимволыЧисла) );
   Иначе
      ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Не заполнен номер паспорта" );
   Если( Размер(Кем) == 0 )
      ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Не заполнена организация, выдавшая паспорт" );
   ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, ПроверитьРегистрационныйНомер('Регистрационный номер') );
   ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, НедопустимыеСимволы(ФИО, АнглСимволы) );
   # проверить вид документа
   # сокращения в городе и улицы
   Если(НазваниеАдреса(Город))
   {
      Сокр = СокращениеАдреса(Город);
      Если(!Сокр)
         ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Не введено сокращение города" );
      Иначе
         Если( !Найти(Сокращения1, "," + Сокр+ ",") и
               !Найти(Сокращения2, "," + Сокр+ ",") и
               !Найти(Сокращения3, "," + Сокр+ ",") и
               !Найти(Сокращения4, "," + Сокр+ ",") )
            ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Неверное сокращение города" );
   }
   Если( НазваниеАдреса(Улица) )
   {
      Сокр = СокращениеАдреса(Улица);
      Если( !Сокр )
         ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Не введено сокращение улицы" );
      Иначе
         Если( !Найти(Сокращения1, "," + Сокр+ ",") и
               !Найти(Сокращения2, "," + Сокр+ ",") и
               !Найти(Сокращения3, "," + Сокр+ ",") и
               !Найти(Сокращения4, "," + Сокр+ ",") )
            ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, "Неверное сокращение улицы" );
   }
   # проверяем наличие недопустимых символов в ФИО сотрудника
   ЧислоОшибок = ДобавитьОшибку( Ошибки, ЧислоОшибок, ДопустимыеСимволы(ФИО, РуссСимволы+" ") );
   Вернуть Ошибки;
}

Функция ИНН_Наименование()
# Возвращает строку ИНН + Наименование организации
{
   Вернуть( ( ИНН_() ? "ИНН " + ИНН + " " : "") + (Наименование ? Наименование : Название) );
}

Функция ИНН_( ... )
# Возвращает: ИНН, если он начинается с числа а не буквы или другого символа
#             иначе - пустую строку
# Параметр: ИНН - необязательный параметр, если не указан берется переменная ИНН
{
   перем пИНН;
   пИНН = Есть( Параметры[1] ) ? Параметры[1] : ИНН;
   Если( Найти( "0123456789", Подстрока( пИНН, 1, 1 ) ) )
      Вернуть пИНН;
   Иначе
      Вернуть "";
}

Функция ТипДокументаПФ(...)
# Для персонифицированного учета в ПФ 3.0
# Возвращает тип (код) документа, удостоверяющего личность,
# в соответствии с классификатором
# Если реквизит не заполнен, то возвращает "ПАСПОРТ"
{
   перем фПаспорт, пСерия, пНомер, пКем, пКогда, пВидДокумента, пОшибка;
   фПаспорт = Есть( Параметры[1] ) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", пСерия, пНомер, пКем, пКогда, пВидДокумента );
   ВыборПо( пВидДокумента )
   {
      Выбор "ПАСПОРТ ГРАЖДАНИНА СССР" :             Вернуть "ПАСПОРТ";
      Выбор "СВИДЕТЕЛЬСТВО О РОЖДЕНИИ" :            Вернуть "СВИД О РОЖД";
      Выбор "УДОСТОВЕРЕНИЕ ЛИЧНОСТИ" :              Вернуть "ВРЕМ УДОСТ";
      Выбор "СПРАВКА ОБ ОСВОБОЖДЕНИИ" :             Вернуть "СПРАВКА ОБ ОСВ";
      Выбор "ВОЕННЫЙ БИЛЕТ" :                       Вернуть "ВОЕННЫЙ БИЛЕТ";
      Выбор "ЗАГРАНПАСПОРТ ГРАЖДАНИНА СССР" :       Вернуть "ЗГПАСПОРТ";
      Выбор "СВИДЕТЕЛЬСТВО О РЕГИСТРАЦИИ" :         Вернуть "СВИД БЕЖЕНЦА";
      Выбор "УДОСТОВЕРЕНИЕ БЕЖЕНЦА РФ" :            Вернуть "УДОСТ БЕЖЕНЦА";
      Выбор "ПАСПОРТ ГРАЖДАНИНА РФ" :               Вернуть "ПАСПОРТ РОССИИ";
      Выбор "ДИПЛОМАТИЧЕСКИЙ ПАСПОРТ РФ" :          Вернуть "ДИППАСПОРТ РФ";
      Выбор "ЗАГРАНПАСПОРТ ГРАЖДАНИНА РФ" :         Вернуть "ЗГПАСПОРТ РФ";
      Выбор "ВРЕМЕННОЕ УДОСТОВЕРЕНИЕ ЛИЧНОСТИ РФ" : Вернуть "ВРЕМ УДОСТ";
      Выбор "ПАСПОРТ МИНМОРФЛОТА" :                 Вернуть "ПАСПОРТ МОРФЛТ";
      Выбор "ИНОСТРАННЫЙ ПАСПОРТ" :                 Вернуть "ИНПАСПОРТ";
      Выбор "ВИД НА ЖИТЕЛЬСТВО" :                   Вернуть "ВИД НА ЖИТЕЛЬ";
      Выбор "ПАСПОРТ МОРЯКА" :                      Вернуть "ПАСПОРТ МОРЯКА";
      Выбор "ВОЕННЫЙ БИЛЕТ ОФИЦЕРА ЗАПАСА" :        Вернуть "ВОЕН БИЛЕТ ОЗ";
      Выбор "ИНЫЕ ДОКУМЕНТЫ" :                      Вернуть "ПРОЧЕЕ";
      Выбор "" :                                    Вернуть "ПАСПОРТ";
      Иначе 
         пОшибка = "Для лица " + ФИО + " не правильно заполнен реквизит ВидДокумента. Выберете правильное значение из предлагаемого списка клавишей стрелка вверх";
#      Если( Есть( мОшибки ) )
#         мОшибки[Размер( мОшибки ) + 1] = пОшибка;
#      Иначе
#         Сообщить( пОшибка );
      Вернуть "ПРОЧЕЕ";
   }
}

Функция ВидДокументаПФ(...)
# Для персонифицированного учета в ПФ 3.0
# Возвращает название документа
# "Паспорт" для документа "Паспорт гражданина СССР", "Паспорт"
# "Паспорт России" для документа "Паспорт гражданина РФ"
# или другое название документа
# Если вид документа не заполнен, возвращает "Паспорт"
{
   перем фПаспорт, пСерия, пНомер, пКем, пКогда, пВидДокумента;
   фПаспорт = Есть(Параметры[1]) ? Параметры[1] : Паспорт;
   Разбить( Вверх(фПаспорт), ",", пСерия, пНомер, пКем, пКогда, пВидДокумента );
   ВыборПо( пВидДокумента )
   {
      Выбор "ПАСПОРТ ГРАЖДАНИНА СССР", "ПАСПОРТ", "": Вернуть "ПАСПОРТ";
      Выбор "ПАСПОРТ ГРАЖДАНИНА РФ"  :                Вернуть "ПАСПОРТ РОССИИ";
      Иначе                                           Вернуть пВидДокумента;
   }
}

Функция КонвертацияАдреса(...)
# Требуется для перехода на версию 1.9.054 или более позднюю
# Если в адресах сотрудников были заполнены населенные пункты,
# то требуется конвертация адресов (замена "/" на "\"):
# Вызывается разово по Ctrl+S в справочнике сотрудников
# заменяет разделитель между Городом и Пунктом с "/" на "\"
{
   перем Индекс, Город, Пункт, Улица, Дом, Квартира, Область, Район;
   Разбить( Адрес, ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Если( Найти( Город, "/" ) )
   {
      Разбить( Город, "/", Город, Пункт );
      Адрес = Индекс + "," + Город + "\\" + Пункт + "," + Улица + ","
            + Дом + "," + Квартира + "," + Область + "," + Район;
      Сохранить(.);
      Вернуть 1;
   }
   Вернуть 0;
}

Функция КорректировкаОкругления(стрСумма, ...)
# Корректирует ошибки округления с тем, чтобы результаты совпали с итогом.
# Функция рассчитывает разницу между итогом и суммой округлённых слагаемых и
# прибавляет её к максимальному по модулю слагаемому.
# Возвращает название изменённого элемента
# Вызов: КорректировкаОкругления("СлагаемоеСумма", "Слагаемое1", "Слагаемое2", ...)
# Внимание! В функцию передаются не значения переменных, а их названия!
{  Перем пСуммаПараметровОкр = пДельта = 0;
   Перем пМаксЭлемент = 0, 
   Перем пНазвМаксЭлемента = пЗнакМаксЭлемента = пПараметр = "";
   
   ДляВсех( Элементов( Параметры, пНомерПараметра ) )
   {
      пЗнак = Подстрока( Параметры[ пНомерПараметра ], 1, 1 );
     Если( пЗнак == "+" или пЗнак == "-" )
         пПараметр = Подстрока( Параметры[ пНомерПараметра ], 2, -1 );
      иначе
      {
         пЗнак = "+";
         пПараметр = Параметры[пНомерПараметра];
      }

      Если( Есть( [ пПараметр ] ) == 1 )
      {
         [ пПараметр ] = Окр( [ пПараметр ], 1);
         перем пМодПараметр = Модуль( [пПараметр] );
         Если( пМодПараметр > пМаксЭлемент или !пНазвМаксЭлемента )
         {
            пМаксЭлемент = пМодПараметр;
            пНазвМаксЭлемента = пПараметр;
            пЗнакМаксЭлемента = пЗнак;
         }
   
         ВыборПо( пЗнак )
         {
            Выбор "+" : пСуммаПараметровОкр += [ пПараметр ];
            Выбор "-" : пСуммаПараметровОкр -= [ пПараметр ];
         }
      }
   }
   
   [стрСумма] = Окр( [стрСумма], 1);
   пДельта = [стрСумма] - пСуммаПараметровОкр;

   Если( пНазвМаксЭлемента )
   {
     Если(пЗнакМаксЭлемента == "+")
       [пНазвМаксЭлемента] += пДельта; 
     иначе
       [пНазвМаксЭлемента] -= пДельта; 
   }
   Вернуть пНазвМаксЭлемента;
}

Функция АдресПечатныйПФ( АдресЭлектронныйПФ )
{
   перем пСтрана = ПодСтрока( АдресЭлектронныйПФ, 1, Найти( АдресЭлектронныйПФ, "," ) - 1 );

   # Убираем страну
   АдресЭлектронныйПФ = ПодСтрока( АдресЭлектронныйПФ, Найти( АдресЭлектронныйПФ, "," ) + 1, -1 );

   # Добавляем слово индекс
   АдресЭлектронныйПФ = "индекс " + АдресЭлектронныйПФ;

   # Добавляем слово адрес
   АдресЭлектронныйПФ = ПодСтрока( АдресЭлектронныйПФ, 1, Найти( АдресЭлектронныйПФ, "," ) - 1 ) 
                     + " адрес "
                     + ( пСтрана ? пСтрана + "," : "" )
                     + ПодСтрока( АдресЭлектронныйПФ, Найти( АдресЭлектронныйПФ, "," ) + 1, -1 );

   Вернуть( АдресЭлектронныйПФ );
}

Функция СотрИзОтдела( оСотр, оОтдел )
# Определяет, входит ли сотрудник в указанный отдел или его подотдел
# Если отдел не указан, то определет, что сотрудник не из резерва
# Возвращает 1 или 0
# Параметры оСотр  (объект) сотрудник
#           оОтдел (объект) прверяемый отдел
{  
   Если( ЭтоУзел( оСотр ) ) Вернуть 0;
   # Если отдел не указан, и сотрудник из архива
   Если( !оОтдел и !оСотр.Сотрудники ) Вернуть 1;
   Перем вОтделе = 0;
   Объект оТекОтдел = оСотр;
   Пока( !вОтделе и Есть( оТекОтдел.Сотрудники ) == 1 )
   {
      Если( оТекОтдел.Сотрудники == оОтдел ) вОтделе = 1;
      оТекОтдел = оТекОтдел.Сотрудники; # Поднимаемся на отдел выше
   }
   # Если отдел был не указан, то вОтделе будет конечно 0
   Если( !оОтдел и !вОтделе )
      # Проверяем, что этот сотрудник не из резерва
      # Резерв - это отдельный отдел, идущий не из корня
      Если( ЭтоКорень( оТекОтдел ) ) вОтделе = 1;
   Вернуть вОтделе;
}

Функция ЧастЛицоИзРаздела( оЧЛ, оРаздел )
# Определяет, входит ли Частное лицо в указанный раздел или его подотдел
# Возвращает 1 или 0
# Параметры оЧЛ     (объект) Частное лицо
#           оРаздел (объект) проверяемый раздел
{  
   Если( ЭтоУзел( оЧЛ ) ) Вернуть 0;
   # Если его нет в иерархии частных лиц (Члены семей, Представители организаций)
   Если( Есть( 'оЧЛ.Частные лица') != 1 и !ЭтоКорень( оЧЛ ) ) Вернуть 0;
   Перем вРазделе = 0;
   Объект оТекРаздел = оЧЛ;
   Пока( !вРазделе и Есть( 'оТекРаздел.Частные лица' ) == 1 )
   {
      Если( 'оТекРаздел.Частные лица' == оРаздел ) вРазделе = 1;
      оТекРаздел = 'оТекРаздел.Частные лица'; # Поднимаемся на отдел выше
   }
   # Если раздел был не указан, то вРазделе будет конечно 0
   Если( !оРаздел и !вРазделе ) вРазделе = 1;
   Вернуть вРазделе;
}

Функция ДатьНомерДляНумерации( ТипДокумента, ГруппаНумерации )
# Определяет следующий номер для создаваемого документа с указанным типом и группой нумерации
{
   Объект оД = Объект("Документ" );
   'оД.Тип документа'    = ТипДокумента;
   'оД.Группа нумерации' = ГруппаНумерации;
   'оД.Номер' = 999999999;
   НайтиСКонца( оД, "Группа нумерации" );
   Если( 'оД.Тип документа' == ТипДокумента и
         'оД.Группа нумерации' == ГруппаНумерации )
      Вернуть оД.Номер + 1;
   Иначе
      Вернуть 1;
}

Функция КодГражданство()
# Возвращает (текст) - код страны постоянного проживания лица
# Для сотрудников определяется по полю Гражданство, которое заполняется как РОССИЯ/643
# Для частных лиц анализируется одноименный параметр, если есть.
# Если значение не указано, то возвращает код России 643.
# Используется в отчетах по НДФЛ
{
   Перем пГражданство = "643";
   Если( Есть( Гражданство ) )
   {
      Текст пСтрана, пКод;
      Разбить( Гражданство, "/", пСтрана, пКод );
      Если( Число( пКод ) )
         пГражданство = Число( пКод );
   }
   Вернуть пГражданство;
}

Функция СтранаГражданство()
# Возвращает (текст) - название страны постоянного проживания лица
# Для сотрудников определяется по полю Гражданство, которое заполняется как РОССИЯ/643
# Для частных лиц анализируется одноименный параметр, если есть.
# Для граждан России возвращает пусто
# Используется в отчетах по ПЕРСу
{
   Текст пСтрана = пКод = "";
   Если( Есть( Гражданство ) )
   {
      Разбить( Вверх( Гражданство ), "/", пСтрана, пКод );
      Если( пСтрана == "РОССИЯ" ) 
         Вернуть "";
   }
   Вернуть пСтрана;
}

функция КодРегиона( ... )
# КодОбласти( [Адрес] )
# Возвращает код региона (76) (текст)
# По названию региона, указанному в адресе находит соответствующий регон
# в географическом классификаторе и возвращает его код
# Название региона указывается как: "Ярославская обл" или "Агинский Бурятский АО"
# Если область не указана возвращает код области, указанной в константе пнКодРегиона
{
   # Определяем название области без сокращения
   Текст фАдрес, Индекс, Город, Улица, Дом, Квартира, Область, Код, Район;
   фАдрес = Есть( Параметры[1] ) ? Параметры[1] : Адрес;
   Разбить( фАдрес, ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Разбить( Область, "/", Область, Код );
   # Если в конце области через пробел указано ее сокращение, то отрезаем его
   Текст Обл1, Обл2, Обл3;
   Разбить( Область, " ", Обл1, Обл2, Обл3 );
   Если( Обл3 )
   {
      Обл1 += " " + Обл2;
      Обл2  = Обл3;
   }
   Область = Обл1;
   Если( Обл2 и !Найти( ",АО,АОБЛ,РЕСП,ОБЛ,", "," + Вверх( Обл2 ) + "," ) )
      Область = Обл1 + " " + Обл2;
   # По названию области определяем ее код
   # Если область не указана возвращает код области, указанной в константе
   Если( !Область ) Вернуть Текст( ПНКОДРЕГИОНА );
   Объект оГео = Объект( "География" );
   оГео.Название = "РОССИЯ";
   Узел( оГео );
   Корень( оГео );
   Если( Найти( оГео, "Папки" ) == 1 )
   {
      Объект оГео2 = Объект( "География" );
      оГео2.Связать( "Папки", оГео );
      оГео2.Название = Область;
      Узел( оГео2 );
      Если( Найти( оГео2, "Папки" ) == 1 )
         Вернуть ПодСтрока( оГео2.Код, 1, 2 );
      иначе
         Сообщить( "В геогр. справочнике не найдена область '" + Область + "' (с учет.регистра)"
                 + "\nВ справочнике должны быть заполнены названия областей с кодами"
                 + "\nРекомендуется импортировать классификатор или занести нужные области вручную" );
   }
   иначе
      Сообщить( "В географическом справочнике не найдена страна РОССИЯ (с учетом регистра)"
              + "\nВ справочнике должна быть заполнена страна и названия областей с кодами"
              + "\nРекомендуется импортировать классификатор или занести нужные области вручную" );
   Вернуть "";
}

Функция СделатьПараметрыРучными( оОбъект )
# Делает все родные параметры указанного документа ручными
# Требуется для того что бы программно рассчитанные параметры не обнулялись при закрытии документа
# Возвращает 1 - если были изменены параметры и требуется сохранить объект, иначе - 0
# Параметры: оОбъект ( объект ) - документ или лицо, чьи параметры нужно изменить
{
   Перем пИзменен = 0;
   Установить(оОбъект);
   ДляВсех( Параметров( оОбъект, 1 ) )
   Если( Запись.Откуда == "Родной" )
      Если( 'Запись.тип параметра' == "Программный" )
      {
         'Запись.тип параметра' = "Ручной";
         пИзменен = 1;
         Сохранить( Запись );
      }
   Установить();
   Вернуть пИзменен;
}

Функция КорректировкаОбласти()
# Вызывается разово по Ctrl+S в справочнике сотрудников
# Используется для корректировки области в адресе у сотрудников
# удаляет из названия области код региона, указанный через разделитель
# например "76/Ярославская" или "Ярославская/76" заменяет на "Ярославская".
# Код области теперь определяется по названию области в географическом классификаторе
{
   перем Индекс, Город, Пункт, Улица, Дом, Квартира, Область, Район;
   Разбить( Адрес, ",", Индекс, Город, Улица, Дом, Квартира, Область, Район );
   Если( Найти( Область, "/" ) )
   {
      Перем Обл1, Обл2;
      Разбить( Область, "/", Обл1, Обл2 );
      Обл1 = Текст( Обл1, "Текст" ); # Отбросить пробелы
      Обл2 = Текст( Обл2, "Текст" ); #
            Если( !Обл2 )         Область = Обл1;
      Иначе Если( !Обл1 )         Область = Обл2;
      Иначе Если( Число( Обл2 ) ) Область = Обл1;
      Иначе                       Область = Обл2;

      Адрес = Индекс + "," + Город + "," + Улица + ","
            + Дом + "," + Квартира + "," + Область + "," + Район;
      Сохранить(.);
      Вернуть 1;
   }
   Вернуть 0;
}

Функция ЭлУстройствоВывода()
{
   # заголовок информационной части
   ПроверитьКонстанту( "ЭЛОТЧНОМФАЙЛ", "Порядковый номер файла в году", "1" )
   ПроверитьКонстанту( "ЭЛОТЧНОМДОК", "Порядковый номер документа в году", "1" )
   Спросить( "Порядковый номер файла в текущем году", ЭЛОТЧНОМФАЙЛ, "Порядковый номер докумета в текущем году", ЭЛОТЧНОМДОК );
   СохранитьКонстанту( ЭЛОТЧНОМФАЙЛ );
   СохранитьКонстанту( ЭЛОТЧНОМДОК );
   .УстройствоВывода = "O"+ПодСтрока( ИНН, 5, 5 )+пГод2+"."+ФиксСтрокаСлева( ЭЛОТЧНОМФАЙЛ, 3, 0 );
}

Функция ЭлОтчеты( ... )
# Функция ЭлОтчеты( [пПомесячно] )
# формирует строки, общие для всех файлов электронной отчетности:
# пШапкаФайла - служебная часть
# информационная часть:
#  пЮрАдр - юридический адрес
#  пИнфЧасть - продолжение инф.части
# пЗагОтч - заголовок отчета
# Параметры:
#  пПомесячно - 1-помесячно, 0-иначе. Если не указан, то не помесячно.
{
   Если( Есть( Параметры.1 ) )
      пПомесячно = Параметры.1;
   иначе
      пПомесячно = 0;
   Перем пМес, пДень, пГод, пЧас, пМин, пСек, пИдФайл, пТипИнф, пВерсФорм, пИдПол, пВерсПрог, пКолДок,
         пНаимОтпрЮЛ, пТелОтпр, пДолжнОтпр, пФИООтпр;
   .пРекИнфЧаст2 = "";
   .КонецБлока = "###";
   # заголовок файла
#   Установить( Лицо0 ); 
   .пвГод = Текст(Год(ТекДат),4);
#   пМес  = Подстрока(Текст(ТекДат),4,2);
#   пМес  = Текст(Месяц(ТекДат),2);
   пМес  = Заменить(Текст(Месяц(ТекДат),2), " ", "0");
   пДень = Текст(День(ТекДат),2);
   пДень = Заменить(пДень, " ", "0");
   пЧас  = Текст(ТекВремя,2);
   пМин  = Подстрока(Текст(ТекВремя),4,2);
   пСек  = Подстрока(Текст(ТекВремя),7,2);
   # проверка ИНН
   Если( ПроверкаЦифры(ИНН) == 0 или (Размер(ИНН) != 10 и Размер(ИНН) != 12 )) Ошибка("Внимание! в ИНН должно быть 10 или 12 цифр");
   перем пИНН = ФиксСтрокаСправа(ИНН,12,"*");
   # проверка КПП. c 2003 у всех организаций должен быть КПП
   Если(Лицо0.ТипЛица == "Организации")
      Если( !КПП ) Ошибка("Внимание! Не указан КПП");
   Если( ПроверкаЦифры(КПП) == 0 или (Размер(КПП) != 0 и Размер(КПП) != 9 )) Ошибка("Внимание! Если КПП есь, то должен состоять из 9 цифр");
   перем пКПП = ФиксСтрокаСправа(КПП,9,"*");
   пИдФайл = пИНН+пКПП+пвГод+пМес+пДень+пЧас+пМин+пСек;
   пИдФайл   = "ИдФайл:"+пИдФайл;
   пТипИнф   = "ТипИнф:ОТЧЕТНОСТЬНП";
   пВерсФорм = "ВерсФорм:"+пВерсияФормы;
   # проверка кода ГНИ
   Если( ПроверкаЦифры(КОДГНИ) == 0 или (Размер(КОДГНИ) != 4 )) Ошибка("Внимание! Код ГНИ должен содержать 4 цифры");
   пИдПол    = "ИдПол:"+КОДГНИ;
   пВерсПрог = "ВерсПрог:СБИС1.9";
   пКолДок   = "КолДок:1";
   пТелОтпр  = "ТелОтпр:" + Лицо0.Телефон;
   Если(Лицо0.ТипЛица == "Организации")
   {
      пНаимОтпрЮл = "НаимОтпрЮл:"+Наименование;
      пДолжнОтпр = "ДолжнОтпр:" + ДОЛЖНОСТЬИСПОЛНИТЕЛЯ;
      # проверка ФИО отправителя 
      пФИООтпр  = "ФИООтпр:" + Заменить(Фамилия(ИСПОЛНИТЕЛЬ)," ","") + "," + Заменить(ИмяСотр(ИСПОЛНИТЕЛЬ)," ","") + "," + Заменить(Отчество(ИСПОЛНИТЕЛЬ)," ","");
      пСведенияОбОтправителе = пНаимОтпрЮл + "\n" + пТелОтпр + "\n" + 
                               пДолжнОтпр  + "\n" + пФиоОтпр;
   }
   иначе # частное лицо
   {
      пФИООтпрФЛ = "ФИООтпрФЛ:" + Заменить(Фамилия(Лицо0.Наименование)," ","") + "," + Заменить(ИмяСотр(Лицо0.Наименование)," ","") + "," + Заменить(Отчество(Лицо0.Наименование)," ","");
      пСведенияОбОтправителе = пФИООтпрФЛ + "\n" + пТелОтпр;
   }  
   .пШапкаФайла = пИдФайл     + "\n" + пТипИнф + "\n" + 
                  пВерсФорм   + "\n" + пИдПол + "\n" + 
                  пВерсПрог   + "\n" + пКолДок + "\n" + 
                  пСведенияОбОтправителе;
#                  пНаимОтпрЮл + "\n" + пТелОтпр + "\n" + 
#                  пДолжнОтпр   + "\n" + пФиоОтпр;
   
   Если(Размер(пШапкаФайла) > 254)
      Ошибка("Внимание! Количество знаков переменной пШапкаФайла больше 254. Сократите длину наименования организации или обратитесь к разработчикам");      
   # 2 - квартальная, 3 - годовая, а 1 - наверное месячная
   .пППО = 1;
   Если( !пПомесячно )
      ВыборПо(Месяц(ДатКнц))
      {
         выбор 3,6,9: .пППО = 2;
         выбор 12   : .пППО = 3;
      }
   Если(Месяц(ДатНач)==Месяц(ДатКнц)) .пППО = 1;
   # по ОКЕИ 383 - в рублях 384 - в тысячах рублей 385 = в миллионах рублей
   ВыборПо(КоэфУмн)
   {
      Выбор 1:      пдИзмер = "383";
      Выбор 1000:   пдИзмер = "384";
      Выбор 1000000:пдИзмер = "385";
      иначе         пдИзмер = "384";
   }
   .пОКЕИ = "ОКЕИ:"+ пдИзмер;
   # заголовок информационной части
#   ПроверитьКонстанту( "ЭЛОТЧНОМФАЙЛ", "Порядковый номер файла в году", "1" )
#   ПроверитьКонстанту( "ЭЛОТЧНОМДОК", "Порядковый номер документа в году", "1" )
   пНомерДокумента = Текст( ЭЛОТЧНОМДОК );
#   Спросить( "Порядковый номер файла в текущем году", ЭЛОТЧНОМФАЙЛ, "Порядковый номер докумета в текущем году", ЭЛОТЧНОМДОК );
#   СохранитьКонстанту( ЭЛОТЧНОМФАЙЛ );
#   СохранитьКонстанту( ЭЛОТЧНОМДОК );
   пНомерДокумента = ФиксСтрокаСлева( ЭЛОТЧНОМДОК, 8, "0" );
   пИдДок = "ИдДок:" + пИНН+пКПП+пвГод+пНомерДокумента;
   пДатаДок = "ДатаДок:" + Текст(ТекДат,"(дд.мм.гггг)");
   Перем пКодНо = "КодНО:"+КОДГНИ;
   # Наименование органа исполнительной власти (???)
   Перем пНаимОИВ = "НаимОИВ:";
#   пДокПредст = "ДокПредст:1";
   # свидетельство о постановке на учет T1(25), D(10), N(4)
   # проверка кода ИМНС
   Если( ПроверкаЦифры(СВ_КЕМ_КОД) == 0 или Размер(СВ_КЕМ_КОД) != 4) Ошибка("Внимание! Код ИМНС в свидетельстве о постановке на учет должен состоять из 4 цифр");
   # проверка существования даты выдачи свидетельства
   Если( Размер(СВ_КОГДА) == 0 ) Ошибка("Внимание! Дата выдачи свидетельства о постановке на учет должена быть указана");
   # проверка существования номера свидетельства
   Если( Размер(СВ_НОМЕР) == 0 ) Ошибка("Внимание! Серия и номер свидетельства о постановке на учет должены быть указаны");
   пСвидетельство = "Свидетельство:" + Заменить(СВ_НОМЕР,","," ") + "," + Текст(СВ_КОГДА,"(дд.мм.гггг)") + "," + СВ_КЕМ_КОД;
   пОКВЭД="ОКВЭД:"+ Текст( ОКВЭД );
   пКолФОтч = "КолФОтч:1";
   # сведения о российской организции или физическом лице
   перем пАдрИсОрг ="";
   Если(Лицо0.ТипЛица == "Организации")
   { 
      перем пДокПредст = "ДокПредст:1";
      пКатНП = "КатНП:01"; # 2-родовые семейные общиены малых народов севера и фермерские хозяйства
      пНаимЮЛПол = "НаимЮЛПол:" + Наименование;
      пИННЮЛ     = "ИННЮЛ:" + ИНН;
      пКППЮЛ     = "КППЮЛ:" + КПП;
      Перем пОГРН = "ОГРН:" + ОГРН;
      пПризАдр   = "ПризАдр:1"; # Признак совпаде-ния (1) адреса, указан-ного в учред-ных документах, и адреса постоянно действующего исполнит. ор-гана
      # проверка индекса 
      перем пИндекс = Индекс(Адрес);
      Если( ПроверкаЦифры(пИндекс) == 0 или Размер(пИндекс) != 6) Ошибка("Внимание! Индекс в юридическом адресе должен состоять из 6 цифр");
      # проверка кода региона
      Если( ПроверкаЦифры(ПНКОДРЕГИОНА) == 0 или Размер(ПНКОДРЕГИОНА) != 2) Ошибка("Внимание! Константа ПНКОДРЕГИОНА должна состоять из 2 цифр");
      перем пАдрес = Заменить(Адрес,", ",",");
      Если( Есть( ФактАдрес) ) # есть поле фактический ардес
           Если( ФактАдрес != "" ) # если это поле заполнено
           {
              пПризАдр   = "ПризАдр:2"; # Признак совпаде-ния (1) адреса, указан-ного в учред-ных документах, и адреса постоянно действующего исполнит. ор-гана
              перем пАдрес2 = Заменить(ФактАдрес,", ",",");
              перем пИндекс2 = Индекс(пАдрес2);
              Если( ПроверкаЦифры(пИндекс2) == 0 или Размер(пИндекс) != 6) Ошибка("Внимание! Индекс в фактическом адресе должен состоять из 6 цифр");
              пАдрИсОрг    = "АдрИсОрг:643,"+пИндекс2+","+КодРегиона(пАдрес2)+","+Район(пАдрес2)+","+Город(пАдрес2)+","+Пункт(пАдрес2)+","+Улица(пАдрес2)+","+Дом(пАдрес2)+","+Корпус(пАдрес2)+","+Квартира(пАдрес2);
              Если(СосчитатьСимволы(пАдрИсОрг,",") !=9) Ошибка("Проверьте фактический адрес");
           }   
      пАдрЮр    = "АдрЮр:643," + пИндекс + ","+ПНКОДРЕГИОНА+","+Район(пАдрес)+","+Город(пАдрес)+","+Пункт(пАдрес)+","+Улица(пАдрес)+","+Дом(пАдрес)+","+Корпус(пАдрес)+","+Квартира(пАдрес);
      # проверка структуры адреса
      Если(СосчитатьСимволы(пАдрЮр,",") !=9) Ошибка("Проверьте юридический адрес");
      Если(пВерсияФормы == "2.01")
      {  
         # вместо пСведения. (Так назвоно, чтоб никто не ухитрился повторить где-нибудь)
         .пРекИнфЧаст2 =  пНаимЮЛПол + "\n" + пИННЮЛ    + "\n" + 
                            пКППЮЛ     + "\n" + пОГРН     + "\n" + 
                            пПризАдр   + "\n" ;
      } 
      иначе # 
      {
         .пРекИнфЧаст2 =  пНаимЮЛПол + "\n" + пИННЮЛ    + "\n" + 
                         пКППЮЛ     + "\n" + пПризАдр  + "\n" ;
      } 
      Если(Размер(пРекИнфЧаст2) > 254)
         Ошибка("Внимание! Количество знаков переменной пРекИнфЧаст2 больше 254. Сократите длину полного наименования организации или обратитесь к разработчикам");
                  
   }
   иначе # если частное лицо
   {  
      перем пДокПредст = "ДокПредст:3";
      перем оЛицо = Лицо0;
      перем пКатНП = "КатНП:03"; # 2-родовые семейные общиены малых народов севера и фермерские хозяйства, 3-физические лица производящие выплаты физ.лицам
      перем пИННФЛ = "ИННФЛ:" + ИНН;      
      перем пФИО = "ФИО:"+Заменить(Фамилия(Лицо0.Наименование)," ","") + "," + Заменить(ИмяСотр(Лицо0.Наименование)," ","") + "," + Заменить(Отчество(Лицо0.Наименование)," ","");
      перем пУдФЛицо = "УдЛичн:" + Лицо0.Лицо_.ВидДокумента() + "," + Лицо0.Лицо_.Серия() +  " "  + Лицо0.Лицо_.Номер();
      перем пДатаУдЛичн = "ДатаУдЛичн:" + Текст(Лицо0.Лицо_.Когда(),"(дд.мм.гггг)"); 
      перем пАдрМЖРез = "АдрМЖРез:643,"+оЛицо.Индекс()+","+оЛицо.КодРегиона()+","+оЛицо.Район()+","+оЛицо.Город()+","+оЛицо.Пункт()+","+оЛицо.Улица()+","+оЛицо.Дом()+","+оЛицо.Корпус()+","+оЛицо.Квартира();
      .пРекИнфЧаст2 = пФИО + "\n" + пИННФЛ + "\n" + "ТелСлуж:"+ТЕЛРУКОВОДИТЕЛЯ + "\n" + "Пол:1" + "\n" + "Гражд:643" + "\n" 
                   + пУдФЛицо + "\n" + пДатаУдЛичн;
      # 777
      пАдрЮр = пАдрМЖРез;
   }
   .пАдрЮр   = Заменить(пАдрЮр,", ",",") + "\n" + Заменить(пАдрИсОрг,", ",",");
   Если(Размер(пАдрЮр) > 254)
      Ошибка("Внимание! Количество знаков переменной пАдрЮр больше 254. Сократите длину адреса или обратитесь к разработчикам");      
   Если(пВерсияФормы == "2.01")
   { # в версии 2.01 добавлены параметры КодНО - Код налогового органа, 
     # НаимОВ - Наименование органа исполнительной власти
     # ОКВЭД - добавлен в информационную часть файла (был у баланса)
     .пИнфЧасть = пИдДок   + "\n" + пДатаДок       + "\n" + 
                пКодНО     + "\n" + пНаимОИВ       + "\n" + 
                пДокПредст + "\n" + пСвидетельство + "\n" + 
                пОКВЭД     + "\n" + пКатНП         + "\n" +                 
                пКолФОтч;
#                   + "\n" + пСведения;
   }      
   иначе
   {
   .пИнфЧасть = пИдДок     + "\n" + пДатаДок       + "\n" + 
                пДокПредст + "\n" + пСвидетельство + "\n" + 
                пКатНП     + "\n" + пКолФОтч;
#                       + "\n" +  пСведения;
   }
   Если(Размер(пИнфЧасть) > 254)
      Ошибка("Внимание! Количество знаков переменной пИнфЧасть больше 254. Сократите длину наименования органа испольнительной власти или обратитесь к разработчикам");

#                пНаимЮЛПол + "\n" + пИННЮЛ    + "\n" + 
#                пКППЮЛ     + "\n" + пПризАдр  + "\n" ;
   # заголовок отчета
   пНаимФОтч      = "НаимФОтч:" + пНаимОтч;
   пВерФОтч       = "ВерФОтч:"+пВерсияОтчета;                 # формат отчетности
   пПериодВерОтч  = "ПериодВерОтч:" + пПериодВерОтч + ","; # дата начала действия версии,дата окончания действия версии
   пПризПериодОтч = "ПризПериодОтч:" + пППО;          # 2 - квартальная, 3 - годовая
   пНачПериодОтч  = "НачПериодОтч:" + Текст(ДатНач,"(дд.мм.гггг)");
   пКонПериодОтч  = "КонПериодОтч:" + Текст(ДатКнц,"(дд.мм.гггг)");
   перем пВариантФО = 1;
   Спросить("Вариант формы (1-первичная, 2-998 -исправительные, 999 -не отслеживается)", пВариантФО);
#         Спросить("Введите вариант формы отчетности (001-первичная, 002-998 - исправительные, 999 - не отслеживается последовательность отсылок форм)", пВариантФО);
#   Спросить("Введите вариант формы отчетности", пВариантФО);
   Если(пВариантФО == 0)
   { 
      Сообщить(" Вы ввели 0. Этого не может быть. Ставлю 999");
      пВариантФО = 999;
   }
   перем пВариантФО1     = Текст(пВариантФО);
   перем пВариантФО2     = ФиксСтрокаСлева( пВариантФО1, 3, "0" );
   .пВарФОтч      = "ВарФОтч:"+пВариантФО2; # вариант формы отчетности 001-первичная, 002-998 - исправительные, 999 - не отслеживается последовательность отсылок форм
#   .пКолПокФОтч    = "КолПокФОтч:" + пКолСтрок; # количество показателей по форме отчетности
   .пЗагОтч = пНаимФОтч     + "\n" + пВерФОтч      + "\n" + пПериодВерОтч + "\n" +
              пПризПериодОтч + "\n" + пНачПериодОтч + "\n" + пКонПериодОтч + "\n" +
              пОКЕИ + "\n" + пВарФОтч;    
}

Функция ЭлБлокРук()
{     
   Перем пУдЛичн, пПол, пАдрМЖРукРФ, пФИОРук, пФИОБух;
   # Реквизиты руководителя
   Если(Лицо0.ТипЛица == "Организации")
   {
      Пока( !Есть( ТАБНОМРУКОВОДИТЕЛЯ ) или !Есть( ТАБНОМБУХГАЛТЕРА ) )
      {
         Сообщить( "Заполните реквизиты руководителя и главного бухгалтера предприятия!" );
         ПараметрыОбщие( ДатНач, ДатКнц );
      }
      Пока( !Число( ТАБНОМРУКОВОДИТЕЛЯ ) или !Число( ТАБНОМБУХГАЛТЕРА ) )
      {
         Сообщить( "Заполните реквизиты руководителя и главного бухгалтера предприятия!" );
         ПараметрыОбщие( ДатНач, ДатКнц );
      }
      перем оЛицо = Лицо( Число(ТАБНОМРУКОВОДИТЕЛЯ), "Сотрудники" );
      пФИОРук = "ФИОРук:"+Заменить(оЛицо.ФИО," ",",");
      Если( оЛицо.ИНН_()) 
         .пРекРук = пФИОРук + "\n" + "ИННРук:"+оЛицо.ИНН + "\n" + "ТелРук:"+ТЕЛРУКОВОДИТЕЛЯ;
      иначе
      {                                                                           
         пУдЛичн = "УдЛичнРук:" + оЛицо.ВидДокумента() + "," + оЛицо.Серия() +  " "  + оЛицо.Номер();
         пПол = 1;
         ВыборПо(оЛицо.Пол)
         {
            Выбор "Мужчина" :  пПол = "1";
            Выбор "Женщина" :  пПол = "2";
            иначе              пПол = "1";
         }
         пАдрМЖРукРФ = "АдрМЖРукРФ:643,"+оЛицо.Индекс()+","+оЛицо.КодРегиона()+","+оЛицо.Район()+","+оЛицо.Город()+","+оЛицо.Пункт()+","+оЛицо.Улица()+","+оЛицо.Дом()+","+оЛицо.Корпус()+","+оЛицо.Квартира();
         .пРекРук = пФИОРук    + "\n" + "ТелРук:"+ТЕЛРУКОВОДИТЕЛЯ + "\n" +
                 "ДатаРождРук:" + Текст('оЛицо.Год рождения',"(дд.мм.гггг)") + "\n" + "МестоРождРук:"+'оЛицо.Место рождения' + "\n" + 
                 "ПолРук:"+пПол + "\n" + "ГраждРук:643" + "\n" + 
                 пУдЛичн        + "\n" + "ДатаУдЛичнРук:" + Текст(оЛицо.Когда(),"(дд.мм.гггг)") + "\n" + 
                 пАдрМЖРукРФ;
      }
      # Реквизиты главного бухгалтера
      перем оЛицо = Лицо( Число(ТАБНОМБУХГАЛТЕРА), "Сотрудники" );
      пФИОБух = "ФИОБух:"+Заменить(оЛицо.ФИО," ",",");
      Если( оЛицо.ИНН_()) 
         .пРекБух = пФИОБух + "\n" + "ИННБух:"+оЛицо.ИНН + "\n" + "ТелБух:"+ТЕЛБУХГАЛТЕРА;
      иначе
      {
   #      пУдЛичн = ВидДокумента() + "," + Серия() + ( (Серия() и Номер()) ? " " : "" ) + Номер();
         пПол = 1;
         ВыборПо(оЛицо.Пол)
         {
            Выбор "Мужчина" :  пПол = "1";
            Выбор "Женщина" :  пПол = "2";
            иначе              пПол = "1";
         }
         пУдЛичн = "УдЛичнБух:"+ оЛицо.ВидДокумента() + "," + оЛицо.Серия() + " " + оЛицо.Номер();
         пАдрМЖБухРФ = "АдрМЖБухРФ:643,"+оЛицо.Индекс()+","+оЛицо.КодРегиона()+","+оЛицо.Район()+","+оЛицо.Город()+","+оЛицо.Пункт()+","+оЛицо.Улица()+","+оЛицо.Дом()+","+оЛицо.Корпус()+","+оЛицо.Квартира();
         .пРекБух = пФИОБух    + "\n" + "ТелБух:" + ТЕЛБУХГАЛТЕРА + "\n" + 
                 "ДатаРождБух:" + Текст('оЛицо.Год рождения',"(дд.мм.гггг)") + "\n" + "МестоРождБух:"+'оЛицо.Место рождения' + "\n" + 
                 "ПолБух:"+пПол + "\n" + "ГраждБух:643" + "\n" + 
                 пУдЛичн       + "\n" + "ДатаУдЛичнБух:" + Текст(оЛицо.Когда(),"(дд.мм.гггг)") + "\n" + 
                 пАдрМЖБухРФ;      
      }
      # Реквизиты уполномоченного ппредставителя
      Если(!Есть(ТАБНОМПРЕДСТАВИТЕЛЯ) ИЛИ ТАБНОМПРЕДСТАВИТЕЛЯ == 0 )
      {
         .пРекУпПред="ФИОУпПред:,,"
      }
      иначе
      {
         перем оЛицо = Лицо( Число(ТАБНОМПРЕДСТАВИТЕЛЯ), "Сотрудники" );
         пФИОУпПред = "ФИОУпПред:"+Заменить(оЛицо.ФИО," ",",");
         Если( оЛицо.ИНН_()) 
            .пРекУпПред = пФИОУпПред + "\n" + "ИННУпПред:"+оЛицо.ИНН + "\n" + "ТелУпПред:";
         иначе
         {
            пПол = 1;
            ВыборПо(оЛицо.Пол)
            {
               Выбор "Мужчина" :  пПол = "1";
               Выбор "Женщина" :  пПол = "2";
               иначе              пПол = "1";
            }
            пУдЛичн = "УдЛичнУпПред:"+ оЛицо.ВидДокумента() + "," + оЛицо.Серия() + " " + оЛицо.Номер();
            пАдрМЖУпПредРФ = "АдрМЖУпПредРФ:643,"+оЛицо.Индекс()+","+оЛицо.КодРегиона()+","+оЛицо.Район()+","+оЛицо.Город()+","+оЛицо.Пункт()+","+оЛицо.Улица()+","+оЛицо.Дом()+","+оЛицо.Корпус()+","+оЛицо.Квартира();
            .пРекУпПред = пФИОУпПред    + "\n" + "ТелУпПред:"  + "\n" + 
                    "ДатаРождУпПред:" + Текст('оЛицо.Год рождения',"(дд.мм.гггг)") + "\n" + "МестоРождУпПред:"+'оЛицо.Место рождения' + "\n" + 
                    "ПолУпПред:"+пПол + "\n" + "ГраждУпПред:643" + "\n" + 
                    пУдЛичн       + "\n" + "ДатаУдЛичнУпПред:" + Текст(оЛицо.Когда(),"(дд.мм.гггг)") + "\n" + 
                    пАдрМЖУпПредРФ;      
         }
      }
   }
   иначе # для физического лица руководитель и бухгалтер не нужен
   {
   .пРекРук = "ФИОРук:,,";
   .пРекБух = "ФИОБухк:,,";
   .пРекУпПред = "ФИОУпПред:,," 
   }
   
   # на всякий пожарный для совместимости со старыми отчетмам оставим старый параметр
   .пФИОУпПред = "ФИОУпПред:,," 
}

Функция ФиксСтрокаСправа( Строка, Размер, Символ )
{
   перем пСтрока = ПодСтрока( Строка, 1, Размер );
   перем пСлева = Есть( Параметры[ 1 ] ) ? 1 : 0;
   Пока( Размер( пСтрока ) < Размер )
      пСтрока += Символ;
   Вернуть( пСтрока )
}

Функция ФиксСтрокаСлева( Строка, Размер, Символ )
{
   перем пСтрока = ПодСтрока( Строка, 1, Размер );
   перем пСлева = Есть( Параметры[ 1 ] ) ? 1 : 0;
   Пока( Размер( пСтрока ) < Размер )
      пСтрока = Символ + пСтрока;
   Вернуть( пСтрока )
}

Функция ПроверкаЦифры( Цифра )
{
   перем пНПП = 0; # счетчик на всякий пожарный (чтоб не зацикливалось)
   пЦифра = Текст(Цифра);
   Пока(пЦифра и пНПП <13 )
   { 
      пНПП +=1;
      пСимвол = ПодСтрока( пЦифра, 1, 1 );
      Если( !Найти("0123456789", пСимвол))
      {
         Вернуть(0);
#         Сообщить(" Есть буквы ");
      }
      иначе
      {  
         пЦифра = ПодСтрока( пЦифра, 2);
      }
   }
   Вернуть(1);
}

Функция СосчитатьСимволы( пПерем, пСимвол )
# считает сколько указанных символов пСимвол содержится в пПерем
# например Если(СосчитатьСимволы(пАдрЮр,",") !=9) Ошибка("В записи об адресе должно быть 9 запятых");
{
   перем пКолСимв = 0;
   Пока(Найти( пПерем, пСимвол) > 0)
   {
      пНомПоз = Найти( пПерем, пСимвол);
      Если( пНомПоз > 0 )
      {
         пКолСимв +=1;
         пПерем = ПодСтрока(пПерем, пНомПоз+1);
      }
   }
   Вернуть(пКолСимв);
}

Функция ВЖурналеДоходУпрощ( Документ )
{
   оСвязиДокументов = Объект( "Связи документов" );

   перем пСумма = 0;
   
   Пока( Следующий( Документ, оСвязиДокументов, "Связка1" ) )
      Если( оСвязиДокументов.Связи.Номер == 7 )
         Если( Есть( оСвязиДокументов.Связка2 ) != 1 )
            пСумма += оСвязиДокументов.Сумма;

   Пока( Следующий( Документ, оСвязиДокументов, "Связка2" ) )
      Если( оСвязиДокументов.Связи.Номер == 7 )
         пСумма += оСвязиДокументов.Сумма;

   Вернуть( пСумма );
}

Функция ВЖурналеРасходУпрощ( Документ1, ... )
{
   оСвязиДокументов = Объект( "Связи документов" );
   перем пСумма = 0;

   Если( Есть( Параметры[ 1 ] ) )
   {
      Документ2 = Параметры[ 1 ];
   
      Пока( Следующий( Документ1, оСвязиДокументов, "Связка1" ) )
         Если( оСвязиДокументов.Связи.Номер == 7 )
            Если( оСвязиДокументов.Связка2 == Документ2 )
               пСумма += оСвязиДокументов.Сумма;
   }
   иначе
   {
      Пока( Следующий( Документ1, оСвязиДокументов, "Связка2" ) )
         Если( оСвязиДокументов.Связи.Номер == 7 )
            пСумма += оСвязиДокументов.Сумма;
   }

   Вернуть( пСумма );
}

Функция УплатаНалогаПоМес( НомерСчета, ДатНач, ДатКнц )
# Возвращает массив с суммами налога уплаченного помесячно за вычетом пеней.
# Индексом массива являются первые числа месяца.
# В элементе массива ИТОГО содержится сумма за все месяца
# Перебирает проводки по дебету указанного счета,
# и анализирует назначение платежа, указанное в платежном поручении
# для отнесения к соответствующему отчетному периоду.
# Параметры: НомерСчета - номер счета и субсчета 69 или 68 счета
#            ДатНач, ДатКнц - отчетный период
{
   ПроверитьКонстанту( "51БАНК", "Расчетный счет", "51", "СЧЕТА.СЧ51", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(51) РАСЧЕТНЫЙ СЧЕТ" );
   ПроверитьКонстанту( "55СПЕЦСЧЕТА", "Специальные счета в банках", "55", "СЧЕТА.СЧ55", "КОДОВЫЕ НАЗВАНИЯ СЧЕТОВ.(55) СПЕЦИАЛЬНЫЕ СЧЕТА В БАНКАХ" );
   
   # Ищем текущий план счетов
   Объект оПланСчетов = Объект( "План счетов" );
   Корень( оПланСчетов );
   # перебираем корневые записи план счетов, т.е. Планы счетов (СТАРЫЙ, НОВЫЙ)
   Перем пТекущийПланСчетов = УстановитьПланСчетов( "" );
   Пока( Найти( оПланСчетов, "План счетов" ) и 'оПланСчетов.Номер счета' != пТекущийПланСчетов );

   # Ищем счет НомерСчета в текущем плане счетов
   Объект оСчет = Объект( "План счетов" );
   'оСчет.N плана' = 'оПланСчетов.N плана';
   'оСчет.Номер счета' = Вверх( НомерСчета );
   Если( Найти( оСчет, "Номер счета" ) != 1 ) 
      Ошибка("Не найден счет '" + Вверх( НомерСчета ) + "'" );
   
   Перем пВсего;
   Объект мСуммы; # Возвращаемый массив
   оПров = Объект("Проводки");
   Связать( оПров.Дебет, оСчет );
   оПров.Дата = ДатНач;
   Найти( оПров, "Дебет" );
   # Перебираем все проводки по дебету указанного счета
   Пока( оПров.Дата >= ДатНач и оПров.Дебет == оСчет и Есть( оПров ) == 1 )
   { 
      Объект оДок = 'оПров.Документ-Проводки';
      Если( Найти( 'оПров.Кредит.Номер счета', 51БАНК ) == 1
        или Найти( 'оПров.Кредит.Номер счета', 55СПЕЦСЧЕТА ) == 1 )
      {
         # Анализируем назначение платежа
         Перем пОКАТО, пОснованиеПлатежа, пПериод, пНомерОсн, пДатаОсн, пВидПлатежа, пПримечание,
               пДень, пМесяц, пГод;
         Разбить( оДок.Примечание, ";", пОКАТО, пОснованиеПлатежа, пПериод, пНомерОсн, пДатаОсн, пВидПлатежа, пПримечание);
         Если( пВидПлатежа != "ПЕ" ) # Учитываем все платежи, кроме пени
         {
            Разбить( пПериод, ".", пДень, пМесяц, пГод);
            Если( пДень == "МС" ) 
            {
               Перем пДата = Дата( 1, пМесяц, пГод );
               Если( пДата >= ДатНач и пДата <= ДатКнц )
               {
                  мСуммы[ пДата ] += оПров.Сумма;
                  пВсего += оПров.Сумма;
               }
            }
            Иначе
               Сообщить( "В платежке № " + оДок.Номер + " от " + оДок.Дата + " неправильно заполнено назначение платежа."
                       + "\nДолжен быть указан МС (месячный платеж)." );
         }
      }
      Следующий( оСчет, оПров, "Дебет");
   }
   # Если в какие-то месяца не было платежей, то инициализируем их нулем
   пДата = НачМес( ДатНач );
   Пока( пДата <= ДатКнц )
   {
      Если( !Есть( мСуммы[пДата] ) ) мСуммы[пДата] = 0;
      пДата = Дата( 1, Месяц( пДата ) + 1, Год( пДата ) );
   }
   мСуммы.ИТОГО = пВсего;
   Вернуть мСуммы;
}